
CAN_NORMAL_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009058  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080091e0  080091e0  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091fc  080091fc  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080091fc  080091fc  0000a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009204  08009204  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009208  08009208  0000a208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800920c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          000009fc  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a78  20000a78  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d1a  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de1  00000000  00000000  00022dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00026ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  00027f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b5c  00000000  00000000  00028e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c2a  00000000  00000000  0004e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da32d  00000000  00000000  0006858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001428b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054dc  00000000  00000000  001428fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00147dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080091c8 	.word	0x080091c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080091c8 	.word	0x080091c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_GPIO_EXTI_Callback>:



//called when button is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_0)
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d10e      	bne.n	80004e6 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		TxData[0]=100;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80004ca:	2264      	movs	r2, #100	@ 0x64
 80004cc:	701a      	strb	r2, [r3, #0]
        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004d0:	4a07      	ldr	r2, [pc, #28]	@ (80004f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80004d2:	4909      	ldr	r1, [pc, #36]	@ (80004f8 <HAL_GPIO_EXTI_Callback+0x40>)
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <HAL_GPIO_EXTI_Callback+0x44>)
 80004d6:	f001 fae9 	bl	8001aac <HAL_CAN_AddTxMessage>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <HAL_GPIO_EXTI_Callback+0x2e>
        {
        	datacheck=1;
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <HAL_GPIO_EXTI_Callback+0x48>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
        }
	}

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000230 	.word	0x20000230
 80004f4:	20000240 	.word	0x20000240
 80004f8:	200001fc 	.word	0x200001fc
 80004fc:	200000e0 	.word	0x200000e0
 8000500:	20000244 	.word	0x20000244

08000504 <HAL_CAN_RxFifo0MsgPendingCallback>:


//Not used in transmission
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000510:	2100      	movs	r1, #0
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fba5 	bl	8001c62 <HAL_CAN_GetRxMessage>

	 datacheck=1;
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]

}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000238 	.word	0x20000238
 800052c:	20000214 	.word	0x20000214
 8000530:	20000244 	.word	0x20000244

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fda0 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f84c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9ec 	bl	800091c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000544:	f000 f956 	bl	80007f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000548:	f000 f982 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 800054c:	f000 f9b0 	bl	80008b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000550:	f008 f9e6 	bl	8008920 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000554:	f000 f8fc 	bl	8000750 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000558:	f000 f8a8 	bl	80006ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800055c:	481a      	ldr	r0, [pc, #104]	@ (80005c8 <main+0x94>)
 800055e:	f001 fa61 	bl	8001a24 <HAL_CAN_Start>
  //Activate Notification

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000562:	2102      	movs	r1, #2
 8000564:	4818      	ldr	r0, [pc, #96]	@ (80005c8 <main+0x94>)
 8000566:	f001 fc8e 	bl	8001e86 <HAL_CAN_ActivateNotification>

  TxHeader.DLC=2;
 800056a:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <main+0x98>)
 800056c:	2202      	movs	r2, #2
 800056e:	611a      	str	r2, [r3, #16]
  TxHeader.IDE= CAN_ID_STD;
 8000570:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <main+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA;
 8000576:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <main+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId= 0x446;
 800057c:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <main+0x98>)
 800057e:	f240 4246 	movw	r2, #1094	@ 0x446
 8000582:	601a      	str	r2, [r3, #0]
  //TxData[0]=100;
  //TxData[1]=200;
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000584:	f008 f9f2 	bl	800896c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_CAN_Start(&hcan1);
 8000588:	480f      	ldr	r0, [pc, #60]	@ (80005c8 <main+0x94>)
 800058a:	f001 fa4b 	bl	8001a24 <HAL_CAN_Start>
   // Pot = HAL_ADC_GetValue(&hadc1);
    //TxData[0] = (Pot >> 8) & 0xFF;  // High byte (MSB)
    //TxData[1] = Pot & 0xFF;         // Low byte (LSB)


    if (datacheck)
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <main+0x9c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00f      	beq.n	80005b6 <main+0x82>
    {
    	//Blink Led

        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Toggle LED
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <main+0xa0>)
 800059c:	f002 f98f 	bl	80028be <HAL_GPIO_TogglePin>
        HAL_Delay(100);  // Small delay for visibility
 80005a0:	2064      	movs	r0, #100	@ 0x64
 80005a2:	f000 fddd 	bl	8001160 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Toggle LED back
 80005a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005aa:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <main+0xa0>)
 80005ac:	f002 f987 	bl	80028be <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	@ 0x64
 80005b2:	f000 fdd5 	bl	8001160 <HAL_Delay>
    }

    datacheck=0;
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <main+0x9c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
    HAL_Delay(500);
 80005bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c0:	f000 fdce 	bl	8001160 <HAL_Delay>
    MX_USB_HOST_Process();
 80005c4:	e7de      	b.n	8000584 <main+0x50>
 80005c6:	bf00      	nop
 80005c8:	200000e0 	.word	0x200000e0
 80005cc:	200001fc 	.word	0x200001fc
 80005d0:	20000244 	.word	0x20000244
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fd60 	bl	80090ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fb4e 	bl	8004d00 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 fa69 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fdaf 	bl	80051f0 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 fa52 	bl	8000b40 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <MX_ADC1_Init+0x9c>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006da:	2201      	movs	r2, #1
 80006dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <MX_ADC1_Init+0xa0>)
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_ADC1_Init+0x98>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_ADC1_Init+0x98>)
 8000708:	2201      	movs	r2, #1
 800070a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070c:	480d      	ldr	r0, [pc, #52]	@ (8000744 <MX_ADC1_Init+0x98>)
 800070e:	f000 fd4b 	bl	80011a8 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000718:	f000 fa12 	bl	8000b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071c:	2301      	movs	r3, #1
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000724:	2301      	movs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_ADC1_Init+0x98>)
 800072e:	f000 fd7f 	bl	8001230 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000738:	f000 fa02 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000098 	.word	0x20000098
 8000748:	40012000 	.word	0x40012000
 800074c:	0f000001 	.word	0x0f000001

08000750 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000758:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <MX_CAN1_Init+0xa0>)
 800075a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800075c:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <MX_CAN1_Init+0x9c>)
 800075e:	2215      	movs	r2, #21
 8000760:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000768:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_CAN1_Init+0x9c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000770:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000774:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_CAN1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000784:	2200      	movs	r2, #0
 8000786:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_CAN1_Init+0x9c>)
 800078a:	2200      	movs	r2, #0
 800078c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000790:	2200      	movs	r2, #0
 8000792:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_CAN1_Init+0x9c>)
 8000796:	2200      	movs	r2, #0
 8000798:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_CAN1_Init+0x9c>)
 800079c:	2200      	movs	r2, #0
 800079e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007a0:	4812      	ldr	r0, [pc, #72]	@ (80007ec <MX_CAN1_Init+0x9c>)
 80007a2:	f000 ff63 	bl	800166c <HAL_CAN_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f9c8 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank=18;
 80007b4:	2312      	movs	r3, #18
 80007b6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh=0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh=0x0000;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow=0x0000;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank=20;//doesnt matter
 80007d4:	2314      	movs	r3, #20
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4803      	ldr	r0, [pc, #12]	@ (80007ec <MX_CAN1_Init+0x9c>)
 80007de:	f001 f841 	bl	8001864 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	@ 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000e0 	.word	0x200000e0
 80007f0:	40006400 	.word	0x40006400

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x50>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <MX_I2C1_Init+0x54>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_I2C1_Init+0x58>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_I2C1_Init+0x50>)
 8000832:	f003 fc81 	bl	8004138 <HAL_I2C_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 f980 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000108 	.word	0x20000108
 8000848:	40005400 	.word	0x40005400
 800084c:	000186a0 	.word	0x000186a0

08000850 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <MX_I2S3_Init+0x5c>)
 800087a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_I2S3_Init+0x54>)
 8000890:	f003 fd96 	bl	80043c0 <HAL_I2S_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089a:	f000 f951 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000015c 	.word	0x2000015c
 80008a8:	40003c00 	.word	0x40003c00
 80008ac:	00017700 	.word	0x00017700

080008b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_SPI1_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SPI1_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_SPI1_Init+0x64>)
 8000902:	f004 ffc1 	bl	8005888 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 f918 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200001a4 	.word	0x200001a4
 8000918:	40013000 	.word	0x40013000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	4b7c      	ldr	r3, [pc, #496]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a7b      	ldr	r2, [pc, #492]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b79      	ldr	r3, [pc, #484]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b75      	ldr	r3, [pc, #468]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a74      	ldr	r2, [pc, #464]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b72      	ldr	r3, [pc, #456]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b6e      	ldr	r3, [pc, #440]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a6d      	ldr	r2, [pc, #436]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b6b      	ldr	r3, [pc, #428]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b67      	ldr	r3, [pc, #412]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a66      	ldr	r2, [pc, #408]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b64      	ldr	r3, [pc, #400]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b60      	ldr	r3, [pc, #384]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a5f      	ldr	r2, [pc, #380]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b59      	ldr	r3, [pc, #356]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a58      	ldr	r2, [pc, #352]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b56      	ldr	r3, [pc, #344]	@ (8000b28 <MX_GPIO_Init+0x20c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4853      	ldr	r0, [pc, #332]	@ (8000b2c <MX_GPIO_Init+0x210>)
 80009e0:	f001 ff54 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2101      	movs	r1, #1
 80009e8:	4851      	ldr	r0, [pc, #324]	@ (8000b30 <MX_GPIO_Init+0x214>)
 80009ea:	f001 ff4f 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ee:	2200      	movs	r2, #0
 80009f0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009f4:	484f      	ldr	r0, [pc, #316]	@ (8000b34 <MX_GPIO_Init+0x218>)
 80009f6:	f001 ff49 	bl	800288c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009fa:	2308      	movs	r3, #8
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4846      	ldr	r0, [pc, #280]	@ (8000b2c <MX_GPIO_Init+0x210>)
 8000a12:	f001 fd9f 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4840      	ldr	r0, [pc, #256]	@ (8000b30 <MX_GPIO_Init+0x214>)
 8000a2e:	f001 fd91 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a42:	2305      	movs	r3, #5
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4838      	ldr	r0, [pc, #224]	@ (8000b30 <MX_GPIO_Init+0x214>)
 8000a4e:	f001 fd81 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4834      	ldr	r0, [pc, #208]	@ (8000b38 <MX_GPIO_Init+0x21c>)
 8000a68:	f001 fd74 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482f      	ldr	r0, [pc, #188]	@ (8000b3c <MX_GPIO_Init+0x220>)
 8000a80:	f001 fd68 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a96:	2305      	movs	r3, #5
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4826      	ldr	r0, [pc, #152]	@ (8000b3c <MX_GPIO_Init+0x220>)
 8000aa2:	f001 fd57 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000aaa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	481d      	ldr	r0, [pc, #116]	@ (8000b34 <MX_GPIO_Init+0x218>)
 8000ac0:	f001 fd48 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4817      	ldr	r0, [pc, #92]	@ (8000b34 <MX_GPIO_Init+0x218>)
 8000ad8:	f001 fd3c 	bl	8002554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <MX_GPIO_Init+0x21c>)
 8000af0:	f001 fd30 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000af8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <MX_GPIO_Init+0x210>)
 8000b0a:	f001 fd23 	bl	8002554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2006      	movs	r0, #6
 8000b14:	f001 fce7 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f001 fd00 	bl	800251e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	@ 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020400 	.word	0x40020400

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8a:	2007      	movs	r0, #7
 8000b8c:	f001 fca0 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_ADC_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d127      	bne.n	8000c0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a15      	ldr	r2, [pc, #84]	@ (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_ADC_MspInit+0x80>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <HAL_ADC_MspInit+0x80>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_ADC_MspInit+0x80>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <HAL_ADC_MspInit+0x84>)
 8000c0a:	f001 fca3 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a25      	ldr	r2, [pc, #148]	@ (8000cd8 <HAL_CAN_MspInit+0xb4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d143      	bne.n	8000cce <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <HAL_CAN_MspInit+0xb8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <HAL_CAN_MspInit+0xb8>)
 8000c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <HAL_CAN_MspInit+0xb8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <HAL_CAN_MspInit+0xb8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <HAL_CAN_MspInit+0xb8>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_CAN_MspInit+0xb8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c8e:	2309      	movs	r3, #9
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <HAL_CAN_MspInit+0xbc>)
 8000c9a:	f001 fc5b 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cae:	2309      	movs	r3, #9
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <HAL_CAN_MspInit+0xbc>)
 8000cba:	f001 fc4b 	bl	8002554 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2014      	movs	r0, #20
 8000cc4:	f001 fc0f 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cc8:	2014      	movs	r0, #20
 8000cca:	f001 fc28 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	@ 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40006400 	.word	0x40006400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020c00 	.word	0x40020c00

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	@ (8000d68 <HAL_I2C_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12c      	bne.n	8000d60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d40:	f001 fc08 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	@ 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <HAL_I2S_MspInit+0xf0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d15a      	bne.n	8000e5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000da4:	2301      	movs	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000da8:	23c0      	movs	r3, #192	@ 0xc0
 8000daa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fc27 	bl	8005608 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000dc0:	f7ff febe 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	4b27      	ldr	r3, [pc, #156]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	4a26      	ldr	r2, [pc, #152]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd4:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_I2S_MspInit+0xf4>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <HAL_I2S_MspInit+0xf8>)
 8000e34:	f001 fb8e 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e38:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <HAL_I2S_MspInit+0xfc>)
 8000e56:	f001 fb7d 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3738      	adds	r7, #56	@ 0x38
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40003c00 	.word	0x40003c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020800 	.word	0x40020800

08000e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12b      	bne.n	8000eee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a17      	ldr	r2, [pc, #92]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ece:	23e0      	movs	r3, #224	@ 0xe0
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_SPI_MspInit+0x8c>)
 8000eea:	f001 fb33 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f8e1 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 fcc4 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <CAN1_RX0_IRQHandler+0x10>)
 8000f76:	f000 ffac 	bl	8001ed2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000e0 	.word	0x200000e0

08000f84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <OTG_FS_IRQHandler+0x10>)
 8000f8a:	f001 ff35 	bl	8002df8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000062c 	.word	0x2000062c

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f008 f888 	bl	80090dc <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	20000248 	.word	0x20000248
 8001000:	20000a78 	.word	0x20000a78

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	@ (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	@ (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f008 f847 	bl	80090e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fa6b 	bl	8000534 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800106c:	0800920c 	.word	0x0800920c
  ldr r2, =_sbss
 8001070:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001074:	20000a78 	.word	0x20000a78

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f001 fa13 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd4c 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fa2b 	bl	800253a <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010fc:	f001 f9f3 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	2000024c 	.word	0x2000024c

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000024c 	.word	0x2000024c

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e033      	b.n	8001226 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fce8 	bl	8000b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ee:	f023 0302 	bic.w	r3, r3, #2
 80011f2:	f043 0202 	orr.w	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f93a 	bl	8001474 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f023 0303 	bic.w	r3, r3, #3
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40
 8001216:	e001      	b.n	800121c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1c>
 8001248:	2302      	movs	r3, #2
 800124a:	e105      	b.n	8001458 <HAL_ADC_ConfigChannel+0x228>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b09      	cmp	r3, #9
 800125a:	d925      	bls.n	80012a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	3b1e      	subs	r3, #30
 8001272:	2207      	movs	r2, #7
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43da      	mvns	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	400a      	ands	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68d9      	ldr	r1, [r3, #12]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	4603      	mov	r3, r0
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4403      	add	r3, r0
 800129a:	3b1e      	subs	r3, #30
 800129c:	409a      	lsls	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	e022      	b.n	80012ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	2207      	movs	r2, #7
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6919      	ldr	r1, [r3, #16]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4403      	add	r3, r0
 80012e4:	409a      	lsls	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d824      	bhi.n	8001340 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b05      	subs	r3, #5
 8001308:	221f      	movs	r2, #31
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	400a      	ands	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b05      	subs	r3, #5
 8001332:	fa00 f203 	lsl.w	r2, r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34
 800133e:	e04c      	b.n	80013da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d824      	bhi.n	8001392 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	3b23      	subs	r3, #35	@ 0x23
 800135a:	221f      	movs	r2, #31
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b23      	subs	r3, #35	@ 0x23
 8001384:	fa00 f203 	lsl.w	r2, r0, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001390:	e023      	b.n	80013da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b41      	subs	r3, #65	@ 0x41
 80013a4:	221f      	movs	r2, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b41      	subs	r3, #65	@ 0x41
 80013ce:	fa00 f203 	lsl.w	r2, r0, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <HAL_ADC_ConfigChannel+0x234>)
 80013dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a21      	ldr	r2, [pc, #132]	@ (8001468 <HAL_ADC_ConfigChannel+0x238>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d109      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1cc>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b12      	cmp	r3, #18
 80013ee:	d105      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <HAL_ADC_ConfigChannel+0x238>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d123      	bne.n	800144e <HAL_ADC_ConfigChannel+0x21e>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d003      	beq.n	8001416 <HAL_ADC_ConfigChannel+0x1e6>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b11      	cmp	r3, #17
 8001414:	d11b      	bne.n	800144e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b10      	cmp	r3, #16
 8001428:	d111      	bne.n	800144e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_ADC_ConfigChannel+0x23c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <HAL_ADC_ConfigChannel+0x240>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9a      	lsrs	r2, r3, #18
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40012300 	.word	0x40012300
 8001468:	40012000 	.word	0x40012000
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83

08001474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800147c:	4b79      	ldr	r3, [pc, #484]	@ (8001664 <ADC_Init+0x1f0>)
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	431a      	orrs	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	021a      	lsls	r2, r3, #8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6899      	ldr	r1, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001506:	4a58      	ldr	r2, [pc, #352]	@ (8001668 <ADC_Init+0x1f4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d022      	beq.n	8001552 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800151a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800153c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e00f      	b.n	8001572 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001570:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0202 	bic.w	r2, r2, #2
 8001580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6899      	ldr	r1, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e1b      	ldrb	r3, [r3, #24]
 800158c:	005a      	lsls	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	3b01      	subs	r3, #1
 80015cc:	035a      	lsls	r2, r3, #13
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	e007      	b.n	80015e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	3b01      	subs	r3, #1
 8001604:	051a      	lsls	r2, r3, #20
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800161c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800162a:	025a      	lsls	r2, r3, #9
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	029a      	lsls	r2, r3, #10
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40012300 	.word	0x40012300
 8001668:	0f000001 	.word	0x0f000001

0800166c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0ed      	b.n	800185a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff faca 	bl	8000c24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff fd52 	bl	8001148 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016a6:	e012      	b.n	80016ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a8:	f7ff fd4e 	bl	8001148 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d90b      	bls.n	80016ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0c5      	b.n	800185a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0e5      	beq.n	80016a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0202 	bic.w	r2, r2, #2
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ec:	f7ff fd2c 	bl	8001148 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016f2:	e012      	b.n	800171a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f4:	f7ff fd28 	bl	8001148 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d90b      	bls.n	800171a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2205      	movs	r2, #5
 8001712:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e09f      	b.n	800185a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e5      	bne.n	80016f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7e5b      	ldrb	r3, [r3, #25]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e9b      	ldrb	r3, [r3, #26]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0220 	orr.w	r2, r2, #32
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e007      	b.n	80017a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0220 	bic.w	r2, r2, #32
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7edb      	ldrb	r3, [r3, #27]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0210 	bic.w	r2, r2, #16
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0210 	orr.w	r2, r2, #16
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7f1b      	ldrb	r3, [r3, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0208 	orr.w	r2, r2, #8
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e007      	b.n	80017fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0208 	bic.w	r2, r2, #8
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7f5b      	ldrb	r3, [r3, #29]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0204 	orr.w	r2, r2, #4
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e007      	b.n	8001824 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0204 	bic.w	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	ea42 0103 	orr.w	r1, r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800187c:	7cfb      	ldrb	r3, [r7, #19]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d003      	beq.n	800188a <HAL_CAN_ConfigFilter+0x26>
 8001882:	7cfb      	ldrb	r3, [r7, #19]
 8001884:	2b02      	cmp	r3, #2
 8001886:	f040 80be 	bne.w	8001a06 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800188a:	4b65      	ldr	r3, [pc, #404]	@ (8001a20 <HAL_CAN_ConfigFilter+0x1bc>)
 800188c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018a4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	431a      	orrs	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2201      	movs	r2, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	401a      	ands	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d123      	bne.n	8001934 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800190e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3248      	adds	r2, #72	@ 0x48
 8001914:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001928:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192a:	6979      	ldr	r1, [r7, #20]
 800192c:	3348      	adds	r3, #72	@ 0x48
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d122      	bne.n	8001982 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800195c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3248      	adds	r2, #72	@ 0x48
 8001962:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001976:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001978:	6979      	ldr	r1, [r7, #20]
 800197a:	3348      	adds	r3, #72	@ 0x48
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800199c:	e007      	b.n	80019ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019c8:	e007      	b.n	80019da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019f8:	f023 0201 	bic.w	r2, r3, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e006      	b.n	8001a14 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
  }
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40006400 	.word	0x40006400

08001a24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d12e      	bne.n	8001a96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff fb7a 	bl	8001148 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a56:	e012      	b.n	8001a7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a58:	f7ff fb76 	bl	8001148 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b0a      	cmp	r3, #10
 8001a64:	d90b      	bls.n	8001a7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e012      	b.n	8001aa4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e5      	bne.n	8001a58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e006      	b.n	8001aa4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d003      	beq.n	8001ad8 <HAL_CAN_AddTxMessage+0x2c>
 8001ad0:	7ffb      	ldrb	r3, [r7, #31]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	f040 80b8 	bne.w	8001c48 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80a0 	beq.w	8001c38 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	0e1b      	lsrs	r3, r3, #24
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d907      	bls.n	8001b18 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e09e      	b.n	8001c56 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	6809      	ldr	r1, [r1, #0]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	440b      	add	r3, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e00f      	b.n	8001b66 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b50:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b5a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3318      	adds	r3, #24
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	440b      	add	r3, r1
 8001b64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3318      	adds	r3, #24
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	440b      	add	r3, r1
 8001b76:	3304      	adds	r3, #4
 8001b78:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	7d1b      	ldrb	r3, [r3, #20]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d111      	bne.n	8001ba6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3318      	adds	r3, #24
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3318      	adds	r3, #24
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3307      	adds	r3, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	061a      	lsls	r2, r3, #24
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3306      	adds	r3, #6
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	041b      	lsls	r3, r3, #16
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3305      	adds	r3, #5
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	3204      	adds	r2, #4
 8001bc6:	7812      	ldrb	r2, [r2, #0]
 8001bc8:	4610      	mov	r0, r2
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	6811      	ldr	r1, [r2, #0]
 8001bce:	ea43 0200 	orr.w	r2, r3, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bdc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3303      	adds	r3, #3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	061a      	lsls	r2, r3, #24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3302      	adds	r3, #2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	4610      	mov	r0, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6811      	ldr	r1, [r2, #0]
 8001c04:	ea43 0200 	orr.w	r2, r3, r0
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3318      	adds	r3, #24
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	6811      	ldr	r1, [r2, #0]
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	440b      	add	r3, r1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e00e      	b.n	8001c56 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e006      	b.n	8001c56 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	@ 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c76:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d003      	beq.n	8001c86 <HAL_CAN_GetRxMessage+0x24>
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	f040 80f3 	bne.w	8001e6c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10e      	bne.n	8001caa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e7      	b.n	8001e7a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0d8      	b.n	8001e7a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	331b      	adds	r3, #27
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0204 	and.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	331b      	adds	r3, #27
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	4413      	add	r3, r2
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0d5b      	lsrs	r3, r3, #21
 8001cf6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	331b      	adds	r3, #27
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	331b      	adds	r3, #27
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0202 	and.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	331b      	adds	r3, #27
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	331b      	adds	r3, #27
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	331b      	adds	r3, #27
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0a1a      	lsrs	r2, r3, #8
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0c1a      	lsrs	r2, r3, #16
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	3302      	adds	r3, #2
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e1a      	lsrs	r2, r3, #24
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3303      	adds	r3, #3
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3304      	adds	r3, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0a1a      	lsrs	r2, r3, #8
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3305      	adds	r3, #5
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0c1a      	lsrs	r2, r3, #16
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3306      	adds	r3, #6
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e1a      	lsrs	r2, r3, #24
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0220 	orr.w	r2, r2, #32
 8001e66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e006      	b.n	8001e7a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d002      	beq.n	8001ea4 <HAL_CAN_ActivateNotification+0x1e>
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d109      	bne.n	8001eb8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6959      	ldr	r1, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e006      	b.n	8001ec6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b08a      	sub	sp, #40	@ 0x28
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d07c      	beq.n	8002012 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d023      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f983 	bl	8002240 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f3a:	e016      	b.n	8001f6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4e:	e00c      	b.n	8001f6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f62:	e002      	b.n	8001f6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f989 	bl	800227c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d024      	beq.n	8001fbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f963 	bl	8002254 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f8e:	e016      	b.n	8001fbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa2:	e00c      	b.n	8001fbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb6:	e002      	b.n	8001fbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f969 	bl	8002290 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d024      	beq.n	8002012 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f943 	bl	8002268 <HAL_CAN_TxMailbox2CompleteCallback>
 8001fe2:	e016      	b.n	8002012 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff6:	e00c      	b.n	8002012 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
 800200a:	e002      	b.n	8002012 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f949 	bl	80022a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2210      	movs	r2, #16
 8002034:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2208      	movs	r2, #8
 8002050:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f930 	bl	80022b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7fe fa47 	bl	8000504 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f912 	bl	80022e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8f9 	bl	80022cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2210      	movs	r2, #16
 80020f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8fc 	bl	80022f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2208      	movs	r2, #8
 8002116:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f8f5 	bl	8002308 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d07b      	beq.n	8002220 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d072      	beq.n	8002218 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218c:	2b00      	cmp	r3, #0
 800218e:	d043      	beq.n	8002218 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03e      	beq.n	8002218 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021a0:	2b60      	cmp	r3, #96	@ 0x60
 80021a2:	d02b      	beq.n	80021fc <HAL_CAN_IRQHandler+0x32a>
 80021a4:	2b60      	cmp	r3, #96	@ 0x60
 80021a6:	d82e      	bhi.n	8002206 <HAL_CAN_IRQHandler+0x334>
 80021a8:	2b50      	cmp	r3, #80	@ 0x50
 80021aa:	d022      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x320>
 80021ac:	2b50      	cmp	r3, #80	@ 0x50
 80021ae:	d82a      	bhi.n	8002206 <HAL_CAN_IRQHandler+0x334>
 80021b0:	2b40      	cmp	r3, #64	@ 0x40
 80021b2:	d019      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x316>
 80021b4:	2b40      	cmp	r3, #64	@ 0x40
 80021b6:	d826      	bhi.n	8002206 <HAL_CAN_IRQHandler+0x334>
 80021b8:	2b30      	cmp	r3, #48	@ 0x30
 80021ba:	d010      	beq.n	80021de <HAL_CAN_IRQHandler+0x30c>
 80021bc:	2b30      	cmp	r3, #48	@ 0x30
 80021be:	d822      	bhi.n	8002206 <HAL_CAN_IRQHandler+0x334>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d002      	beq.n	80021ca <HAL_CAN_IRQHandler+0x2f8>
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d005      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021c8:	e01d      	b.n	8002206 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d2:	e019      	b.n	8002208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021dc:	e014      	b.n	8002208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	f043 0320 	orr.w	r3, r3, #32
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e6:	e00f      	b.n	8002208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f0:	e00a      	b.n	8002208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fa:	e005      	b.n	8002208 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002204:	e000      	b.n	8002208 <HAL_CAN_IRQHandler+0x336>
            break;
 8002206:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002216:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2204      	movs	r2, #4
 800221e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f872 	bl	800231c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	@ 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	@ 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e16b      	b.n	8002848 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 815a 	bne.w	8002842 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80b4 	beq.w	8002842 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <HAL_GPIO_Init+0x30c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002860 <HAL_GPIO_Init+0x30c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002860 <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002864 <HAL_GPIO_Init+0x310>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_GPIO_Init+0x314>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a51      	ldr	r2, [pc, #324]	@ (800286c <HAL_GPIO_Init+0x318>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a50      	ldr	r2, [pc, #320]	@ (8002870 <HAL_GPIO_Init+0x31c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4f      	ldr	r2, [pc, #316]	@ (8002874 <HAL_GPIO_Init+0x320>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4e      	ldr	r2, [pc, #312]	@ (8002878 <HAL_GPIO_Init+0x324>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4d      	ldr	r2, [pc, #308]	@ (800287c <HAL_GPIO_Init+0x328>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4c      	ldr	r2, [pc, #304]	@ (8002880 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4b      	ldr	r2, [pc, #300]	@ (8002884 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20a>
 800275a:	2307      	movs	r3, #7
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x228>
 800275e:	2308      	movs	r3, #8
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x228>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	@ (8002864 <HAL_GPIO_Init+0x310>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b3b      	ldr	r3, [pc, #236]	@ (8002888 <HAL_GPIO_Init+0x334>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027be:	4a32      	ldr	r2, [pc, #200]	@ (8002888 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c4:	4b30      	ldr	r3, [pc, #192]	@ (8002888 <HAL_GPIO_Init+0x334>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e8:	4a27      	ldr	r2, [pc, #156]	@ (8002888 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ee:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <HAL_GPIO_Init+0x334>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002812:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <HAL_GPIO_Init+0x334>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_GPIO_Init+0x334>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283c:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <HAL_GPIO_Init+0x334>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae90 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	041a      	lsls	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43d9      	mvns	r1, r3
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	400b      	ands	r3, r1
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fdd0 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002926:	b08f      	sub	sp, #60	@ 0x3c
 8002928:	af0a      	add	r7, sp, #40	@ 0x28
 800292a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e054      	b.n	80029e0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f006 f843 	bl	80089dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 f882 	bl	8005a7e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	687e      	ldr	r6, [r7, #4]
 8002982:	466d      	mov	r5, sp
 8002984:	f106 0410 	add.w	r4, r6, #16
 8002988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002990:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002994:	e885 0003 	stmia.w	r5, {r0, r1}
 8002998:	1d33      	adds	r3, r6, #4
 800299a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299c:	6838      	ldr	r0, [r7, #0]
 800299e:	f002 fffc 	bl	800599a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 f879 	bl	8005aa0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	687e      	ldr	r6, [r7, #4]
 80029b6:	466d      	mov	r5, sp
 80029b8:	f106 0410 	add.w	r4, r6, #16
 80029bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029cc:	1d33      	adds	r3, r6, #4
 80029ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d0:	6838      	ldr	r0, [r7, #0]
 80029d2:	f003 fa01 	bl	8005dd8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af04      	add	r7, sp, #16
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	70fb      	strb	r3, [r7, #3]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70bb      	strb	r3, [r7, #2]
 80029fe:	4613      	mov	r3, r2
 8002a00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_HCD_HC_Init+0x28>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e076      	b.n	8002afe <HAL_HCD_HC_Init+0x116>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	212c      	movs	r1, #44	@ 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	333d      	adds	r3, #61	@ 0x3d
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	212c      	movs	r1, #44	@ 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3338      	adds	r3, #56	@ 0x38
 8002a38:	787a      	ldrb	r2, [r7, #1]
 8002a3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	212c      	movs	r1, #44	@ 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3340      	adds	r3, #64	@ 0x40
 8002a4a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002a4c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	212c      	movs	r1, #44	@ 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3339      	adds	r3, #57	@ 0x39
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	212c      	movs	r1, #44	@ 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	333f      	adds	r3, #63	@ 0x3f
 8002a6e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	78ba      	ldrb	r2, [r7, #2]
 8002a78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a7c:	b2d0      	uxtb	r0, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	@ 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	333a      	adds	r3, #58	@ 0x3a
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	da09      	bge.n	8002aaa <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	@ 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	333b      	adds	r3, #59	@ 0x3b
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e008      	b.n	8002abc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	212c      	movs	r1, #44	@ 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	333b      	adds	r3, #59	@ 0x3b
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	212c      	movs	r1, #44	@ 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	333c      	adds	r3, #60	@ 0x3c
 8002aca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ace:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	787c      	ldrb	r4, [r7, #1]
 8002ad6:	78ba      	ldrb	r2, [r7, #2]
 8002ad8:	78f9      	ldrb	r1, [r7, #3]
 8002ada:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4623      	mov	r3, r4
 8002aec:	f003 fafa 	bl	80060e4 <USB_HC_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}

08002b06 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_HCD_HC_Halt+0x1e>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e00f      	b.n	8002b44 <HAL_HCD_HC_Halt+0x3e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fd4a 	bl	80065ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	70fb      	strb	r3, [r7, #3]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70bb      	strb	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	212c      	movs	r1, #44	@ 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	333b      	adds	r3, #59	@ 0x3b
 8002b74:	78ba      	ldrb	r2, [r7, #2]
 8002b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	212c      	movs	r1, #44	@ 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	333f      	adds	r3, #63	@ 0x3f
 8002b86:	787a      	ldrb	r2, [r7, #1]
 8002b88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b8a:	7c3b      	ldrb	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d112      	bne.n	8002bb6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	@ 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3342      	adds	r3, #66	@ 0x42
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	212c      	movs	r1, #44	@ 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333d      	adds	r3, #61	@ 0x3d
 8002bb0:	7f3a      	ldrb	r2, [r7, #28]
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e008      	b.n	8002bc8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	212c      	movs	r1, #44	@ 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3342      	adds	r3, #66	@ 0x42
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	f200 80c6 	bhi.w	8002d5c <HAL_HCD_HC_SubmitRequest+0x210>
 8002bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002d49 	.word	0x08002d49
 8002be0:	08002c4d 	.word	0x08002c4d
 8002be4:	08002ccb 	.word	0x08002ccb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002be8:	7c3b      	ldrb	r3, [r7, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 80b8 	bne.w	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>
 8002bf0:	78bb      	ldrb	r3, [r7, #2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80b4 	bne.w	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002bf8:	8b3b      	ldrh	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	212c      	movs	r1, #44	@ 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3355      	adds	r3, #85	@ 0x55
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	212c      	movs	r1, #44	@ 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3355      	adds	r3, #85	@ 0x55
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	212c      	movs	r1, #44	@ 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3342      	adds	r3, #66	@ 0x42
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c36:	e093      	b.n	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	212c      	movs	r1, #44	@ 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3342      	adds	r3, #66	@ 0x42
 8002c46:	2202      	movs	r2, #2
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	e089      	b.n	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c4c:	78bb      	ldrb	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11d      	bne.n	8002c8e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	212c      	movs	r1, #44	@ 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3355      	adds	r3, #85	@ 0x55
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	212c      	movs	r1, #44	@ 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3342      	adds	r3, #66	@ 0x42
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c78:	e073      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	212c      	movs	r1, #44	@ 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3342      	adds	r3, #66	@ 0x42
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	e069      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	212c      	movs	r1, #44	@ 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3354      	adds	r3, #84	@ 0x54
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	212c      	movs	r1, #44	@ 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3342      	adds	r3, #66	@ 0x42
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
      break;
 8002cb4:	e055      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	212c      	movs	r1, #44	@ 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3342      	adds	r3, #66	@ 0x42
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
      break;
 8002cc8:	e04b      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cca:	78bb      	ldrb	r3, [r7, #2]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11d      	bne.n	8002d0c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	212c      	movs	r1, #44	@ 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3355      	adds	r3, #85	@ 0x55
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	@ 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3342      	adds	r3, #66	@ 0x42
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cf6:	e034      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	212c      	movs	r1, #44	@ 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3342      	adds	r3, #66	@ 0x42
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
      break;
 8002d0a:	e02a      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	212c      	movs	r1, #44	@ 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3354      	adds	r3, #84	@ 0x54
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	212c      	movs	r1, #44	@ 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3342      	adds	r3, #66	@ 0x42
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
      break;
 8002d32:	e016      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	212c      	movs	r1, #44	@ 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3342      	adds	r3, #66	@ 0x42
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	212c      	movs	r1, #44	@ 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3342      	adds	r3, #66	@ 0x42
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d60:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	212c      	movs	r1, #44	@ 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3344      	adds	r3, #68	@ 0x44
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	8b3a      	ldrh	r2, [r7, #24]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	202c      	movs	r0, #44	@ 0x2c
 8002d7c:	fb00 f303 	mul.w	r3, r0, r3
 8002d80:	440b      	add	r3, r1
 8002d82:	334c      	adds	r3, #76	@ 0x4c
 8002d84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	212c      	movs	r1, #44	@ 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	@ 0x60
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	212c      	movs	r1, #44	@ 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3350      	adds	r3, #80	@ 0x50
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	212c      	movs	r1, #44	@ 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3339      	adds	r3, #57	@ 0x39
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	212c      	movs	r1, #44	@ 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	@ 0x61
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	222c      	movs	r2, #44	@ 0x2c
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	3338      	adds	r3, #56	@ 0x38
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	18d1      	adds	r1, r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	f003 fa9e 	bl	8006328 <USB_HC_StartXfer>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop

08002df8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 ff9f 	bl	8005d52 <USB_GetMode>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 80f6 	bne.w	8003008 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 ff83 	bl	8005d2c <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ec 	beq.w	8003006 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 ff7a 	bl	8005d2c <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e42:	d104      	bne.n	8002e4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 ff6a 	bl	8005d2c <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e62:	d104      	bne.n	8002e6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 ff5a 	bl	8005d2c <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e82:	d104      	bne.n	8002e8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 ff4a 	bl	8005d2c <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d103      	bne.n	8002eaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 ff3c 	bl	8005d2c <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ebe:	d11c      	bne.n	8002efa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ec8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002eda:	2110      	movs	r1, #16
 8002edc:	6938      	ldr	r0, [r7, #16]
 8002ede:	f002 fe2b 	bl	8005b38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ee2:	6938      	ldr	r0, [r7, #16]
 8002ee4:	f002 fe5c 	bl	8005ba0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 f832 	bl	8005f58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f005 fdef 	bl	8008ad8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 ff14 	bl	8005d2c <USB_ReadInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f0e:	d102      	bne.n	8002f16 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f001 f89e 	bl	8004052 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 ff06 	bl	8005d2c <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d106      	bne.n	8002f38 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f005 fdb8 	bl	8008aa0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2208      	movs	r2, #8
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fef5 	bl	8005d2c <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d101      	bne.n	8002f50 <HAL_HCD_IRQHandler+0x158>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_HCD_IRQHandler+0x15a>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0210 	bic.w	r2, r2, #16
 8002f64:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 ffa1 	bl	8003eae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0210 	orr.w	r2, r2, #16
 8002f7a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 fed3 	bl	8005d2c <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f90:	d13a      	bne.n	8003008 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fb08 	bl	80065ac <USB_HC_ReadInterrupt>
 8002f9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e025      	b.n	8002ff0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d018      	beq.n	8002fea <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fce:	d106      	bne.n	8002fde <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8ab 	bl	8003132 <HCD_HC_IN_IRQHandler>
 8002fdc:	e005      	b.n	8002fea <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fbf9 	bl	80037dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3d4      	bcc.n	8002fa4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003002:	615a      	str	r2, [r3, #20]
 8003004:	e000      	b.n	8003008 <HAL_HCD_IRQHandler+0x210>
      return;
 8003006:	bf00      	nop
    }
  }
}
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_HCD_Start+0x16>
 8003020:	2302      	movs	r3, #2
 8003022:	e013      	b.n	800304c <HAL_HCD_Start+0x3e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f002 fff4 	bl	8006020 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fd0d 	bl	8005a5c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_HCD_Stop+0x16>
 8003066:	2302      	movs	r3, #2
 8003068:	e00d      	b.n	8003086 <HAL_HCD_Stop+0x32>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fbe2 	bl	8006840 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 ff96 	bl	8005fcc <USB_ResetPort>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	212c      	movs	r1, #44	@ 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	3360      	adds	r3, #96	@ 0x60
 80030c4:	781b      	ldrb	r3, [r3, #0]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	212c      	movs	r1, #44	@ 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3350      	adds	r3, #80	@ 0x50
 80030ec:	681b      	ldr	r3, [r3, #0]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 ffda 	bl	80060c0 <USB_GetCurrentFrame>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 ffb5 	bl	8006092 <USB_GetHostSpeed>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d11a      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	2304      	movs	r3, #4
 8003172:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	@ 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	@ 0x61
 8003182:	2206      	movs	r2, #6
 8003184:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fa1c 	bl	80065ce <USB_HC_Halt>
 8003196:	e0af      	b.n	80032f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ae:	d11b      	bne.n	80031e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	212c      	movs	r1, #44	@ 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3361      	adds	r3, #97	@ 0x61
 80031d2:	2207      	movs	r2, #7
 80031d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 f9f4 	bl	80065ce <USB_HC_Halt>
 80031e6:	e087      	b.n	80032f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d109      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	2320      	movs	r3, #32
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	e072      	b.n	80032f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d11a      	bne.n	800325e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2308      	movs	r3, #8
 8003238:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	212c      	movs	r1, #44	@ 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3361      	adds	r3, #97	@ 0x61
 8003248:	2205      	movs	r2, #5
 800324a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f003 f9b9 	bl	80065ce <USB_HC_Halt>
 800325c:	e04c      	b.n	80032f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003274:	d11b      	bne.n	80032ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003282:	461a      	mov	r2, r3
 8003284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003288:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	212c      	movs	r1, #44	@ 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	3361      	adds	r3, #97	@ 0x61
 8003298:	2208      	movs	r2, #8
 800329a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 f991 	bl	80065ce <USB_HC_Halt>
 80032ac:	e024      	b.n	80032f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c0:	2b80      	cmp	r3, #128	@ 0x80
 80032c2:	d119      	bne.n	80032f8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	212c      	movs	r1, #44	@ 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3361      	adds	r3, #97	@ 0x61
 80032e4:	2206      	movs	r2, #6
 80032e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f96b 	bl	80065ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800330a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330e:	d112      	bne.n	8003336 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f003 f957 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003332:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003334:	e24e      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 80df 	bne.w	800350c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	212c      	movs	r1, #44	@ 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3348      	adds	r3, #72	@ 0x48
 8003364:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0159      	lsls	r1, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	440b      	add	r3, r1
 800336e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003378:	1ad2      	subs	r2, r2, r3
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	202c      	movs	r0, #44	@ 0x2c
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	440b      	add	r3, r1
 8003386:	3350      	adds	r3, #80	@ 0x50
 8003388:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	212c      	movs	r1, #44	@ 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	3361      	adds	r3, #97	@ 0x61
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	@ 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	335c      	adds	r3, #92	@ 0x5c
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ba:	461a      	mov	r2, r3
 80033bc:	2301      	movs	r3, #1
 80033be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	212c      	movs	r1, #44	@ 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	333f      	adds	r3, #63	@ 0x3f
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	@ 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	333f      	adds	r3, #63	@ 0x3f
 80033e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d111      	bne.n	800340c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 f8eb 	bl	80065ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	2310      	movs	r3, #16
 8003408:	6093      	str	r3, [r2, #8]
 800340a:	e03a      	b.n	8003482 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	@ 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	333f      	adds	r3, #63	@ 0x3f
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d009      	beq.n	8003434 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	@ 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	333f      	adds	r3, #63	@ 0x3f
 800342e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003430:	2b01      	cmp	r3, #1
 8003432:	d126      	bne.n	8003482 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	440a      	add	r2, r1
 800344a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800344e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003452:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	212c      	movs	r1, #44	@ 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3360      	adds	r3, #96	@ 0x60
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	b2d9      	uxtb	r1, r3
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	202c      	movs	r0, #44	@ 0x2c
 8003470:	fb00 f303 	mul.w	r3, r0, r3
 8003474:	4413      	add	r3, r2
 8003476:	3360      	adds	r3, #96	@ 0x60
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f005 fb39 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d12b      	bne.n	80034e2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	212c      	movs	r1, #44	@ 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3348      	adds	r3, #72	@ 0x48
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	202c      	movs	r0, #44	@ 0x2c
 80034a0:	fb00 f202 	mul.w	r2, r0, r2
 80034a4:	440a      	add	r2, r1
 80034a6:	3240      	adds	r2, #64	@ 0x40
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 818e 	beq.w	80037d4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	212c      	movs	r1, #44	@ 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3354      	adds	r3, #84	@ 0x54
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b2d8      	uxtb	r0, r3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	212c      	movs	r1, #44	@ 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3354      	adds	r3, #84	@ 0x54
 80034dc:	4602      	mov	r2, r0
 80034de:	701a      	strb	r2, [r3, #0]
}
 80034e0:	e178      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	212c      	movs	r1, #44	@ 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3354      	adds	r3, #84	@ 0x54
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	f083 0301 	eor.w	r3, r3, #1
 80034f6:	b2d8      	uxtb	r0, r3
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	212c      	movs	r1, #44	@ 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3354      	adds	r3, #84	@ 0x54
 8003506:	4602      	mov	r2, r0
 8003508:	701a      	strb	r2, [r3, #0]
}
 800350a:	e163      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	f040 80f6 	bne.w	8003710 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	212c      	movs	r1, #44	@ 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3361      	adds	r3, #97	@ 0x61
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d109      	bne.n	800354c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	212c      	movs	r1, #44	@ 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3360      	adds	r3, #96	@ 0x60
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e0c9      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	212c      	movs	r1, #44	@ 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3361      	adds	r3, #97	@ 0x61
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d109      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	212c      	movs	r1, #44	@ 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3360      	adds	r3, #96	@ 0x60
 800356e:	2205      	movs	r2, #5
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e0b5      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	212c      	movs	r1, #44	@ 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3361      	adds	r3, #97	@ 0x61
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b06      	cmp	r3, #6
 8003586:	d009      	beq.n	800359c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	212c      	movs	r1, #44	@ 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3361      	adds	r3, #97	@ 0x61
 8003596:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003598:	2b08      	cmp	r3, #8
 800359a:	d150      	bne.n	800363e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	212c      	movs	r1, #44	@ 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	335c      	adds	r3, #92	@ 0x5c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	202c      	movs	r0, #44	@ 0x2c
 80035b4:	fb00 f303 	mul.w	r3, r0, r3
 80035b8:	440b      	add	r3, r1
 80035ba:	335c      	adds	r3, #92	@ 0x5c
 80035bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	212c      	movs	r1, #44	@ 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	335c      	adds	r3, #92	@ 0x5c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d912      	bls.n	80035f8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	212c      	movs	r1, #44	@ 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	335c      	adds	r3, #92	@ 0x5c
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	212c      	movs	r1, #44	@ 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3360      	adds	r3, #96	@ 0x60
 80035f2:	2204      	movs	r2, #4
 80035f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035f6:	e073      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	212c      	movs	r1, #44	@ 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	3360      	adds	r3, #96	@ 0x60
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003620:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003628:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800363c:	e050      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	212c      	movs	r1, #44	@ 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3361      	adds	r3, #97	@ 0x61
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d122      	bne.n	8003698 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	212c      	movs	r1, #44	@ 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3360      	adds	r3, #96	@ 0x60
 8003660:	2202      	movs	r2, #2
 8003662:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800367a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003682:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e023      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	212c      	movs	r1, #44	@ 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3361      	adds	r3, #97	@ 0x61
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	d119      	bne.n	80036e0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	212c      	movs	r1, #44	@ 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	335c      	adds	r3, #92	@ 0x5c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	202c      	movs	r0, #44	@ 0x2c
 80036c4:	fb00 f303 	mul.w	r3, r0, r3
 80036c8:	440b      	add	r3, r1
 80036ca:	335c      	adds	r3, #92	@ 0x5c
 80036cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	212c      	movs	r1, #44	@ 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3360      	adds	r3, #96	@ 0x60
 80036dc:	2204      	movs	r2, #4
 80036de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2302      	movs	r3, #2
 80036f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	b2d9      	uxtb	r1, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	202c      	movs	r0, #44	@ 0x2c
 80036fc:	fb00 f303 	mul.w	r3, r0, r3
 8003700:	4413      	add	r3, r2
 8003702:	3360      	adds	r3, #96	@ 0x60
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 f9f3 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800370e:	e061      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b10      	cmp	r3, #16
 8003724:	d156      	bne.n	80037d4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	212c      	movs	r1, #44	@ 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	333f      	adds	r3, #63	@ 0x3f
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d111      	bne.n	800375e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	212c      	movs	r1, #44	@ 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	335c      	adds	r3, #92	@ 0x5c
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f002 ff39 	bl	80065ce <USB_HC_Halt>
 800375c:	e031      	b.n	80037c2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	212c      	movs	r1, #44	@ 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	333f      	adds	r3, #63	@ 0x3f
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	212c      	movs	r1, #44	@ 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	333f      	adds	r3, #63	@ 0x3f
 8003780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003782:	2b02      	cmp	r3, #2
 8003784:	d11d      	bne.n	80037c2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	212c      	movs	r1, #44	@ 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	335c      	adds	r3, #92	@ 0x5c
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	212c      	movs	r1, #44	@ 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3361      	adds	r3, #97	@ 0x61
 80037ae:	2203      	movs	r2, #3
 80037b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 ff06 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	2310      	movs	r3, #16
 80037d2:	6093      	str	r3, [r2, #8]
}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d11a      	bne.n	8003842 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	4413      	add	r3, r2
 8003814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003818:	461a      	mov	r2, r3
 800381a:	2304      	movs	r3, #4
 800381c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	@ 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3361      	adds	r3, #97	@ 0x61
 800382c:	2206      	movs	r2, #6
 800382e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f002 fec7 	bl	80065ce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003840:	e331      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b20      	cmp	r3, #32
 8003856:	d12e      	bne.n	80038b6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003864:	461a      	mov	r2, r3
 8003866:	2320      	movs	r3, #32
 8003868:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	212c      	movs	r1, #44	@ 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	333d      	adds	r3, #61	@ 0x3d
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 8313 	bne.w	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	212c      	movs	r1, #44	@ 0x2c
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	4413      	add	r3, r2
 800388c:	333d      	adds	r3, #61	@ 0x3d
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	@ 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3360      	adds	r3, #96	@ 0x60
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fe8d 	bl	80065ce <USB_HC_Halt>
}
 80038b4:	e2f7      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038cc:	d112      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038da:	461a      	mov	r2, r3
 80038dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 fe6e 	bl	80065ce <USB_HC_Halt>
}
 80038f2:	e2d8      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	d140      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	212c      	movs	r1, #44	@ 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	@ 0x5c
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	4413      	add	r3, r2
 8003924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	d111      	bne.n	8003956 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	212c      	movs	r1, #44	@ 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	333d      	adds	r3, #61	@ 0x3d
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003950:	461a      	mov	r2, r3
 8003952:	2340      	movs	r3, #64	@ 0x40
 8003954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003962:	461a      	mov	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	@ 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3361      	adds	r3, #97	@ 0x61
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f002 fe22 	bl	80065ce <USB_HC_Halt>
}
 800398a:	e28c      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d12c      	bne.n	80039fc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	@ 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3361      	adds	r3, #97	@ 0x61
 80039b0:	2204      	movs	r2, #4
 80039b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	@ 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	333d      	adds	r3, #61	@ 0x3d
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	@ 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	335c      	adds	r3, #92	@ 0x5c
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 fdf3 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	2340      	movs	r3, #64	@ 0x40
 80039f8:	6093      	str	r3, [r2, #8]
}
 80039fa:	e254      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11a      	bne.n	8003a48 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2308      	movs	r3, #8
 8003a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	212c      	movs	r1, #44	@ 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3361      	adds	r3, #97	@ 0x61
 8003a32:	2205      	movs	r2, #5
 8003a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f002 fdc4 	bl	80065ce <USB_HC_Halt>
}
 8003a46:	e22e      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d140      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	212c      	movs	r1, #44	@ 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	335c      	adds	r3, #92	@ 0x5c
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	212c      	movs	r1, #44	@ 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3361      	adds	r3, #97	@ 0x61
 8003a7e:	2203      	movs	r2, #3
 8003a80:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	212c      	movs	r1, #44	@ 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	333d      	adds	r3, #61	@ 0x3d
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d112      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	212c      	movs	r1, #44	@ 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	333c      	adds	r3, #60	@ 0x3c
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	212c      	movs	r1, #44	@ 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	333d      	adds	r3, #61	@ 0x3d
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f002 fd81 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2310      	movs	r3, #16
 8003adc:	6093      	str	r3, [r2, #8]
}
 8003ade:	e1e2      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af2:	2b80      	cmp	r3, #128	@ 0x80
 8003af4:	d164      	bne.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d111      	bne.n	8003b22 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	212c      	movs	r1, #44	@ 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3361      	adds	r3, #97	@ 0x61
 8003b0c:	2206      	movs	r2, #6
 8003b0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f002 fd57 	bl	80065ce <USB_HC_Halt>
 8003b20:	e044      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	212c      	movs	r1, #44	@ 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	335c      	adds	r3, #92	@ 0x5c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	202c      	movs	r0, #44	@ 0x2c
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	440b      	add	r3, r1
 8003b40:	335c      	adds	r3, #92	@ 0x5c
 8003b42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	212c      	movs	r1, #44	@ 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	335c      	adds	r3, #92	@ 0x5c
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d920      	bls.n	8003b9a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	212c      	movs	r1, #44	@ 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	335c      	adds	r3, #92	@ 0x5c
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	212c      	movs	r1, #44	@ 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3360      	adds	r3, #96	@ 0x60
 8003b78:	2204      	movs	r2, #4
 8003b7a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	b2d9      	uxtb	r1, r3
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	202c      	movs	r0, #44	@ 0x2c
 8003b86:	fb00 f303 	mul.w	r3, r0, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3360      	adds	r3, #96	@ 0x60
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f004 ffae 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b98:	e008      	b.n	8003bac <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	212c      	movs	r1, #44	@ 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3360      	adds	r3, #96	@ 0x60
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2380      	movs	r3, #128	@ 0x80
 8003bbc:	6093      	str	r3, [r2, #8]
}
 8003bbe:	e172      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd6:	d11b      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	212c      	movs	r1, #44	@ 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3361      	adds	r3, #97	@ 0x61
 8003be6:	2208      	movs	r2, #8
 8003be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 fcea 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c06:	461a      	mov	r2, r3
 8003c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c0c:	6093      	str	r3, [r2, #8]
}
 8003c0e:	e14a      	b.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	f040 813f 	bne.w	8003ea6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	@ 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3361      	adds	r3, #97	@ 0x61
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d17d      	bne.n	8003d38 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	@ 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3360      	adds	r3, #96	@ 0x60
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	212c      	movs	r1, #44	@ 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	333f      	adds	r3, #63	@ 0x3f
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d00a      	beq.n	8003c78 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	212c      	movs	r1, #44	@ 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	333f      	adds	r3, #63	@ 0x3f
 8003c70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	f040 8100 	bne.w	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d113      	bne.n	8003ca8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	212c      	movs	r1, #44	@ 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3355      	adds	r3, #85	@ 0x55
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f083 0301 	eor.w	r3, r3, #1
 8003c94:	b2d8      	uxtb	r0, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	212c      	movs	r1, #44	@ 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3355      	adds	r3, #85	@ 0x55
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	f040 80e3 	bne.w	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	212c      	movs	r1, #44	@ 0x2c
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	334c      	adds	r3, #76	@ 0x4c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80d8 	beq.w	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	212c      	movs	r1, #44	@ 0x2c
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	334c      	adds	r3, #76	@ 0x4c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	202c      	movs	r0, #44	@ 0x2c
 8003cde:	fb00 f202 	mul.w	r2, r0, r2
 8003ce2:	440a      	add	r2, r1
 8003ce4:	3240      	adds	r2, #64	@ 0x40
 8003ce6:	8812      	ldrh	r2, [r2, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	202c      	movs	r0, #44	@ 0x2c
 8003cf2:	fb00 f202 	mul.w	r2, r0, r2
 8003cf6:	440a      	add	r2, r1
 8003cf8:	3240      	adds	r2, #64	@ 0x40
 8003cfa:	8812      	ldrh	r2, [r2, #0]
 8003cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80b5 	beq.w	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	212c      	movs	r1, #44	@ 0x2c
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	3355      	adds	r3, #85	@ 0x55
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	f083 0301 	eor.w	r3, r3, #1
 8003d22:	b2d8      	uxtb	r0, r3
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	212c      	movs	r1, #44	@ 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3355      	adds	r3, #85	@ 0x55
 8003d32:	4602      	mov	r2, r0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e09f      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	212c      	movs	r1, #44	@ 0x2c
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	3361      	adds	r3, #97	@ 0x61
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d109      	bne.n	8003d60 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	212c      	movs	r1, #44	@ 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3360      	adds	r3, #96	@ 0x60
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e08b      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	212c      	movs	r1, #44	@ 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3361      	adds	r3, #97	@ 0x61
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d109      	bne.n	8003d88 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	212c      	movs	r1, #44	@ 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3360      	adds	r3, #96	@ 0x60
 8003d82:	2202      	movs	r2, #2
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e077      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	212c      	movs	r1, #44	@ 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3361      	adds	r3, #97	@ 0x61
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d109      	bne.n	8003db0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	212c      	movs	r1, #44	@ 0x2c
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	3360      	adds	r3, #96	@ 0x60
 8003daa:	2205      	movs	r2, #5
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	e063      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	212c      	movs	r1, #44	@ 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3361      	adds	r3, #97	@ 0x61
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d009      	beq.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	212c      	movs	r1, #44	@ 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3361      	adds	r3, #97	@ 0x61
 8003dd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d14f      	bne.n	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	212c      	movs	r1, #44	@ 0x2c
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	335c      	adds	r3, #92	@ 0x5c
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	202c      	movs	r0, #44	@ 0x2c
 8003df0:	fb00 f303 	mul.w	r3, r0, r3
 8003df4:	440b      	add	r3, r1
 8003df6:	335c      	adds	r3, #92	@ 0x5c
 8003df8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	212c      	movs	r1, #44	@ 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	335c      	adds	r3, #92	@ 0x5c
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d912      	bls.n	8003e34 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	@ 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	335c      	adds	r3, #92	@ 0x5c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	212c      	movs	r1, #44	@ 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3360      	adds	r3, #96	@ 0x60
 8003e2e:	2204      	movs	r2, #4
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e021      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	212c      	movs	r1, #44	@ 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3360      	adds	r3, #96	@ 0x60
 8003e42:	2202      	movs	r2, #2
 8003e44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e5c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e64:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e72:	461a      	mov	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2302      	movs	r3, #2
 8003e88:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	b2d9      	uxtb	r1, r3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	202c      	movs	r0, #44	@ 0x2c
 8003e94:	fb00 f303 	mul.w	r3, r0, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3360      	adds	r3, #96	@ 0x60
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f004 fe27 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ea6:	bf00      	nop
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08a      	sub	sp, #40	@ 0x28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	0c5b      	lsrs	r3, r3, #17
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d004      	beq.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x46>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	f000 80a9 	beq.w	8004044 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ef2:	e0aa      	b.n	800404a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80a6 	beq.w	8004048 <HCD_RXQLVL_IRQHandler+0x19a>
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	212c      	movs	r1, #44	@ 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3344      	adds	r3, #68	@ 0x44
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 809b 	beq.w	8004048 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	212c      	movs	r1, #44	@ 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3350      	adds	r3, #80	@ 0x50
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	441a      	add	r2, r3
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	202c      	movs	r0, #44	@ 0x2c
 8003f2c:	fb00 f303 	mul.w	r3, r0, r3
 8003f30:	440b      	add	r3, r1
 8003f32:	334c      	adds	r3, #76	@ 0x4c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d87a      	bhi.n	8004030 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	212c      	movs	r1, #44	@ 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	3344      	adds	r3, #68	@ 0x44
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	b292      	uxth	r2, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	f001 fe92 	bl	8005c7c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	212c      	movs	r1, #44	@ 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	202c      	movs	r0, #44	@ 0x2c
 8003f72:	fb00 f303 	mul.w	r3, r0, r3
 8003f76:	440b      	add	r3, r1
 8003f78:	3344      	adds	r3, #68	@ 0x44
 8003f7a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	212c      	movs	r1, #44	@ 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3350      	adds	r3, #80	@ 0x50
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	441a      	add	r2, r3
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	202c      	movs	r0, #44	@ 0x2c
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3350      	adds	r3, #80	@ 0x50
 8003f9e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	0cdb      	lsrs	r3, r3, #19
 8003fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	212c      	movs	r1, #44	@ 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3340      	adds	r3, #64	@ 0x40
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d13c      	bne.n	8004048 <HCD_RXQLVL_IRQHandler+0x19a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d039      	beq.n	8004048 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ff2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	212c      	movs	r1, #44	@ 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3354      	adds	r3, #84	@ 0x54
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2d8      	uxtb	r0, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	212c      	movs	r1, #44	@ 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	3354      	adds	r3, #84	@ 0x54
 800402a:	4602      	mov	r2, r0
 800402c:	701a      	strb	r2, [r3, #0]
      break;
 800402e:	e00b      	b.n	8004048 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	212c      	movs	r1, #44	@ 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	3360      	adds	r3, #96	@ 0x60
 800403e:	2204      	movs	r2, #4
 8004040:	701a      	strb	r2, [r3, #0]
      break;
 8004042:	e001      	b.n	8004048 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004044:	bf00      	nop
 8004046:	e000      	b.n	800404a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004048:	bf00      	nop
  }
}
 800404a:	bf00      	nop
 800404c:	3728      	adds	r7, #40	@ 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800407e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d10b      	bne.n	80040a2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f004 fd11 	bl	8008abc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d132      	bne.n	8004112 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f043 0308 	orr.w	r3, r3, #8
 80040b2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d126      	bne.n	800410c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d113      	bne.n	80040ee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80040cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040d0:	d106      	bne.n	80040e0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 ff3d 	bl	8005f58 <USB_InitFSLSPClkSel>
 80040de:	e011      	b.n	8004104 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 ff36 	bl	8005f58 <USB_InitFSLSPClkSel>
 80040ec:	e00a      	b.n	8004104 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d106      	bne.n	8004104 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040fc:	461a      	mov	r2, r3
 80040fe:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004102:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f004 fd03 	bl	8008b10 <HAL_HCD_PortEnabled_Callback>
 800410a:	e002      	b.n	8004112 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f004 fd0d 	bl	8008b2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b20      	cmp	r3, #32
 800411a:	d103      	bne.n	8004124 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f043 0320 	orr.w	r3, r3, #32
 8004122:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e12b      	b.n	80043a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fdc0 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	@ 0x24
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800418a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800419a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800419c:	f001 fa20 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4a81      	ldr	r2, [pc, #516]	@ (80043ac <HAL_I2C_Init+0x274>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d807      	bhi.n	80041bc <HAL_I2C_Init+0x84>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a80      	ldr	r2, [pc, #512]	@ (80043b0 <HAL_I2C_Init+0x278>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bf94      	ite	ls
 80041b4:	2301      	movls	r3, #1
 80041b6:	2300      	movhi	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e006      	b.n	80041ca <HAL_I2C_Init+0x92>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a7d      	ldr	r2, [pc, #500]	@ (80043b4 <HAL_I2C_Init+0x27c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bf94      	ite	ls
 80041c4:	2301      	movls	r3, #1
 80041c6:	2300      	movhi	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0e7      	b.n	80043a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a78      	ldr	r2, [pc, #480]	@ (80043b8 <HAL_I2C_Init+0x280>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9b      	lsrs	r3, r3, #18
 80041dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a6a      	ldr	r2, [pc, #424]	@ (80043ac <HAL_I2C_Init+0x274>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d802      	bhi.n	800420c <HAL_I2C_Init+0xd4>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	e009      	b.n	8004220 <HAL_I2C_Init+0xe8>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	4a69      	ldr	r2, [pc, #420]	@ (80043bc <HAL_I2C_Init+0x284>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	3301      	adds	r3, #1
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004232:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	495c      	ldr	r1, [pc, #368]	@ (80043ac <HAL_I2C_Init+0x274>)
 800423c:	428b      	cmp	r3, r1
 800423e:	d819      	bhi.n	8004274 <HAL_I2C_Init+0x13c>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e59      	subs	r1, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fbb1 f3f3 	udiv	r3, r1, r3
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004254:	400b      	ands	r3, r1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_I2C_Init+0x138>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1e59      	subs	r1, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fbb1 f3f3 	udiv	r3, r1, r3
 8004268:	3301      	adds	r3, #1
 800426a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426e:	e051      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 8004270:	2304      	movs	r3, #4
 8004272:	e04f      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d111      	bne.n	80042a0 <HAL_I2C_Init+0x168>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1e58      	subs	r0, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	440b      	add	r3, r1
 800428a:	fbb0 f3f3 	udiv	r3, r0, r3
 800428e:	3301      	adds	r3, #1
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e012      	b.n	80042c6 <HAL_I2C_Init+0x18e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e58      	subs	r0, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	0099      	lsls	r1, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Init+0x196>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e022      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <HAL_I2C_Init+0x1bc>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1e58      	subs	r0, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	440b      	add	r3, r1
 80042e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042f2:	e00f      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	6809      	ldr	r1, [r1, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004342:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6911      	ldr	r1, [r2, #16]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	000186a0 	.word	0x000186a0
 80043b0:	001e847f 	.word	0x001e847f
 80043b4:	003d08ff 	.word	0x003d08ff
 80043b8:	431bde83 	.word	0x431bde83
 80043bc:	10624dd3 	.word	0x10624dd3

080043c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e128      	b.n	8004624 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a90      	ldr	r2, [pc, #576]	@ (800462c <HAL_I2S_Init+0x26c>)
 80043ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fc fcc1 	bl	8000d74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004408:	f023 030f 	bic.w	r3, r3, #15
 800440c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2202      	movs	r2, #2
 8004414:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d060      	beq.n	80044e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004426:	2310      	movs	r3, #16
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e001      	b.n	8004430 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800442c:	2320      	movs	r3, #32
 800442e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b20      	cmp	r3, #32
 8004436:	d802      	bhi.n	800443e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800443e:	2001      	movs	r0, #1
 8004440:	f001 f9c4 	bl	80057cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004444:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444e:	d125      	bne.n	800449c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d010      	beq.n	800447a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	3305      	adds	r3, #5
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	e01f      	b.n	80044ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	3305      	adds	r3, #5
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e00e      	b.n	80044ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	3305      	adds	r3, #5
 80044b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004630 <HAL_I2S_Init+0x270>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	08db      	lsrs	r3, r3, #3
 80044c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e003      	b.n	80044e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044e0:	2302      	movs	r3, #2
 80044e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d902      	bls.n	80044f4 <HAL_I2S_Init+0x134>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2bff      	cmp	r3, #255	@ 0xff
 80044f2:	d907      	bls.n	8004504 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	f043 0210 	orr.w	r2, r3, #16
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e08f      	b.n	8004624 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	ea42 0103 	orr.w	r1, r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	430a      	orrs	r2, r1
 8004516:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004522:	f023 030f 	bic.w	r3, r3, #15
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6851      	ldr	r1, [r2, #4]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6892      	ldr	r2, [r2, #8]
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68d2      	ldr	r2, [r2, #12]
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6992      	ldr	r2, [r2, #24]
 800453a:	430a      	orrs	r2, r1
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004546:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d161      	bne.n	8004614 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a38      	ldr	r2, [pc, #224]	@ (8004634 <HAL_I2S_Init+0x274>)
 8004554:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a37      	ldr	r2, [pc, #220]	@ (8004638 <HAL_I2S_Init+0x278>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <HAL_I2S_Init+0x1a4>
 8004560:	4b36      	ldr	r3, [pc, #216]	@ (800463c <HAL_I2S_Init+0x27c>)
 8004562:	e001      	b.n	8004568 <HAL_I2S_Init+0x1a8>
 8004564:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	4932      	ldr	r1, [pc, #200]	@ (8004638 <HAL_I2S_Init+0x278>)
 8004570:	428a      	cmp	r2, r1
 8004572:	d101      	bne.n	8004578 <HAL_I2S_Init+0x1b8>
 8004574:	4a31      	ldr	r2, [pc, #196]	@ (800463c <HAL_I2S_Init+0x27c>)
 8004576:	e001      	b.n	800457c <HAL_I2S_Init+0x1bc>
 8004578:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800457c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004580:	f023 030f 	bic.w	r3, r3, #15
 8004584:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <HAL_I2S_Init+0x278>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_I2S_Init+0x1d4>
 8004590:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <HAL_I2S_Init+0x27c>)
 8004592:	e001      	b.n	8004598 <HAL_I2S_Init+0x1d8>
 8004594:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004598:	2202      	movs	r2, #2
 800459a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a25      	ldr	r2, [pc, #148]	@ (8004638 <HAL_I2S_Init+0x278>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <HAL_I2S_Init+0x1ea>
 80045a6:	4b25      	ldr	r3, [pc, #148]	@ (800463c <HAL_I2S_Init+0x27c>)
 80045a8:	e001      	b.n	80045ae <HAL_I2S_Init+0x1ee>
 80045aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ba:	d003      	beq.n	80045c4 <HAL_I2S_Init+0x204>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d103      	bne.n	80045cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80045c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	e001      	b.n	80045d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045da:	4313      	orrs	r3, r2
 80045dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045ee:	4313      	orrs	r3, r2
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80045fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a0d      	ldr	r2, [pc, #52]	@ (8004638 <HAL_I2S_Init+0x278>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_I2S_Init+0x24c>
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <HAL_I2S_Init+0x27c>)
 800460a:	e001      	b.n	8004610 <HAL_I2S_Init+0x250>
 800460c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004610:	897a      	ldrh	r2, [r7, #10]
 8004612:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	08004737 	.word	0x08004737
 8004630:	cccccccd 	.word	0xcccccccd
 8004634:	0800484d 	.word	0x0800484d
 8004638:	40003800 	.word	0x40003800
 800463c:	40003400 	.word	0x40003400

08004640 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	881a      	ldrh	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10e      	bne.n	80046d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ffb8 	bl	8004640 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	b292      	uxth	r2, r2
 80046ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10e      	bne.n	800472e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800471e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff93 	bl	8004654 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b04      	cmp	r3, #4
 8004750:	d13a      	bne.n	80047c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d109      	bne.n	8004770 <I2S_IRQHandler+0x3a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b40      	cmp	r3, #64	@ 0x40
 8004768:	d102      	bne.n	8004770 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ffb4 	bl	80046d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b40      	cmp	r3, #64	@ 0x40
 8004778:	d126      	bne.n	80047c8 <I2S_IRQHandler+0x92>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d11f      	bne.n	80047c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004796:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff ff50 	bl	8004668 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d136      	bne.n	8004842 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d109      	bne.n	80047f2 <I2S_IRQHandler+0xbc>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	2b80      	cmp	r3, #128	@ 0x80
 80047ea:	d102      	bne.n	80047f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff45 	bl	800467c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d122      	bne.n	8004842 <I2S_IRQHandler+0x10c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b20      	cmp	r3, #32
 8004808:	d11b      	bne.n	8004842 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004818:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	f043 0204 	orr.w	r2, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff13 	bl	8004668 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a92      	ldr	r2, [pc, #584]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004866:	4b92      	ldr	r3, [pc, #584]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004868:	e001      	b.n	800486e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800486a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a8b      	ldr	r2, [pc, #556]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004884:	4b8a      	ldr	r3, [pc, #552]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004886:	e001      	b.n	800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004888:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004898:	d004      	beq.n	80048a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 8099 	bne.w	80049d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d107      	bne.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f925 	bl	8004b08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9c8 	bl	8004c68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d13a      	bne.n	8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d035      	beq.n	8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6e      	ldr	r2, [pc, #440]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80048f6:	4b6e      	ldr	r3, [pc, #440]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048f8:	e001      	b.n	80048fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80048fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4969      	ldr	r1, [pc, #420]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004906:	428b      	cmp	r3, r1
 8004908:	d101      	bne.n	800490e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800490a:	4b69      	ldr	r3, [pc, #420]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800490c:	e001      	b.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800490e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004912:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004916:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004926:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f043 0202 	orr.w	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fe88 	bl	8004668 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	f040 80c3 	bne.w	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80bd 	beq.w	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800497e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a49      	ldr	r2, [pc, #292]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800498a:	4b49      	ldr	r3, [pc, #292]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800498c:	e001      	b.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800498e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4944      	ldr	r1, [pc, #272]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800499a:	428b      	cmp	r3, r1
 800499c:	d101      	bne.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800499e:	4b44      	ldr	r3, [pc, #272]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049a0:	e001      	b.n	80049a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c6:	f043 0204 	orr.w	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fe4a 	bl	8004668 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049d4:	e089      	b.n	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d107      	bne.n	80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8be 	bl	8004b6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8fd 	bl	8004c04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b40      	cmp	r3, #64	@ 0x40
 8004a12:	d12f      	bne.n	8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02a      	beq.n	8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a2c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a38:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a3a:	e001      	b.n	8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4919      	ldr	r1, [pc, #100]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a4c:	4b18      	ldr	r3, [pc, #96]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a4e:	e001      	b.n	8004a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	f043 0202 	orr.w	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fdfa 	bl	8004668 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d136      	bne.n	8004aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d031      	beq.n	8004aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a07      	ldr	r2, [pc, #28]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a94:	e001      	b.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4902      	ldr	r1, [pc, #8]	@ (8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aa2:	428b      	cmp	r3, r1
 8004aa4:	d106      	bne.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004aa6:	4b02      	ldr	r3, [pc, #8]	@ (8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa8:	e006      	b.n	8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004aaa:	bf00      	nop
 8004aac:	40003800 	.word	0x40003800
 8004ab0:	40003400 	.word	0x40003400
 8004ab4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ab8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004abc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004acc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f043 0204 	orr.w	r2, r3, #4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fdc0 	bl	8004668 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ae8:	e000      	b.n	8004aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aea:	bf00      	nop
}
 8004aec:	bf00      	nop
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c99      	adds	r1, r3, #2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b1a:	881a      	ldrh	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d113      	bne.n	8004b62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffc9 	bl	8004af4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	1c99      	adds	r1, r3, #2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b7e:	8819      	ldrh	r1, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	@ (8004bfc <I2SEx_TxISR_I2SExt+0x90>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <I2SEx_TxISR_I2SExt+0x22>
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <I2SEx_TxISR_I2SExt+0x94>)
 8004b8c:	e001      	b.n	8004b92 <I2SEx_TxISR_I2SExt+0x26>
 8004b8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b92:	460a      	mov	r2, r1
 8004b94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d121      	bne.n	8004bf2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a12      	ldr	r2, [pc, #72]	@ (8004bfc <I2SEx_TxISR_I2SExt+0x90>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <I2SEx_TxISR_I2SExt+0x50>
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <I2SEx_TxISR_I2SExt+0x94>)
 8004bba:	e001      	b.n	8004bc0 <I2SEx_TxISR_I2SExt+0x54>
 8004bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	490d      	ldr	r1, [pc, #52]	@ (8004bfc <I2SEx_TxISR_I2SExt+0x90>)
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	d101      	bne.n	8004bd0 <I2SEx_TxISR_I2SExt+0x64>
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c00 <I2SEx_TxISR_I2SExt+0x94>)
 8004bce:	e001      	b.n	8004bd4 <I2SEx_TxISR_I2SExt+0x68>
 8004bd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff81 	bl	8004af4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40003800 	.word	0x40003800
 8004c00:	40003400 	.word	0x40003400

08004c04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68d8      	ldr	r0, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	1c99      	adds	r1, r3, #2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c1c:	b282      	uxth	r2, r0
 8004c1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d113      	bne.n	8004c60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff4a 	bl	8004af4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a20      	ldr	r2, [pc, #128]	@ (8004cf8 <I2SEx_RxISR_I2SExt+0x90>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d101      	bne.n	8004c7e <I2SEx_RxISR_I2SExt+0x16>
 8004c7a:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <I2SEx_RxISR_I2SExt+0x94>)
 8004c7c:	e001      	b.n	8004c82 <I2SEx_RxISR_I2SExt+0x1a>
 8004c7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c82:	68d8      	ldr	r0, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	1c99      	adds	r1, r3, #2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c8e:	b282      	uxth	r2, r0
 8004c90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d121      	bne.n	8004cee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a12      	ldr	r2, [pc, #72]	@ (8004cf8 <I2SEx_RxISR_I2SExt+0x90>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <I2SEx_RxISR_I2SExt+0x50>
 8004cb4:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <I2SEx_RxISR_I2SExt+0x94>)
 8004cb6:	e001      	b.n	8004cbc <I2SEx_RxISR_I2SExt+0x54>
 8004cb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	490d      	ldr	r1, [pc, #52]	@ (8004cf8 <I2SEx_RxISR_I2SExt+0x90>)
 8004cc4:	428b      	cmp	r3, r1
 8004cc6:	d101      	bne.n	8004ccc <I2SEx_RxISR_I2SExt+0x64>
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <I2SEx_RxISR_I2SExt+0x94>)
 8004cca:	e001      	b.n	8004cd0 <I2SEx_RxISR_I2SExt+0x68>
 8004ccc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cd4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff03 	bl	8004af4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40003800 	.word	0x40003800
 8004cfc:	40003400 	.word	0x40003400

08004d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e267      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d075      	beq.n	8004e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d1e:	4b88      	ldr	r3, [pc, #544]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d00c      	beq.n	8004d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2a:	4b85      	ldr	r3, [pc, #532]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d112      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d36:	4b82      	ldr	r3, [pc, #520]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	4b7e      	ldr	r3, [pc, #504]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05b      	beq.n	8004e08 <HAL_RCC_OscConfig+0x108>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d157      	bne.n	8004e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e242      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x74>
 8004d66:	4b76      	ldr	r3, [pc, #472]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a75      	ldr	r2, [pc, #468]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e01d      	b.n	8004db0 <HAL_RCC_OscConfig+0xb0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x98>
 8004d7e:	4b70      	ldr	r3, [pc, #448]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6f      	ldr	r2, [pc, #444]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0xb0>
 8004d98:	4b69      	ldr	r3, [pc, #420]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a68      	ldr	r2, [pc, #416]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b66      	ldr	r3, [pc, #408]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a65      	ldr	r2, [pc, #404]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7fc f9c6 	bl	8001148 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc0:	f7fc f9c2 	bl	8001148 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	@ 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e207      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xc0>
 8004dde:	e014      	b.n	8004e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de0:	f7fc f9b2 	bl	8001148 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fc f9ae 	bl	8001148 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	@ 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e1f3      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfa:	4b51      	ldr	r3, [pc, #324]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0xe8>
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d063      	beq.n	8004ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e16:	4b4a      	ldr	r3, [pc, #296]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e22:	4b47      	ldr	r3, [pc, #284]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d11c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e2e:	4b44      	ldr	r3, [pc, #272]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d116      	bne.n	8004e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_RCC_OscConfig+0x152>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e1c7      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b3b      	ldr	r3, [pc, #236]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4937      	ldr	r1, [pc, #220]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	e03a      	b.n	8004ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e70:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCC_OscConfig+0x244>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fc f967 	bl	8001148 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fc f963 	bl	8001148 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1a8      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e90:	4b2b      	ldr	r3, [pc, #172]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b28      	ldr	r3, [pc, #160]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4925      	ldr	r1, [pc, #148]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <HAL_RCC_OscConfig+0x244>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fc f946 	bl	8001148 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec0:	f7fc f942 	bl	8001148 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e187      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d036      	beq.n	8004f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef2:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <HAL_RCC_OscConfig+0x248>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fc f926 	bl	8001148 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fc f922 	bl	8001148 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e167      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f12:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x200>
 8004f1e:	e01b      	b.n	8004f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f20:	4b09      	ldr	r3, [pc, #36]	@ (8004f48 <HAL_RCC_OscConfig+0x248>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f26:	f7fc f90f 	bl	8001148 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2c:	e00e      	b.n	8004f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f2e:	f7fc f90b 	bl	8001148 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d907      	bls.n	8004f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e150      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
 8004f40:	40023800 	.word	0x40023800
 8004f44:	42470000 	.word	0x42470000
 8004f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4c:	4b88      	ldr	r3, [pc, #544]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ea      	bne.n	8004f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8097 	beq.w	8005094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6a:	4b81      	ldr	r3, [pc, #516]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f86:	4b7a      	ldr	r3, [pc, #488]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f96:	4b77      	ldr	r3, [pc, #476]	@ (8005174 <HAL_RCC_OscConfig+0x474>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d118      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa2:	4b74      	ldr	r3, [pc, #464]	@ (8005174 <HAL_RCC_OscConfig+0x474>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a73      	ldr	r2, [pc, #460]	@ (8005174 <HAL_RCC_OscConfig+0x474>)
 8004fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fae:	f7fc f8cb 	bl	8001148 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb6:	f7fc f8c7 	bl	8001148 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e10c      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8005174 <HAL_RCC_OscConfig+0x474>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <HAL_RCC_OscConfig+0x2ea>
 8004fdc:	4b64      	ldr	r3, [pc, #400]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	4a63      	ldr	r2, [pc, #396]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe8:	e01c      	b.n	8005024 <HAL_RCC_OscConfig+0x324>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0x30c>
 8004ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	4a5b      	ldr	r2, [pc, #364]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6713      	str	r3, [r2, #112]	@ 0x70
 800500a:	e00b      	b.n	8005024 <HAL_RCC_OscConfig+0x324>
 800500c:	4b58      	ldr	r3, [pc, #352]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005010:	4a57      	ldr	r2, [pc, #348]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	6713      	str	r3, [r2, #112]	@ 0x70
 8005018:	4b55      	ldr	r3, [pc, #340]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a54      	ldr	r2, [pc, #336]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800501e:	f023 0304 	bic.w	r3, r3, #4
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d015      	beq.n	8005058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fc f88c 	bl	8001148 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005032:	e00a      	b.n	800504a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005034:	f7fc f888 	bl	8001148 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e0cb      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504a:	4b49      	ldr	r3, [pc, #292]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0ee      	beq.n	8005034 <HAL_RCC_OscConfig+0x334>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005058:	f7fc f876 	bl	8001148 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505e:	e00a      	b.n	8005076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fc f872 	bl	8001148 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0b5      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005076:	4b3e      	ldr	r3, [pc, #248]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ee      	bne.n	8005060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d105      	bne.n	8005094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005088:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	4a38      	ldr	r2, [pc, #224]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800508e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80a1 	beq.w	80051e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800509e:	4b34      	ldr	r3, [pc, #208]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d05c      	beq.n	8005164 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d141      	bne.n	8005136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b2:	4b31      	ldr	r3, [pc, #196]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fc f846 	bl	8001148 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fc f842 	bl	8001148 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e087      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	4b27      	ldr	r3, [pc, #156]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	3b01      	subs	r3, #1
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	491b      	ldr	r1, [pc, #108]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8005104:	4313      	orrs	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510e:	f7fc f81b 	bl	8001148 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005116:	f7fc f817 	bl	8001148 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e05c      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x416>
 8005134:	e054      	b.n	80051e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005136:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fc f804 	bl	8001148 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005144:	f7fc f800 	bl	8001148 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e045      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_RCC_OscConfig+0x470>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x444>
 8005162:	e03d      	b.n	80051e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e038      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
 8005170:	40023800 	.word	0x40023800
 8005174:	40007000 	.word	0x40007000
 8005178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800517c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <HAL_RCC_OscConfig+0x4ec>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d028      	beq.n	80051dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d121      	bne.n	80051dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d11a      	bne.n	80051dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051ac:	4013      	ands	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	3b01      	subs	r3, #1
 80051c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800

080051f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0cc      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005204:	4b68      	ldr	r3, [pc, #416]	@ (80053a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d90c      	bls.n	800522c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b65      	ldr	r3, [pc, #404]	@ (80053a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b63      	ldr	r3, [pc, #396]	@ (80053a8 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0b8      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005244:	4b59      	ldr	r3, [pc, #356]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a58      	ldr	r2, [pc, #352]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800524e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800525c:	4b53      	ldr	r3, [pc, #332]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4a52      	ldr	r2, [pc, #328]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005268:	4b50      	ldr	r3, [pc, #320]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	494d      	ldr	r1, [pc, #308]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d044      	beq.n	8005310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	4b47      	ldr	r3, [pc, #284]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d119      	bne.n	80052ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e07f      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d003      	beq.n	80052ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ae:	4b3f      	ldr	r3, [pc, #252]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e06f      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052be:	4b3b      	ldr	r3, [pc, #236]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e067      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ce:	4b37      	ldr	r3, [pc, #220]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f023 0203 	bic.w	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4934      	ldr	r1, [pc, #208]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e0:	f7fb ff32 	bl	8001148 <HAL_GetTick>
 80052e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e8:	f7fb ff2e 	bl	8001148 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e04f      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fe:	4b2b      	ldr	r3, [pc, #172]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 020c 	and.w	r2, r3, #12
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	429a      	cmp	r2, r3
 800530e:	d1eb      	bne.n	80052e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005310:	4b25      	ldr	r3, [pc, #148]	@ (80053a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d20c      	bcs.n	8005338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b22      	ldr	r3, [pc, #136]	@ (80053a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b20      	ldr	r3, [pc, #128]	@ (80053a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e032      	b.n	800539e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005344:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4916      	ldr	r1, [pc, #88]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	490e      	ldr	r1, [pc, #56]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005376:	f000 f821 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 800537a:	4602      	mov	r2, r0
 800537c:	4b0b      	ldr	r3, [pc, #44]	@ (80053ac <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	490a      	ldr	r1, [pc, #40]	@ (80053b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005388:	5ccb      	ldrb	r3, [r1, r3]
 800538a:	fa22 f303 	lsr.w	r3, r2, r3
 800538e:	4a09      	ldr	r2, [pc, #36]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005392:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb fe92 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40023c00 	.word	0x40023c00
 80053ac:	40023800 	.word	0x40023800
 80053b0:	080091e4 	.word	0x080091e4
 80053b4:	20000000 	.word	0x20000000
 80053b8:	20000004 	.word	0x20000004

080053bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c0:	b094      	sub	sp, #80	@ 0x50
 80053c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c8:	2300      	movs	r3, #0
 80053ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053cc:	2300      	movs	r3, #0
 80053ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d4:	4b79      	ldr	r3, [pc, #484]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d00d      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x40>
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	f200 80e1 	bhi.w	80055a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ee:	e0db      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b73      	ldr	r3, [pc, #460]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80053f4:	e0db      	b.n	80055ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053f6:	4b73      	ldr	r3, [pc, #460]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80053f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053fa:	e0d8      	b.n	80055ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053fc:	4b6f      	ldr	r3, [pc, #444]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005404:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005406:	4b6d      	ldr	r3, [pc, #436]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d063      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005412:	4b6a      	ldr	r3, [pc, #424]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	2200      	movs	r2, #0
 800541a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800541c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005424:	633b      	str	r3, [r7, #48]	@ 0x30
 8005426:	2300      	movs	r3, #0
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
 800542a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800542e:	4622      	mov	r2, r4
 8005430:	462b      	mov	r3, r5
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	0159      	lsls	r1, r3, #5
 800543c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005440:	0150      	lsls	r0, r2, #5
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4621      	mov	r1, r4
 8005448:	1a51      	subs	r1, r2, r1
 800544a:	6139      	str	r1, [r7, #16]
 800544c:	4629      	mov	r1, r5
 800544e:	eb63 0301 	sbc.w	r3, r3, r1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005460:	4659      	mov	r1, fp
 8005462:	018b      	lsls	r3, r1, #6
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800546a:	4651      	mov	r1, sl
 800546c:	018a      	lsls	r2, r1, #6
 800546e:	4651      	mov	r1, sl
 8005470:	ebb2 0801 	subs.w	r8, r2, r1
 8005474:	4659      	mov	r1, fp
 8005476:	eb63 0901 	sbc.w	r9, r3, r1
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548e:	4690      	mov	r8, r2
 8005490:	4699      	mov	r9, r3
 8005492:	4623      	mov	r3, r4
 8005494:	eb18 0303 	adds.w	r3, r8, r3
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	462b      	mov	r3, r5
 800549c:	eb49 0303 	adc.w	r3, r9, r3
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ae:	4629      	mov	r1, r5
 80054b0:	024b      	lsls	r3, r1, #9
 80054b2:	4621      	mov	r1, r4
 80054b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054b8:	4621      	mov	r1, r4
 80054ba:	024a      	lsls	r2, r1, #9
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c2:	2200      	movs	r2, #0
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054cc:	f7fa fe7c 	bl	80001c8 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4613      	mov	r3, r2
 80054d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054d8:	e058      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b38      	ldr	r3, [pc, #224]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	2200      	movs	r2, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	4611      	mov	r1, r2
 80054e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	2300      	movs	r3, #0
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	f04f 0000 	mov.w	r0, #0
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005506:	0150      	lsls	r0, r2, #5
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4641      	mov	r1, r8
 800550e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005512:	4649      	mov	r1, r9
 8005514:	eb63 0b01 	sbc.w	fp, r3, r1
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800552c:	ebb2 040a 	subs.w	r4, r2, sl
 8005530:	eb63 050b 	sbc.w	r5, r3, fp
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	00eb      	lsls	r3, r5, #3
 800553e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005542:	00e2      	lsls	r2, r4, #3
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
 8005548:	4643      	mov	r3, r8
 800554a:	18e3      	adds	r3, r4, r3
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	464b      	mov	r3, r9
 8005550:	eb45 0303 	adc.w	r3, r5, r3
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005562:	4629      	mov	r1, r5
 8005564:	028b      	lsls	r3, r1, #10
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800556c:	4621      	mov	r1, r4
 800556e:	028a      	lsls	r2, r1, #10
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005576:	2200      	movs	r2, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	61fa      	str	r2, [r7, #28]
 800557c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005580:	f7fa fe22 	bl	80001c8 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4613      	mov	r3, r2
 800558a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	3301      	adds	r3, #1
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800559c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800559e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055a6:	e002      	b.n	80055ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a8:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3750      	adds	r7, #80	@ 0x50
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	00f42400 	.word	0x00f42400
 80055c4:	007a1200 	.word	0x007a1200

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055cc:	4b03      	ldr	r3, [pc, #12]	@ (80055dc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000000 	.word	0x20000000

080055e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055e4:	f7ff fff0 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0a9b      	lsrs	r3, r3, #10
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	@ (8005604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	080091f4 	.word	0x080091f4

08005608 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800562c:	2b00      	cmp	r3, #0
 800562e:	d035      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005630:	4b62      	ldr	r3, [pc, #392]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005636:	f7fb fd87 	bl	8001148 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800563e:	f7fb fd83 	bl	8001148 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e0b0      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005650:	4b5b      	ldr	r3, [pc, #364]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	019a      	lsls	r2, r3, #6
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	071b      	lsls	r3, r3, #28
 8005668:	4955      	ldr	r1, [pc, #340]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005670:	4b52      	ldr	r3, [pc, #328]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005672:	2201      	movs	r2, #1
 8005674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005676:	f7fb fd67 	bl	8001148 <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800567c:	e008      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800567e:	f7fb fd63 	bl	8001148 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e090      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005690:	4b4b      	ldr	r3, [pc, #300]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8083 	beq.w	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	4b44      	ldr	r3, [pc, #272]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	4a43      	ldr	r2, [pc, #268]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ba:	4b41      	ldr	r3, [pc, #260]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056c6:	4b3f      	ldr	r3, [pc, #252]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3e      	ldr	r2, [pc, #248]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056d2:	f7fb fd39 	bl	8001148 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056da:	f7fb fd35 	bl	8001148 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e062      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056ec:	4b35      	ldr	r3, [pc, #212]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f8:	4b31      	ldr	r3, [pc, #196]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005700:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02f      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d028      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005716:	4b2a      	ldr	r3, [pc, #168]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005720:	4b29      	ldr	r3, [pc, #164]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005726:	4b28      	ldr	r3, [pc, #160]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800572c:	4a24      	ldr	r2, [pc, #144]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005732:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d114      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800573e:	f7fb fd03 	bl	8001148 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	e00a      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fb fcff 	bl	8001148 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e02a      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575c:	4b18      	ldr	r3, [pc, #96]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ee      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005774:	d10d      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005776:	4b12      	ldr	r3, [pc, #72]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578a:	490d      	ldr	r1, [pc, #52]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]
 8005790:	e005      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005792:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4a0a      	ldr	r2, [pc, #40]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005798:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800579c:	6093      	str	r3, [r2, #8]
 800579e:	4b08      	ldr	r3, [pc, #32]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057aa:	4905      	ldr	r1, [pc, #20]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	42470068 	.word	0x42470068
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000
 80057c8:	42470e40 	.word	0x42470e40

080057cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d13e      	bne.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80057ea:	4b23      	ldr	r3, [pc, #140]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d12f      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005800:	4b1e      	ldr	r3, [pc, #120]	@ (800587c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005802:	617b      	str	r3, [r7, #20]
          break;
 8005804:	e02f      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005806:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005812:	d108      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005814:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800581c:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e007      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005826:	4b14      	ldr	r3, [pc, #80]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800582e:	4a15      	ldr	r2, [pc, #84]	@ (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005836:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	099b      	lsrs	r3, r3, #6
 800583e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800584a:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005850:	0f1b      	lsrs	r3, r3, #28
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
          break;
 800585e:	e002      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
          break;
 8005864:	bf00      	nop
        }
      }
      break;
 8005866:	bf00      	nop
    }
  }
  return frequency;
 8005868:	697b      	ldr	r3, [r7, #20]
}
 800586a:	4618      	mov	r0, r3
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	00bb8000 	.word	0x00bb8000
 8005880:	007a1200 	.word	0x007a1200
 8005884:	00f42400 	.word	0x00f42400

08005888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e07b      	b.n	8005992 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d108      	bne.n	80058b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058aa:	d009      	beq.n	80058c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	61da      	str	r2, [r3, #28]
 80058b2:	e005      	b.n	80058c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fb faca 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005944:	ea42 0103 	orr.w	r1, r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	f003 0104 	and.w	r1, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	f003 0210 	and.w	r2, r3, #16
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800599a:	b084      	sub	sp, #16
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	f107 001c 	add.w	r0, r7, #28
 80059a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d122      	bne.n	80059f8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9bf 	bl	8005d70 <USB_CoreReset>
 80059f2:	4603      	mov	r3, r0
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	e01a      	b.n	8005a2e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f9b3 	bl	8005d70 <USB_CoreReset>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a20:	e005      	b.n	8005a2e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10b      	bne.n	8005a4c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f043 0206 	orr.w	r2, r3, #6
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a58:	b004      	add	sp, #16
 8005a5a:	4770      	bx	lr

08005a5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d115      	bne.n	8005aee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f7fb fb46 	bl	8001160 <HAL_Delay>
      ms++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f939 	bl	8005d52 <USB_GetMode>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d01e      	beq.n	8005b24 <USB_SetCurrentMode+0x84>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b31      	cmp	r3, #49	@ 0x31
 8005aea:	d9f0      	bls.n	8005ace <USB_SetCurrentMode+0x2e>
 8005aec:	e01a      	b.n	8005b24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d115      	bne.n	8005b20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7fb fb2d 	bl	8001160 <HAL_Delay>
      ms++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f920 	bl	8005d52 <USB_GetMode>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <USB_SetCurrentMode+0x84>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b31      	cmp	r3, #49	@ 0x31
 8005b1c:	d9f0      	bls.n	8005b00 <USB_SetCurrentMode+0x60>
 8005b1e:	e001      	b.n	8005b24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e005      	b.n	8005b30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b32      	cmp	r3, #50	@ 0x32
 8005b28:	d101      	bne.n	8005b2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <USB_FlushTxFifo+0x64>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e01b      	b.n	8005b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	daf2      	bge.n	8005b46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	019b      	lsls	r3, r3, #6
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a08      	ldr	r2, [pc, #32]	@ (8005b9c <USB_FlushTxFifo+0x64>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e006      	b.n	8005b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d0f0      	beq.n	8005b70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	00030d40 	.word	0x00030d40

08005ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	@ (8005bfc <USB_FlushRxFifo+0x5c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e018      	b.n	8005bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	daf2      	bge.n	8005bac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <USB_FlushRxFifo+0x5c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e006      	b.n	8005bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d0f0      	beq.n	8005bd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	00030d40 	.word	0x00030d40

08005c00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b089      	sub	sp, #36	@ 0x24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	460b      	mov	r3, r1
 8005c10:	71fb      	strb	r3, [r7, #7]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d123      	bne.n	8005c6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c26:	88bb      	ldrh	r3, [r7, #4]
 8005c28:	3303      	adds	r3, #3
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e018      	b.n	8005c66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	031a      	lsls	r2, r3, #12
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	3301      	adds	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3e2      	bcc.n	8005c34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3724      	adds	r7, #36	@ 0x24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b08b      	sub	sp, #44	@ 0x2c
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	e014      	b.n	8005cd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	623b      	str	r3, [r7, #32]
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3e6      	bcc.n	8005ca8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cda:	8bfb      	ldrh	r3, [r7, #30]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01e      	beq.n	8005d1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cea:	461a      	mov	r2, r3
 8005cec:	f107 0310 	add.w	r3, r7, #16
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	701a      	strb	r2, [r3, #0]
      i++;
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	3301      	adds	r3, #1
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d12:	8bfb      	ldrh	r3, [r7, #30]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d18:	8bfb      	ldrh	r3, [r7, #30]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ea      	bne.n	8005cf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	372c      	adds	r7, #44	@ 0x2c
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4a13      	ldr	r2, [pc, #76]	@ (8005dd4 <USB_CoreReset+0x64>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e01b      	b.n	8005dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	daf2      	bge.n	8005d7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a09      	ldr	r2, [pc, #36]	@ (8005dd4 <USB_CoreReset+0x64>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e006      	b.n	8005dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d0f0      	beq.n	8005da6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	00030d40 	.word	0x00030d40

08005dd8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd8:	b084      	sub	sp, #16
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b086      	sub	sp, #24
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10a      	bne.n	8005e4a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e014      	b.n	8005e74 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e009      	b.n	8005e74 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e74:	2110      	movs	r1, #16
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe5e 	bl	8005b38 <USB_FlushTxFifo>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fe8a 	bl	8005ba0 <USB_FlushRxFifo>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	e015      	b.n	8005ec8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d3e5      	bcc.n	8005e9c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005edc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a13      	ldr	r2, [pc, #76]	@ (8005f44 <USB_HostInit+0x16c>)
 8005ef6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a13      	ldr	r2, [pc, #76]	@ (8005f48 <USB_HostInit+0x170>)
 8005efc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005f00:	e009      	b.n	8005f16 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2280      	movs	r2, #128	@ 0x80
 8005f06:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a10      	ldr	r2, [pc, #64]	@ (8005f4c <USB_HostInit+0x174>)
 8005f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a0f      	ldr	r2, [pc, #60]	@ (8005f50 <USB_HostInit+0x178>)
 8005f12:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f043 0210 	orr.w	r2, r3, #16
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <USB_HostInit+0x17c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f40:	b004      	add	sp, #16
 8005f42:	4770      	bx	lr
 8005f44:	01000200 	.word	0x01000200
 8005f48:	00e00300 	.word	0x00e00300
 8005f4c:	00600080 	.word	0x00600080
 8005f50:	004000e0 	.word	0x004000e0
 8005f54:	a3200008 	.word	0xa3200008

08005f58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f90:	4313      	orrs	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005fa6:	6053      	str	r3, [r2, #4]
 8005fa8:	e009      	b.n	8005fbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d106      	bne.n	8005fbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005fbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ffa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ffc:	2064      	movs	r0, #100	@ 0x64
 8005ffe:	f7fb f8af 	bl	8001160 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800600a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800600e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006010:	200a      	movs	r0, #10
 8006012:	f7fb f8a5 	bl	8001160 <HAL_Delay>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006044:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <USB_DriveVbus+0x44>
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d106      	bne.n	8006064 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800605e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006062:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606e:	d109      	bne.n	8006084 <USB_DriveVbus+0x64>
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800607e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006082:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	0c5b      	lsrs	r3, r3, #17
 80060b0:	f003 0303 	and.w	r3, r3, #3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	b29b      	uxth	r3, r3
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	70fb      	strb	r3, [r7, #3]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70bb      	strb	r3, [r7, #2]
 80060fa:	4613      	mov	r3, r2
 80060fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	461a      	mov	r2, r3
 8006114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006118:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800611a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800611e:	2b03      	cmp	r3, #3
 8006120:	d87e      	bhi.n	8006220 <USB_HC_Init+0x13c>
 8006122:	a201      	add	r2, pc, #4	@ (adr r2, 8006128 <USB_HC_Init+0x44>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	08006139 	.word	0x08006139
 800612c:	080061e3 	.word	0x080061e3
 8006130:	08006139 	.word	0x08006139
 8006134:	080061a5 	.word	0x080061a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006144:	461a      	mov	r2, r3
 8006146:	f240 439d 	movw	r3, #1181	@ 0x49d
 800614a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800614c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da10      	bge.n	8006176 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	440a      	add	r2, r1
 800616a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800616e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006172:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006174:	e057      	b.n	8006226 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d051      	beq.n	8006226 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	440a      	add	r2, r1
 8006198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800619c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061a0:	60d3      	str	r3, [r2, #12]
      break;
 80061a2:	e040      	b.n	8006226 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b0:	461a      	mov	r2, r3
 80061b2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80061b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da34      	bge.n	800622a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061e0:	e023      	b.n	800622a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	f240 2325 	movw	r3, #549	@ 0x225
 80061f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da17      	bge.n	800622e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	440a      	add	r2, r1
 8006214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006218:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800621c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800621e:	e006      	b.n	800622e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
      break;
 8006224:	e004      	b.n	8006230 <USB_HC_Init+0x14c>
      break;
 8006226:	bf00      	nop
 8006228:	e002      	b.n	8006230 <USB_HC_Init+0x14c>
      break;
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <USB_HC_Init+0x14c>
      break;
 800622e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800624a:	f043 0302 	orr.w	r3, r3, #2
 800624e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	2101      	movs	r1, #1
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800626a:	4313      	orrs	r3, r2
 800626c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800627a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da03      	bge.n	800628a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	e001      	b.n	800628e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff feff 	bl	8006092 <USB_GetHostSpeed>
 8006294:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800629a:	2b02      	cmp	r3, #2
 800629c:	d106      	bne.n	80062ac <USB_HC_Init+0x1c8>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d003      	beq.n	80062ac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e001      	b.n	80062b0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062b0:	787b      	ldrb	r3, [r7, #1]
 80062b2:	059b      	lsls	r3, r3, #22
 80062b4:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	02db      	lsls	r3, r3, #11
 80062bc:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062c6:	049b      	lsls	r3, r3, #18
 80062c8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80062d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	0159      	lsls	r1, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	440b      	add	r3, r1
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d003      	beq.n	80062fe <USB_HC_Init+0x21a>
 80062f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10f      	bne.n	800631e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4413      	add	r3, r2
 8006306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	440a      	add	r2, r1
 8006314:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006318:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800631c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800631e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08c      	sub	sp, #48	@ 0x30
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006344:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02d      	beq.n	80063ae <USB_HC_StartXfer+0x86>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	791b      	ldrb	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d129      	bne.n	80063ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d117      	bne.n	8006390 <USB_HC_StartXfer+0x68>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	79db      	ldrb	r3, [r3, #7]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <USB_HC_StartXfer+0x48>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	79db      	ldrb	r3, [r3, #7]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d10f      	bne.n	8006390 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	440a      	add	r2, r1
 8006386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <USB_HC_StartXfer+0x86>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	795b      	ldrb	r3, [r3, #5]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fa0f 	bl	80067c8 <USB_DoPing>
      return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e0f8      	b.n	80065a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	8912      	ldrh	r2, [r2, #8]
 80063be:	4413      	add	r3, r2
 80063c0:	3b01      	subs	r3, #1
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	8912      	ldrh	r2, [r2, #8]
 80063c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ca:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 80063cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80063ce:	8b7b      	ldrh	r3, [r7, #26]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d90b      	bls.n	80063ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80063d4:	8b7b      	ldrh	r3, [r7, #26]
 80063d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	8912      	ldrh	r2, [r2, #8]
 80063de:	fb03 f202 	mul.w	r2, r3, r2
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	611a      	str	r2, [r3, #16]
 80063e6:	e001      	b.n	80063ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063e8:	2301      	movs	r3, #1
 80063ea:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	78db      	ldrb	r3, [r3, #3]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	8912      	ldrh	r2, [r2, #8]
 80063fa:	fb03 f202 	mul.w	r2, r3, r2
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	611a      	str	r2, [r3, #16]
 8006402:	e003      	b.n	800640c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006414:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006416:	04d9      	lsls	r1, r3, #19
 8006418:	4b63      	ldr	r3, [pc, #396]	@ (80065a8 <USB_HC_StartXfer+0x280>)
 800641a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800641c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	7a9b      	ldrb	r3, [r3, #10]
 8006422:	075b      	lsls	r3, r3, #29
 8006424:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	0148      	lsls	r0, r1, #5
 800642c:	6a39      	ldr	r1, [r7, #32]
 800642e:	4401      	add	r1, r0
 8006430:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006434:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006436:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68d9      	ldr	r1, [r3, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644e:	460a      	mov	r2, r1
 8006450:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	440a      	add	r2, r1
 8006480:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006484:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006488:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	7e7b      	ldrb	r3, [r7, #25]
 800649a:	075b      	lsls	r3, r3, #29
 800649c:	69f9      	ldr	r1, [r7, #28]
 800649e:	0148      	lsls	r0, r1, #5
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	4401      	add	r1, r0
 80064a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	e003      	b.n	80064de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f2:	461a      	mov	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e04e      	b.n	80065a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d149      	bne.n	800659e <USB_HC_StartXfer+0x276>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d045      	beq.n	800659e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	79db      	ldrb	r3, [r3, #7]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d830      	bhi.n	800657c <USB_HC_StartXfer+0x254>
 800651a:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <USB_HC_StartXfer+0x1f8>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	08006555 	.word	0x08006555
 8006528:	08006531 	.word	0x08006531
 800652c:	08006555 	.word	0x08006555
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	3303      	adds	r3, #3
 8006536:	089b      	lsrs	r3, r3, #2
 8006538:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800653a:	8afa      	ldrh	r2, [r7, #22]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	b29b      	uxth	r3, r3
 8006542:	429a      	cmp	r2, r3
 8006544:	d91c      	bls.n	8006580 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	619a      	str	r2, [r3, #24]
        }
        break;
 8006552:	e015      	b.n	8006580 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	3303      	adds	r3, #3
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800655e:	8afa      	ldrh	r2, [r7, #22]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	b29b      	uxth	r3, r3
 800656a:	429a      	cmp	r2, r3
 800656c:	d90a      	bls.n	8006584 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	619a      	str	r2, [r3, #24]
        }
        break;
 800657a:	e003      	b.n	8006584 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <USB_HC_StartXfer+0x25e>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <USB_HC_StartXfer+0x25e>
        break;
 8006584:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	68d9      	ldr	r1, [r3, #12]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	785a      	ldrb	r2, [r3, #1]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	b29b      	uxth	r3, r3
 8006594:	2000      	movs	r0, #0
 8006596:	9000      	str	r0, [sp, #0]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fb31 	bl	8005c00 <USB_WritePacket>
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	@ 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	1ff80000 	.word	0x1ff80000

080065ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	b29b      	uxth	r3, r3
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b089      	sub	sp, #36	@ 0x24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	0c9b      	lsrs	r3, r3, #18
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0fdb      	lsrs	r3, r3, #31
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b20      	cmp	r3, #32
 800661c:	d104      	bne.n	8006628 <USB_HC_Halt+0x5a>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e0c8      	b.n	80067ba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <USB_HC_Halt+0x66>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d163      	bne.n	80066fc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800664e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006652:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 80ab 	bne.w	80067b8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006666:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d133      	bne.n	80066d6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	440a      	add	r2, r1
 8006684:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066ba:	d81d      	bhi.n	80066f8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d2:	d0ec      	beq.n	80066ae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066d4:	e070      	b.n	80067b8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	0151      	lsls	r1, r2, #5
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	440a      	add	r2, r1
 80066ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066f6:	e05f      	b.n	80067b8 <USB_HC_Halt+0x1ea>
            break;
 80066f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066fa:	e05d      	b.n	80067b8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	440a      	add	r2, r1
 8006712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800671a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d133      	bne.n	8006794 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006746:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800674a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800676a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006778:	d81d      	bhi.n	80067b6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800678c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006790:	d0ec      	beq.n	800676c <USB_HC_Halt+0x19e>
 8006792:	e011      	b.n	80067b8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e000      	b.n	80067b8 <USB_HC_Halt+0x1ea>
          break;
 80067b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3724      	adds	r7, #36	@ 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067dc:	2301      	movs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	04da      	lsls	r2, r3, #19
 80067e4:	4b15      	ldr	r3, [pc, #84]	@ (800683c <USB_DoPing+0x74>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006810:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006818:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006826:	461a      	mov	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	1ff80000 	.word	0x1ff80000

08006840 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff f912 	bl	8005a7e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800685a:	2110      	movs	r1, #16
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f96b 	bl	8005b38 <USB_FlushTxFifo>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff f997 	bl	8005ba0 <USB_FlushRxFifo>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	e01f      	b.n	80068c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006898:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b6:	461a      	mov	r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	3301      	adds	r3, #1
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b0f      	cmp	r3, #15
 80068c6:	d9dc      	bls.n	8006882 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	e034      	b.n	8006938 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006902:	461a      	mov	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006914:	d80c      	bhi.n	8006930 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800692c:	d0ec      	beq.n	8006908 <USB_StopHost+0xc8>
 800692e:	e000      	b.n	8006932 <USB_StopHost+0xf2>
        break;
 8006930:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	3301      	adds	r3, #1
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	d9c7      	bls.n	80068ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006944:	461a      	mov	r2, r3
 8006946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800694a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006952:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff f881 	bl	8005a5c <USB_EnableGlobalInt>

  return ret;
 800695a:	7ffb      	ldrb	r3, [r7, #31]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b089      	sub	sp, #36	@ 0x24
 8006968:	af04      	add	r7, sp, #16
 800696a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800696c:	2301      	movs	r3, #1
 800696e:	2202      	movs	r2, #2
 8006970:	2102      	movs	r1, #2
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fc66 	bl	8007244 <USBH_FindInterface>
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2bff      	cmp	r3, #255	@ 0xff
 8006980:	d002      	beq.n	8006988 <USBH_CDC_InterfaceInit+0x24>
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d901      	bls.n	800698c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006988:	2302      	movs	r3, #2
 800698a:	e13d      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc3b 	bl	800720c <USBH_SelectInterface>
 8006996:	4603      	mov	r3, r0
 8006998:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069a0:	2302      	movs	r3, #2
 80069a2:	e131      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80069aa:	2050      	movs	r0, #80	@ 0x50
 80069ac:	f002 fac0 	bl	8008f30 <malloc>
 80069b0:	4603      	mov	r3, r0
 80069b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	e11f      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069c8:	2250      	movs	r2, #80	@ 0x50
 80069ca:	2100      	movs	r1, #0
 80069cc:	68b8      	ldr	r0, [r7, #8]
 80069ce:	f002 fb6d 	bl	80090ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	211a      	movs	r1, #26
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	4413      	add	r3, r2
 80069de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da15      	bge.n	8006a16 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	211a      	movs	r1, #26
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	211a      	movs	r1, #26
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 ff1c 	bl	800885a <USBH_AllocPipe>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	7819      	ldrb	r1, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	7858      	ldrb	r0, [r3, #1]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	8952      	ldrh	r2, [r2, #10]
 8006a42:	9202      	str	r2, [sp, #8]
 8006a44:	2203      	movs	r2, #3
 8006a46:	9201      	str	r2, [sp, #4]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fed4 	bl	80087fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f002 f9e3 	bl	8008e28 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a62:	2300      	movs	r3, #0
 8006a64:	2200      	movs	r2, #0
 8006a66:	210a      	movs	r1, #10
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbeb 	bl	8007244 <USBH_FindInterface>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2bff      	cmp	r3, #255	@ 0xff
 8006a76:	d002      	beq.n	8006a7e <USBH_CDC_InterfaceInit+0x11a>
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d901      	bls.n	8006a82 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0c2      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	211a      	movs	r1, #26
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b25b      	sxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	da16      	bge.n	8006ac8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	211a      	movs	r1, #26
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	211a      	movs	r1, #26
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006ac0:	881a      	ldrh	r2, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	835a      	strh	r2, [r3, #26]
 8006ac6:	e015      	b.n	8006af4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	211a      	movs	r1, #26
 8006ace:	fb01 f303 	mul.w	r3, r1, r3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	211a      	movs	r1, #26
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	211a      	movs	r1, #26
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	da16      	bge.n	8006b3a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	211a      	movs	r1, #26
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	211a      	movs	r1, #26
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b32:	881a      	ldrh	r2, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	835a      	strh	r2, [r3, #26]
 8006b38:	e015      	b.n	8006b66 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	211a      	movs	r1, #26
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	211a      	movs	r1, #26
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b60:	881a      	ldrh	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	7b9b      	ldrb	r3, [r3, #14]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fe74 	bl	800885a <USBH_AllocPipe>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	7bdb      	ldrb	r3, [r3, #15]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fe6a 	bl	800885a <USBH_AllocPipe>
 8006b86:	4603      	mov	r3, r0
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7b59      	ldrb	r1, [r3, #13]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	7b98      	ldrb	r0, [r3, #14]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	8b12      	ldrh	r2, [r2, #24]
 8006ba6:	9202      	str	r2, [sp, #8]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	9201      	str	r2, [sp, #4]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4623      	mov	r3, r4
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fe22 	bl	80087fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	7b19      	ldrb	r1, [r3, #12]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	7bd8      	ldrb	r0, [r3, #15]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	8b52      	ldrh	r2, [r2, #26]
 8006bd0:	9202      	str	r2, [sp, #8]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	9201      	str	r2, [sp, #4]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4623      	mov	r3, r4
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fe0d 	bl	80087fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	7b5b      	ldrb	r3, [r3, #13]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 f918 	bl	8008e28 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	7b1b      	ldrb	r3, [r3, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f002 f911 	bl	8008e28 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd90      	pop	{r4, r7, pc}

08006c10 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fe02 	bl	800883a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fe2d 	bl	800889c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7b1b      	ldrb	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7b1b      	ldrb	r3, [r3, #12]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fdef 	bl	800883a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	7b1b      	ldrb	r3, [r3, #12]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fe1a 	bl	800889c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	7b5b      	ldrb	r3, [r3, #13]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	7b5b      	ldrb	r3, [r3, #13]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fddc 	bl	800883a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	7b5b      	ldrb	r3, [r3, #13]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fe07 	bl	800889c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f002 f949 	bl	8008f40 <free>
    phost->pActiveClass->pData = 0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3340      	adds	r3, #64	@ 0x40
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f8b1 	bl	8006e42 <GetLineCoding>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d105      	bne.n	8006cf6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d877      	bhi.n	8006e14 <USBH_CDC_Process+0x114>
 8006d24:	a201      	add	r2, pc, #4	@ (adr r2, 8006d2c <USBH_CDC_Process+0x2c>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d41 	.word	0x08006d41
 8006d30:	08006d47 	.word	0x08006d47
 8006d34:	08006d77 	.word	0x08006d77
 8006d38:	08006deb 	.word	0x08006deb
 8006d3c:	08006df9 	.word	0x08006df9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e06d      	b.n	8006e22 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f897 	bl	8006e80 <SetLineCoding>
 8006d52:	4603      	mov	r3, r0
 8006d54:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d64:	e058      	b.n	8006e18 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d055      	beq.n	8006e18 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006d74:	e050      	b.n	8006e18 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	3340      	adds	r3, #64	@ 0x40
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f860 	bl	8006e42 <GetLineCoding>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d126      	bne.n	8006dda <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d9e:	791b      	ldrb	r3, [r3, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d13b      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d133      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dbe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d12b      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dcc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d124      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f958 	bl	8007088 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006dd8:	e020      	b.n	8006e1c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d01d      	beq.n	8006e1c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2204      	movs	r2, #4
 8006de4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006de8:	e018      	b.n	8006e1c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f867 	bl	8006ebe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f8da 	bl	8006faa <CDC_ProcessReception>
      break;
 8006df6:	e014      	b.n	8006e22 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ffe7 	bl	8007dce <USBH_ClrFeature>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006e12:	e005      	b.n	8006e20 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e14:	bf00      	nop
 8006e16:	e004      	b.n	8006e22 <USBH_CDC_Process+0x122>
      break;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <USBH_CDC_Process+0x122>
      break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <USBH_CDC_Process+0x122>
      break;
 8006e20:	bf00      	nop

  }

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	22a1      	movs	r2, #161	@ 0xa1
 8006e50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2221      	movs	r2, #33	@ 0x21
 8006e56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2207      	movs	r2, #7
 8006e68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fa72 	bl	800835a <USBH_CtlReq>
 8006e76:	4603      	mov	r3, r0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2221      	movs	r2, #33	@ 0x21
 8006e8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2207      	movs	r2, #7
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fa53 	bl	800835a <USBH_CtlReq>
 8006eb4:	4603      	mov	r3, r0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af02      	add	r7, sp, #8
 8006ec4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d002      	beq.n	8006ee4 <CDC_ProcessTransmission+0x26>
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d023      	beq.n	8006f2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ee2:	e05e      	b.n	8006fa2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	8b12      	ldrh	r2, [r2, #24]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d90b      	bls.n	8006f08 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	69d9      	ldr	r1, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8b1a      	ldrh	r2, [r3, #24]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	7b5b      	ldrb	r3, [r3, #13]
 8006efc:	2001      	movs	r0, #1
 8006efe:	9000      	str	r0, [sp, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fc38 	bl	8008776 <USBH_BulkSendData>
 8006f06:	e00b      	b.n	8006f20 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	7b5b      	ldrb	r3, [r3, #13]
 8006f16:	2001      	movs	r0, #1
 8006f18:	9000      	str	r0, [sp, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fc2b 	bl	8008776 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f28:	e03b      	b.n	8006fa2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	7b5b      	ldrb	r3, [r3, #13]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ff4f 	bl	8008dd4 <USBH_LL_GetURBState>
 8006f36:	4603      	mov	r3, r0
 8006f38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d128      	bne.n	8006f92 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	8b12      	ldrh	r2, [r2, #24]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d90e      	bls.n	8006f6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	8b12      	ldrh	r2, [r2, #24]
 8006f54:	1a9a      	subs	r2, r3, r2
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	8b12      	ldrh	r2, [r2, #24]
 8006f62:	441a      	add	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	61da      	str	r2, [r3, #28]
 8006f68:	e002      	b.n	8006f70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f80:	e00e      	b.n	8006fa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f868 	bl	8007060 <USBH_CDC_TransmitCallback>
      break;
 8006f90:	e006      	b.n	8006fa0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d103      	bne.n	8006fa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006fa0:	bf00      	nop
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d002      	beq.n	8006fd0 <CDC_ProcessReception+0x26>
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d00e      	beq.n	8006fec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fce:	e043      	b.n	8007058 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	6a19      	ldr	r1, [r3, #32]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	8b5a      	ldrh	r2, [r3, #26]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fbef 	bl	80087c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006fea:	e035      	b.n	8007058 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	7b1b      	ldrb	r3, [r3, #12]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 feee 	bl	8008dd4 <USBH_LL_GetURBState>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ffc:	7cfb      	ldrb	r3, [r7, #19]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d129      	bne.n	8007056 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	7b1b      	ldrb	r3, [r3, #12]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fe51 	bl	8008cb0 <USBH_LL_GetLastXferSize>
 800700e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	429a      	cmp	r2, r3
 8007018:	d016      	beq.n	8007048 <CDC_ProcessReception+0x9e>
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	8b5b      	ldrh	r3, [r3, #26]
 800701e:	461a      	mov	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4293      	cmp	r3, r2
 8007024:	d910      	bls.n	8007048 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6a1a      	ldr	r2, [r3, #32]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	441a      	add	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2203      	movs	r2, #3
 8007042:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007046:	e006      	b.n	8007056 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f80f 	bl	8007074 <USBH_CDC_ReceiveCallback>
      break;
 8007056:	bf00      	nop
  }
}
 8007058:	bf00      	nop
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e029      	b.n	8007108 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	79fa      	ldrb	r2, [r7, #7]
 80070b8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f81f 	bl	8007110 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f001 fd21 	bl	8008b48 <USBH_LL_Init>

  return USBH_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e009      	b.n	8007136 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	33e0      	adds	r3, #224	@ 0xe0
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b0f      	cmp	r3, #15
 800713a:	d9f2      	bls.n	8007122 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e009      	b.n	8007156 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800715c:	d3f1      	bcc.n	8007142 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2240      	movs	r2, #64	@ 0x40
 8007182:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d016      	beq.n	80071fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10e      	bne.n	80071f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80071dc:	1c59      	adds	r1, r3, #1
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	33de      	adds	r3, #222	@ 0xde
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
 80071f2:	e004      	b.n	80071fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071f4:	2302      	movs	r3, #2
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e001      	b.n	80071fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	429a      	cmp	r2, r3
 8007226:	d204      	bcs.n	8007232 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007230:	e001      	b.n	8007236 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	461a      	mov	r2, r3
 8007252:	4603      	mov	r3, r0
 8007254:	70fb      	strb	r3, [r7, #3]
 8007256:	460b      	mov	r3, r1
 8007258:	70bb      	strb	r3, [r7, #2]
 800725a:	4613      	mov	r3, r2
 800725c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800726c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800726e:	e025      	b.n	80072bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	221a      	movs	r2, #26
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	3308      	adds	r3, #8
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	3302      	adds	r3, #2
 8007280:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	795b      	ldrb	r3, [r3, #5]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	429a      	cmp	r2, r3
 800728a:	d002      	beq.n	8007292 <USBH_FindInterface+0x4e>
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	2bff      	cmp	r3, #255	@ 0xff
 8007290:	d111      	bne.n	80072b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007296:	78ba      	ldrb	r2, [r7, #2]
 8007298:	429a      	cmp	r2, r3
 800729a:	d002      	beq.n	80072a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800729c:	78bb      	ldrb	r3, [r7, #2]
 800729e:	2bff      	cmp	r3, #255	@ 0xff
 80072a0:	d109      	bne.n	80072b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072a6:	787a      	ldrb	r2, [r7, #1]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d002      	beq.n	80072b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072ac:	787b      	ldrb	r3, [r7, #1]
 80072ae:	2bff      	cmp	r3, #255	@ 0xff
 80072b0:	d101      	bne.n	80072b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	e006      	b.n	80072c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	3301      	adds	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d9d6      	bls.n	8007270 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072c2:	23ff      	movs	r3, #255	@ 0xff
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fc71 	bl	8008bc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80072de:	2101      	movs	r1, #1
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fd8a 	bl	8008dfa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af04      	add	r7, sp, #16
 80072f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072f8:	2302      	movs	r3, #2
 80072fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d102      	bne.n	8007312 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2203      	movs	r2, #3
 8007310:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b0b      	cmp	r3, #11
 800731a:	f200 81bb 	bhi.w	8007694 <USBH_Process+0x3a4>
 800731e:	a201      	add	r2, pc, #4	@ (adr r2, 8007324 <USBH_Process+0x34>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007355 	.word	0x08007355
 8007328:	08007387 	.word	0x08007387
 800732c:	080073ef 	.word	0x080073ef
 8007330:	0800762f 	.word	0x0800762f
 8007334:	08007695 	.word	0x08007695
 8007338:	0800748f 	.word	0x0800748f
 800733c:	080075d5 	.word	0x080075d5
 8007340:	080074c5 	.word	0x080074c5
 8007344:	080074e5 	.word	0x080074e5
 8007348:	08007503 	.word	0x08007503
 800734c:	08007547 	.word	0x08007547
 8007350:	08007617 	.word	0x08007617
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 819b 	beq.w	8007698 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007368:	20c8      	movs	r0, #200	@ 0xc8
 800736a:	f001 fd8d 	bl	8008e88 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fc83 	bl	8008c7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007384:	e188      	b.n	8007698 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800738c:	2b01      	cmp	r3, #1
 800738e:	d107      	bne.n	80073a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800739e:	e18a      	b.n	80076b6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80073a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073aa:	d914      	bls.n	80073d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d903      	bls.n	80073ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	220d      	movs	r2, #13
 80073ca:	701a      	strb	r2, [r3, #0]
      break;
 80073cc:	e173      	b.n	80076b6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
      break;
 80073d4:	e16f      	b.n	80076b6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80073dc:	f103 020a 	add.w	r2, r3, #10
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80073e6:	200a      	movs	r0, #10
 80073e8:	f001 fd4e 	bl	8008e88 <USBH_Delay>
      break;
 80073ec:	e163      	b.n	80076b6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073fe:	2104      	movs	r1, #4
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007404:	2064      	movs	r0, #100	@ 0x64
 8007406:	f001 fd3f 	bl	8008e88 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fc0e 	bl	8008c2c <USBH_LL_GetSpeed>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007420:	2100      	movs	r1, #0
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fa19 	bl	800885a <USBH_AllocPipe>
 8007428:	4603      	mov	r3, r0
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007430:	2180      	movs	r1, #128	@ 0x80
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fa11 	bl	800885a <USBH_AllocPipe>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7919      	ldrb	r1, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007454:	9202      	str	r2, [sp, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	9201      	str	r2, [sp, #4]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	4603      	mov	r3, r0
 800745e:	2280      	movs	r2, #128	@ 0x80
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 f9cb 	bl	80087fc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	7959      	ldrb	r1, [r3, #5]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800747a:	9202      	str	r2, [sp, #8]
 800747c:	2200      	movs	r2, #0
 800747e:	9201      	str	r2, [sp, #4]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4603      	mov	r3, r0
 8007484:	2200      	movs	r2, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f9b8 	bl	80087fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800748c:	e113      	b.n	80076b6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f916 	bl	80076c0 <USBH_HandleEnum>
 8007494:	4603      	mov	r3, r0
 8007496:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 80fd 	bne.w	800769c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d103      	bne.n	80074bc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2208      	movs	r2, #8
 80074b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074ba:	e0ef      	b.n	800769c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2207      	movs	r2, #7
 80074c0:	701a      	strb	r2, [r3, #0]
      break;
 80074c2:	e0eb      	b.n	800769c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80e8 	beq.w	80076a0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074d6:	2101      	movs	r1, #1
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2208      	movs	r2, #8
 80074e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80074e2:	e0dd      	b.n	80076a0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fc27 	bl	8007d40 <USBH_SetCfg>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 80d5 	bne.w	80076a4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2209      	movs	r2, #9
 80074fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007500:	e0d0      	b.n	80076a4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d016      	beq.n	800753e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007510:	2101      	movs	r1, #1
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc37 	bl	8007d86 <USBH_SetFeature>
 8007518:	4603      	mov	r3, r0
 800751a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d103      	bne.n	800752c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220a      	movs	r2, #10
 8007528:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800752a:	e0bd      	b.n	80076a8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b03      	cmp	r3, #3
 8007532:	f040 80b9 	bne.w	80076a8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	220a      	movs	r2, #10
 800753a:	701a      	strb	r2, [r3, #0]
      break;
 800753c:	e0b4      	b.n	80076a8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	220a      	movs	r2, #10
 8007542:	701a      	strb	r2, [r3, #0]
      break;
 8007544:	e0b0      	b.n	80076a8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80ad 	beq.w	80076ac <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
 800755e:	e016      	b.n	800758e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007560:	7bfa      	ldrb	r2, [r7, #15]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32de      	adds	r2, #222	@ 0xde
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	791a      	ldrb	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007572:	429a      	cmp	r2, r3
 8007574:	d108      	bne.n	8007588 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007576:	7bfa      	ldrb	r2, [r7, #15]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	32de      	adds	r2, #222	@ 0xde
 800757c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007586:	e005      	b.n	8007594 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	3301      	adds	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0e5      	beq.n	8007560 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2206      	movs	r2, #6
 80075b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075bc:	2103      	movs	r1, #3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075c2:	e073      	b.n	80076ac <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	220d      	movs	r2, #13
 80075c8:	701a      	strb	r2, [r3, #0]
      break;
 80075ca:	e06f      	b.n	80076ac <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	220d      	movs	r2, #13
 80075d0:	701a      	strb	r2, [r3, #0]
      break;
 80075d2:	e06b      	b.n	80076ac <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d017      	beq.n	800760e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	220b      	movs	r2, #11
 80075fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075fc:	e058      	b.n	80076b0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d154      	bne.n	80076b0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220d      	movs	r2, #13
 800760a:	701a      	strb	r2, [r3, #0]
      break;
 800760c:	e050      	b.n	80076b0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220d      	movs	r2, #13
 8007612:	701a      	strb	r2, [r3, #0]
      break;
 8007614:	e04c      	b.n	80076b0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d049      	beq.n	80076b4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
      }
      break;
 800762c:	e042      	b.n	80076b4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fd6a 	bl	8007110 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800766a:	2105      	movs	r1, #5
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d107      	bne.n	800768c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fe23 	bl	80072d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800768a:	e014      	b.n	80076b6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fa97 	bl	8008bc0 <USBH_LL_Start>
      break;
 8007692:	e010      	b.n	80076b6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007694:	bf00      	nop
 8007696:	e00e      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 8007698:	bf00      	nop
 800769a:	e00c      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 800769c:	bf00      	nop
 800769e:	e00a      	b.n	80076b6 <USBH_Process+0x3c6>
    break;
 80076a0:	bf00      	nop
 80076a2:	e008      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 80076a4:	bf00      	nop
 80076a6:	e006      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 80076a8:	bf00      	nop
 80076aa:	e004      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <USBH_Process+0x3c6>
      break;
 80076b4:	bf00      	nop
  }
  return USBH_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af04      	add	r7, sp, #16
 80076c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b07      	cmp	r3, #7
 80076d6:	f200 81bd 	bhi.w	8007a54 <USBH_HandleEnum+0x394>
 80076da:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <USBH_HandleEnum+0x20>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007701 	.word	0x08007701
 80076e4:	080077bb 	.word	0x080077bb
 80076e8:	08007825 	.word	0x08007825
 80076ec:	080078af 	.word	0x080078af
 80076f0:	08007919 	.word	0x08007919
 80076f4:	08007989 	.word	0x08007989
 80076f8:	080079cf 	.word	0x080079cf
 80076fc:	08007a15 	.word	0x08007a15
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007700:	2108      	movs	r1, #8
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa4c 	bl	8007ba0 <USBH_Get_DevDesc>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d12e      	bne.n	8007770 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7919      	ldrb	r1, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007736:	9202      	str	r2, [sp, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	9201      	str	r2, [sp, #4]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4603      	mov	r3, r0
 8007740:	2280      	movs	r2, #128	@ 0x80
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f85a 	bl	80087fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7959      	ldrb	r1, [r3, #5]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800775c:	9202      	str	r2, [sp, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4603      	mov	r3, r0
 8007766:	2200      	movs	r2, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f847 	bl	80087fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800776e:	e173      	b.n	8007a58 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b03      	cmp	r3, #3
 8007774:	f040 8170 	bne.w	8007a58 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800777e:	3301      	adds	r3, #1
 8007780:	b2da      	uxtb	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800778e:	2b03      	cmp	r3, #3
 8007790:	d903      	bls.n	800779a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	220d      	movs	r2, #13
 8007796:	701a      	strb	r2, [r3, #0]
      break;
 8007798:	e15e      	b.n	8007a58 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	795b      	ldrb	r3, [r3, #5]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f87b 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	791b      	ldrb	r3, [r3, #4]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 f875 	bl	800889c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
      break;
 80077b8:	e14e      	b.n	8007a58 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077ba:	2112      	movs	r1, #18
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f9ef 	bl	8007ba0 <USBH_Get_DevDesc>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077d2:	e143      	b.n	8007a5c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	f040 8140 	bne.w	8007a5c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077e2:	3301      	adds	r3, #1
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d903      	bls.n	80077fe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220d      	movs	r2, #13
 80077fa:	701a      	strb	r2, [r3, #0]
      break;
 80077fc:	e12e      	b.n	8007a5c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	795b      	ldrb	r3, [r3, #5]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 f849 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	791b      	ldrb	r3, [r3, #4]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f843 	bl	800889c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
      break;
 8007822:	e11b      	b.n	8007a5c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007824:	2101      	movs	r1, #1
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa66 	bl	8007cf8 <USBH_SetAddress>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d130      	bne.n	8007898 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007836:	2002      	movs	r0, #2
 8007838:	f001 fb26 	bl	8008e88 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2203      	movs	r2, #3
 8007848:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7919      	ldrb	r1, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800785e:	9202      	str	r2, [sp, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	9201      	str	r2, [sp, #4]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4603      	mov	r3, r0
 8007868:	2280      	movs	r2, #128	@ 0x80
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 ffc6 	bl	80087fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7959      	ldrb	r1, [r3, #5]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	2200      	movs	r2, #0
 8007888:	9201      	str	r2, [sp, #4]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	2200      	movs	r2, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 ffb3 	bl	80087fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007896:	e0e3      	b.n	8007a60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b03      	cmp	r3, #3
 800789c:	f040 80e0 	bne.w	8007a60 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	220d      	movs	r2, #13
 80078a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	705a      	strb	r2, [r3, #1]
      break;
 80078ac:	e0d8      	b.n	8007a60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078ae:	2109      	movs	r1, #9
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f99d 	bl	8007bf0 <USBH_Get_CfgDesc>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2204      	movs	r2, #4
 80078c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078c6:	e0cd      	b.n	8007a64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	f040 80ca 	bne.w	8007a64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d903      	bls.n	80078f2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220d      	movs	r2, #13
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e0b8      	b.n	8007a64 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	795b      	ldrb	r3, [r3, #5]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 ffcf 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	791b      	ldrb	r3, [r3, #4]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 ffc9 	bl	800889c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
      break;
 8007916:	e0a5      	b.n	8007a64 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f965 	bl	8007bf0 <USBH_Get_CfgDesc>
 8007926:	4603      	mov	r3, r0
 8007928:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2205      	movs	r2, #5
 8007934:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007936:	e097      	b.n	8007a68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b03      	cmp	r3, #3
 800793c:	f040 8094 	bne.w	8007a68 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007946:	3301      	adds	r3, #1
 8007948:	b2da      	uxtb	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007956:	2b03      	cmp	r3, #3
 8007958:	d903      	bls.n	8007962 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	220d      	movs	r2, #13
 800795e:	701a      	strb	r2, [r3, #0]
      break;
 8007960:	e082      	b.n	8007a68 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 ff97 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	791b      	ldrb	r3, [r3, #4]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 ff91 	bl	800889c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e06f      	b.n	8007a68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800798e:	2b00      	cmp	r3, #0
 8007990:	d019      	beq.n	80079c6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800799e:	23ff      	movs	r3, #255	@ 0xff
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f949 	bl	8007c38 <USBH_Get_StringDesc>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2206      	movs	r2, #6
 80079b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079b6:	e059      	b.n	8007a6c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d156      	bne.n	8007a6c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2206      	movs	r2, #6
 80079c2:	705a      	strb	r2, [r3, #1]
      break;
 80079c4:	e052      	b.n	8007a6c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2206      	movs	r2, #6
 80079ca:	705a      	strb	r2, [r3, #1]
      break;
 80079cc:	e04e      	b.n	8007a6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d019      	beq.n	8007a0c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079e4:	23ff      	movs	r3, #255	@ 0xff
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f926 	bl	8007c38 <USBH_Get_StringDesc>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d103      	bne.n	80079fe <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2207      	movs	r2, #7
 80079fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079fc:	e038      	b.n	8007a70 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d135      	bne.n	8007a70 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2207      	movs	r2, #7
 8007a08:	705a      	strb	r2, [r3, #1]
      break;
 8007a0a:	e031      	b.n	8007a70 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2207      	movs	r2, #7
 8007a10:	705a      	strb	r2, [r3, #1]
      break;
 8007a12:	e02d      	b.n	8007a70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a2a:	23ff      	movs	r3, #255	@ 0xff
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f903 	bl	8007c38 <USBH_Get_StringDesc>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a40:	e018      	b.n	8007a74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d115      	bne.n	8007a74 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e012      	b.n	8007a74 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
      break;
 8007a52:	e00f      	b.n	8007a74 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007a54:	bf00      	nop
 8007a56:	e00e      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e00c      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e00a      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a60:	bf00      	nop
 8007a62:	e008      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a64:	bf00      	nop
 8007a66:	e006      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a68:	bf00      	nop
 8007a6a:	e004      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a6c:	bf00      	nop
 8007a6e:	e002      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a70:	bf00      	nop
 8007a72:	e000      	b.n	8007a76 <USBH_HandleEnum+0x3b6>
      break;
 8007a74:	bf00      	nop
  }
  return Status;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f804 	bl	8007ac2 <USBH_HandleSof>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b0b      	cmp	r3, #11
 8007ad2:	d10a      	bne.n	8007aea <USBH_HandleSof+0x28>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
  }
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b02:	bf00      	nop
}
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007b1e:	bf00      	nop
}
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f83c 	bl	8008bf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	791b      	ldrb	r3, [r3, #4]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fe89 	bl	800889c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	795b      	ldrb	r3, [r3, #5]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fe83 	bl	800889c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f864 	bl	8007c8e <USBH_GetDescriptor>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f203 3026 	addw	r0, r3, #806	@ 0x326
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	b292      	uxth	r2, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	f000 f919 	bl	8007e18 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	331c      	adds	r3, #28
 8007c00:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c02:	887b      	ldrh	r3, [r7, #2]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f83d 	bl	8007c8e <USBH_GetDescriptor>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d107      	bne.n	8007c2e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c1e:	887b      	ldrh	r3, [r7, #2]
 8007c20:	461a      	mov	r2, r3
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f985 	bl	8007f34 <USBH_ParseCfgDesc>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	461a      	mov	r2, r3
 8007c44:	460b      	mov	r3, r1
 8007c46:	72fb      	strb	r3, [r7, #11]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007c54:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	460b      	mov	r3, r1
 8007c62:	2100      	movs	r1, #0
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f812 	bl	8007c8e <USBH_GetDescriptor>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c7a:	893a      	ldrh	r2, [r7, #8]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fb1e 	bl	80082c0 <USBH_ParseStringDesc>
  }

  return status;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	607b      	str	r3, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	72fb      	strb	r3, [r7, #11]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	789b      	ldrb	r3, [r3, #2]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d11c      	bne.n	8007ce2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2206      	movs	r2, #6
 8007cb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	893a      	ldrh	r2, [r7, #8]
 8007cbe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cc0:	893b      	ldrh	r3, [r7, #8]
 8007cc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cca:	d104      	bne.n	8007cd6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f240 4209 	movw	r2, #1033	@ 0x409
 8007cd2:	829a      	strh	r2, [r3, #20]
 8007cd4:	e002      	b.n	8007cdc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8b3a      	ldrh	r2, [r7, #24]
 8007ce0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ce2:	8b3b      	ldrh	r3, [r7, #24]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fb36 	bl	800835a <USBH_CtlReq>
 8007cee:	4603      	mov	r3, r0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	789b      	ldrb	r3, [r3, #2]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10f      	bne.n	8007d2c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2205      	movs	r2, #5
 8007d16:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fb12 	bl	800835a <USBH_CtlReq>
 8007d36:	4603      	mov	r3, r0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	789b      	ldrb	r3, [r3, #2]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d10e      	bne.n	8007d72 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2209      	movs	r2, #9
 8007d5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	887a      	ldrh	r2, [r7, #2]
 8007d64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 faef 	bl	800835a <USBH_CtlReq>
 8007d7c:	4603      	mov	r3, r0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	789b      	ldrb	r3, [r3, #2]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d10f      	bne.n	8007dba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2203      	movs	r2, #3
 8007da4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 facb 	bl	800835a <USBH_CtlReq>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	789b      	ldrb	r3, [r3, #2]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d10f      	bne.n	8007e02 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007e02:	2200      	movs	r2, #0
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 faa7 	bl	800835a <USBH_CtlReq>
 8007e0c:	4603      	mov	r3, r0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	785a      	ldrb	r2, [r3, #1]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3302      	adds	r3, #2
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3303      	adds	r3, #3
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	791a      	ldrb	r2, [r3, #4]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	795a      	ldrb	r2, [r3, #5]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	799a      	ldrb	r2, [r3, #6]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	79da      	ldrb	r2, [r3, #7]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	79db      	ldrb	r3, [r3, #7]
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	dc0f      	bgt.n	8007e98 <USBH_ParseDevDesc+0x80>
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	db14      	blt.n	8007ea6 <USBH_ParseDevDesc+0x8e>
 8007e7c:	3b08      	subs	r3, #8
 8007e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f30 <USBH_ParseDevDesc+0x118>)
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bf14      	ite	ne
 8007e8c:	2301      	movne	r3, #1
 8007e8e:	2300      	moveq	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <USBH_ParseDevDesc+0x84>
 8007e96:	e006      	b.n	8007ea6 <USBH_ParseDevDesc+0x8e>
 8007e98:	2b40      	cmp	r3, #64	@ 0x40
 8007e9a:	d104      	bne.n	8007ea6 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	79da      	ldrb	r2, [r3, #7]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	71da      	strb	r2, [r3, #7]
      break;
 8007ea4:	e003      	b.n	8007eae <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2240      	movs	r2, #64	@ 0x40
 8007eaa:	71da      	strb	r2, [r3, #7]
      break;
 8007eac:	bf00      	nop
  }

  if (length > 8U)
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d936      	bls.n	8007f22 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3309      	adds	r3, #9
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	330a      	adds	r3, #10
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	330b      	adds	r3, #11
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	330c      	adds	r3, #12
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	330d      	adds	r3, #13
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	7b9a      	ldrb	r2, [r3, #14]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7bda      	ldrb	r2, [r3, #15]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7c1a      	ldrb	r2, [r3, #16]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7c5a      	ldrb	r2, [r3, #17]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	745a      	strb	r2, [r3, #17]
  }
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	01000101 	.word	0x01000101

08007f34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08c      	sub	sp, #48	@ 0x30
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	781a      	ldrb	r2, [r3, #0]
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	785a      	ldrb	r2, [r3, #1]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3302      	adds	r3, #2
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3303      	adds	r3, #3
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	4313      	orrs	r3, r2
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f8e:	bf28      	it	cs
 8007f90:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	791a      	ldrb	r2, [r3, #4]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	795a      	ldrb	r2, [r3, #5]
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	799a      	ldrb	r2, [r3, #6]
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	79da      	ldrb	r2, [r3, #7]
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	7a1a      	ldrb	r2, [r3, #8]
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d002      	beq.n	8007fd0 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	2209      	movs	r2, #9
 8007fce:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	f240 809d 	bls.w	8008112 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fd8:	2309      	movs	r3, #9
 8007fda:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fe0:	e081      	b.n	80080e6 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fe2:	f107 0316 	add.w	r3, r7, #22
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fea:	f000 f99c 	bl	8008326 <USBH_GetNextDesc>
 8007fee:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d176      	bne.n	80080e6 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b09      	cmp	r3, #9
 8007ffe:	d002      	beq.n	8008006 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008002:	2209      	movs	r2, #9
 8008004:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800800a:	221a      	movs	r2, #26
 800800c:	fb02 f303 	mul.w	r3, r2, r3
 8008010:	3308      	adds	r3, #8
 8008012:	6a3a      	ldr	r2, [r7, #32]
 8008014:	4413      	add	r3, r2
 8008016:	3302      	adds	r3, #2
 8008018:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800801a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800801c:	69f8      	ldr	r0, [r7, #28]
 800801e:	f000 f87e 	bl	800811e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800802c:	e043      	b.n	80080b6 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800802e:	f107 0316 	add.w	r3, r7, #22
 8008032:	4619      	mov	r1, r3
 8008034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008036:	f000 f976 	bl	8008326 <USBH_GetNextDesc>
 800803a:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	2b05      	cmp	r3, #5
 8008042:	d138      	bne.n	80080b6 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	795b      	ldrb	r3, [r3, #5]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d10f      	bne.n	800806c <USBH_ParseCfgDesc+0x138>
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	799b      	ldrb	r3, [r3, #6]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d10b      	bne.n	800806c <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	79db      	ldrb	r3, [r3, #7]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10f      	bne.n	800807c <USBH_ParseCfgDesc+0x148>
 800805c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b09      	cmp	r3, #9
 8008062:	d00b      	beq.n	800807c <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	2209      	movs	r2, #9
 8008068:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800806a:	e007      	b.n	800807c <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800806c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b07      	cmp	r3, #7
 8008072:	d004      	beq.n	800807e <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008076:	2207      	movs	r2, #7
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	e000      	b.n	800807e <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800807c:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800807e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008082:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008086:	3201      	adds	r2, #1
 8008088:	00d2      	lsls	r2, r2, #3
 800808a:	211a      	movs	r1, #26
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	3308      	adds	r3, #8
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	4413      	add	r3, r2
 8008098:	3304      	adds	r3, #4
 800809a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800809c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809e:	69b9      	ldr	r1, [r7, #24]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f86b 	bl	800817c <USBH_ParseEPDesc>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80080ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080b0:	3301      	adds	r3, #1
 80080b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080be:	429a      	cmp	r2, r3
 80080c0:	d204      	bcs.n	80080cc <USBH_ParseCfgDesc+0x198>
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	885a      	ldrh	r2, [r3, #2]
 80080c6:	8afb      	ldrh	r3, [r7, #22]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d8b0      	bhi.n	800802e <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	791b      	ldrb	r3, [r3, #4]
 80080d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d201      	bcs.n	80080dc <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 80080d8:	2303      	movs	r3, #3
 80080da:	e01c      	b.n	8008116 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 80080dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080e0:	3301      	adds	r3, #1
 80080e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d805      	bhi.n	80080fa <USBH_ParseCfgDesc+0x1c6>
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	885a      	ldrh	r2, [r3, #2]
 80080f2:	8afb      	ldrh	r3, [r7, #22]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	f63f af74 	bhi.w	8007fe2 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	791b      	ldrb	r3, [r3, #4]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	bf28      	it	cs
 8008102:	2302      	movcs	r3, #2
 8008104:	b2db      	uxtb	r3, r3
 8008106:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800810a:	429a      	cmp	r2, r3
 800810c:	d201      	bcs.n	8008112 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800810e:	2303      	movs	r3, #3
 8008110:	e001      	b.n	8008116 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8008112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008116:	4618      	mov	r0, r3
 8008118:	3730      	adds	r7, #48	@ 0x30
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	785a      	ldrb	r2, [r3, #1]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	789a      	ldrb	r2, [r3, #2]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	78da      	ldrb	r2, [r3, #3]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	791a      	ldrb	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	795a      	ldrb	r2, [r3, #5]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	799a      	ldrb	r2, [r3, #6]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	79da      	ldrb	r2, [r3, #7]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	7a1a      	ldrb	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	721a      	strb	r2, [r3, #8]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	785a      	ldrb	r2, [r3, #1]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	789a      	ldrb	r2, [r3, #2]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	78da      	ldrb	r2, [r3, #3]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3305      	adds	r3, #5
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	799a      	ldrb	r2, [r3, #6]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	889b      	ldrh	r3, [r3, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 80081d6:	2303      	movs	r3, #3
 80081d8:	75fb      	strb	r3, [r7, #23]
 80081da:	e031      	b.n	8008240 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	889b      	ldrh	r3, [r3, #4]
 80081e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	889b      	ldrh	r3, [r3, #4]
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3305      	adds	r3, #5
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	b29b      	uxth	r3, r3
 8008206:	430b      	orrs	r3, r1
 8008208:	b29b      	uxth	r3, r3
 800820a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10f      	bne.n	8008232 <USBH_ParseEPDesc+0xb6>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	4619      	mov	r1, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3305      	adds	r3, #5
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	b29b      	uxth	r3, r3
 8008224:	430b      	orrs	r3, r1
 8008226:	b29b      	uxth	r3, r3
 8008228:	b21b      	sxth	r3, r3
 800822a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800822e:	b21b      	sxth	r3, r3
 8008230:	e001      	b.n	8008236 <USBH_ParseEPDesc+0xba>
 8008232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008236:	4313      	orrs	r3, r2
 8008238:	b21b      	sxth	r3, r3
 800823a:	b29a      	uxth	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008246:	2b00      	cmp	r3, #0
 8008248:	d116      	bne.n	8008278 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	78db      	ldrb	r3, [r3, #3]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b01      	cmp	r3, #1
 8008254:	d005      	beq.n	8008262 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	78db      	ldrb	r3, [r3, #3]
 800825a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800825e:	2b03      	cmp	r3, #3
 8008260:	d127      	bne.n	80082b2 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	799b      	ldrb	r3, [r3, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <USBH_ParseEPDesc+0xf6>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	799b      	ldrb	r3, [r3, #6]
 800826e:	2b10      	cmp	r3, #16
 8008270:	d91f      	bls.n	80082b2 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8008272:	2303      	movs	r3, #3
 8008274:	75fb      	strb	r3, [r7, #23]
 8008276:	e01c      	b.n	80082b2 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	78db      	ldrb	r3, [r3, #3]
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10a      	bne.n	800829a <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	799b      	ldrb	r3, [r3, #6]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <USBH_ParseEPDesc+0x118>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	799b      	ldrb	r3, [r3, #6]
 8008290:	2b10      	cmp	r3, #16
 8008292:	d90e      	bls.n	80082b2 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8008294:	2303      	movs	r3, #3
 8008296:	75fb      	strb	r3, [r7, #23]
 8008298:	e00b      	b.n	80082b2 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	78db      	ldrb	r3, [r3, #3]
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d105      	bne.n	80082b2 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	799b      	ldrb	r3, [r3, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 80082ae:	2303      	movs	r3, #3
 80082b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d120      	bne.n	800831a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	1e9a      	subs	r2, r3, #2
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf28      	it	cs
 80082e4:	4613      	movcs	r3, r2
 80082e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3302      	adds	r3, #2
 80082ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082ee:	2300      	movs	r3, #0
 80082f0:	82fb      	strh	r3, [r7, #22]
 80082f2:	e00b      	b.n	800830c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082f4:	8afb      	ldrh	r3, [r7, #22]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3301      	adds	r3, #1
 8008304:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008306:	8afb      	ldrh	r3, [r7, #22]
 8008308:	3302      	adds	r3, #2
 800830a:	82fb      	strh	r3, [r7, #22]
 800830c:	8afa      	ldrh	r2, [r7, #22]
 800830e:	8abb      	ldrh	r3, [r7, #20]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3ef      	bcc.n	80082f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
  }
}
 800831a:	bf00      	nop
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7812      	ldrb	r2, [r2, #0]
 8008338:	4413      	add	r3, r2
 800833a:	b29a      	uxth	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008368:	2301      	movs	r3, #1
 800836a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	789b      	ldrb	r3, [r3, #2]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d002      	beq.n	800837a <USBH_CtlReq+0x20>
 8008374:	2b02      	cmp	r3, #2
 8008376:	d00f      	beq.n	8008398 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008378:	e027      	b.n	80083ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2202      	movs	r2, #2
 8008390:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
      break;
 8008396:	e018      	b.n	80083ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f81b 	bl	80083d4 <USBH_HandleControl>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <USBH_CtlReq+0x54>
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d106      	bne.n	80083bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	761a      	strb	r2, [r3, #24]
      break;
 80083ba:	e005      	b.n	80083c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d102      	bne.n	80083c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	709a      	strb	r2, [r3, #2]
      break;
 80083c8:	bf00      	nop
  }
  return status;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af02      	add	r7, sp, #8
 80083da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7e1b      	ldrb	r3, [r3, #24]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	2b0a      	cmp	r3, #10
 80083ec:	f200 8156 	bhi.w	800869c <USBH_HandleControl+0x2c8>
 80083f0:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <USBH_HandleControl+0x24>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	08008425 	.word	0x08008425
 80083fc:	0800843f 	.word	0x0800843f
 8008400:	080084a9 	.word	0x080084a9
 8008404:	080084cf 	.word	0x080084cf
 8008408:	08008507 	.word	0x08008507
 800840c:	08008531 	.word	0x08008531
 8008410:	08008583 	.word	0x08008583
 8008414:	080085a5 	.word	0x080085a5
 8008418:	080085e1 	.word	0x080085e1
 800841c:	08008607 	.word	0x08008607
 8008420:	08008645 	.word	0x08008645
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f103 0110 	add.w	r1, r3, #16
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	795b      	ldrb	r3, [r3, #5]
 800842e:	461a      	mov	r2, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f943 	bl	80086bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	761a      	strb	r2, [r3, #24]
      break;
 800843c:	e139      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	795b      	ldrb	r3, [r3, #5]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fcc5 	bl	8008dd4 <USBH_LL_GetURBState>
 800844a:	4603      	mov	r3, r0
 800844c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d11e      	bne.n	8008492 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7c1b      	ldrb	r3, [r3, #16]
 8008458:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800845c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8adb      	ldrh	r3, [r3, #22]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008466:	7b7b      	ldrb	r3, [r7, #13]
 8008468:	2b80      	cmp	r3, #128	@ 0x80
 800846a:	d103      	bne.n	8008474 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2203      	movs	r2, #3
 8008470:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008472:	e115      	b.n	80086a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2205      	movs	r2, #5
 8008478:	761a      	strb	r2, [r3, #24]
      break;
 800847a:	e111      	b.n	80086a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800847c:	7b7b      	ldrb	r3, [r7, #13]
 800847e:	2b80      	cmp	r3, #128	@ 0x80
 8008480:	d103      	bne.n	800848a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2209      	movs	r2, #9
 8008486:	761a      	strb	r2, [r3, #24]
      break;
 8008488:	e10a      	b.n	80086a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2207      	movs	r2, #7
 800848e:	761a      	strb	r2, [r3, #24]
      break;
 8008490:	e106      	b.n	80086a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b04      	cmp	r3, #4
 8008496:	d003      	beq.n	80084a0 <USBH_HandleControl+0xcc>
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b02      	cmp	r3, #2
 800849c:	f040 8100 	bne.w	80086a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	220b      	movs	r2, #11
 80084a4:	761a      	strb	r2, [r3, #24]
      break;
 80084a6:	e0fb      	b.n	80086a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	899a      	ldrh	r2, [r3, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	791b      	ldrb	r3, [r3, #4]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f93a 	bl	800873a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2204      	movs	r2, #4
 80084ca:	761a      	strb	r2, [r3, #24]
      break;
 80084cc:	e0f1      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	791b      	ldrb	r3, [r3, #4]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc7d 	bl	8008dd4 <USBH_LL_GetURBState>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d102      	bne.n	80084ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2209      	movs	r2, #9
 80084e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b05      	cmp	r3, #5
 80084ee:	d102      	bne.n	80084f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084f0:	2303      	movs	r3, #3
 80084f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f4:	e0d6      	b.n	80086a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	f040 80d3 	bne.w	80086a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	220b      	movs	r2, #11
 8008502:	761a      	strb	r2, [r3, #24]
      break;
 8008504:	e0ce      	b.n	80086a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6899      	ldr	r1, [r3, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	899a      	ldrh	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	795b      	ldrb	r3, [r3, #5]
 8008512:	2001      	movs	r0, #1
 8008514:	9000      	str	r0, [sp, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8ea 	bl	80086f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008522:	b29a      	uxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2206      	movs	r2, #6
 800852c:	761a      	strb	r2, [r3, #24]
      break;
 800852e:	e0c0      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	795b      	ldrb	r3, [r3, #5]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc4c 	bl	8008dd4 <USBH_LL_GetURBState>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d103      	bne.n	800854e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2207      	movs	r2, #7
 800854a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800854c:	e0ac      	b.n	80086a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	2b05      	cmp	r3, #5
 8008552:	d105      	bne.n	8008560 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	220c      	movs	r2, #12
 8008558:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800855a:	2303      	movs	r3, #3
 800855c:	73fb      	strb	r3, [r7, #15]
      break;
 800855e:	e0a3      	b.n	80086a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d103      	bne.n	800856e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2205      	movs	r2, #5
 800856a:	761a      	strb	r2, [r3, #24]
      break;
 800856c:	e09c      	b.n	80086a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b04      	cmp	r3, #4
 8008572:	f040 8099 	bne.w	80086a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	220b      	movs	r2, #11
 800857a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800857c:	2302      	movs	r3, #2
 800857e:	73fb      	strb	r3, [r7, #15]
      break;
 8008580:	e092      	b.n	80086a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	791b      	ldrb	r3, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8d5 	bl	800873a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008596:	b29a      	uxth	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2208      	movs	r2, #8
 80085a0:	761a      	strb	r2, [r3, #24]

      break;
 80085a2:	e086      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	791b      	ldrb	r3, [r3, #4]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fc12 	bl	8008dd4 <USBH_LL_GetURBState>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d105      	bne.n	80085c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	220d      	movs	r2, #13
 80085be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085c4:	e072      	b.n	80086ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d103      	bne.n	80085d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	220b      	movs	r2, #11
 80085d0:	761a      	strb	r2, [r3, #24]
      break;
 80085d2:	e06b      	b.n	80086ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d168      	bne.n	80086ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
      break;
 80085de:	e065      	b.n	80086ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	795b      	ldrb	r3, [r3, #5]
 80085e4:	2201      	movs	r2, #1
 80085e6:	9200      	str	r2, [sp, #0]
 80085e8:	2200      	movs	r2, #0
 80085ea:	2100      	movs	r1, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f87f 	bl	80086f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	220a      	movs	r2, #10
 8008602:	761a      	strb	r2, [r3, #24]
      break;
 8008604:	e055      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	795b      	ldrb	r3, [r3, #5]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fbe1 	bl	8008dd4 <USBH_LL_GetURBState>
 8008612:	4603      	mov	r3, r0
 8008614:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d105      	bne.n	8008628 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	220d      	movs	r2, #13
 8008624:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008626:	e043      	b.n	80086b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d103      	bne.n	8008636 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2209      	movs	r2, #9
 8008632:	761a      	strb	r2, [r3, #24]
      break;
 8008634:	e03c      	b.n	80086b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d139      	bne.n	80086b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	220b      	movs	r2, #11
 8008640:	761a      	strb	r2, [r3, #24]
      break;
 8008642:	e035      	b.n	80086b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7e5b      	ldrb	r3, [r3, #25]
 8008648:	3301      	adds	r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	765a      	strb	r2, [r3, #25]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7e5b      	ldrb	r3, [r3, #25]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d806      	bhi.n	8008666 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008664:	e025      	b.n	80086b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800866c:	2106      	movs	r1, #6
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	795b      	ldrb	r3, [r3, #5]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f90c 	bl	800889c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	791b      	ldrb	r3, [r3, #4]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f906 	bl	800889c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008696:	2302      	movs	r3, #2
 8008698:	73fb      	strb	r3, [r7, #15]
      break;
 800869a:	e00a      	b.n	80086b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800869c:	bf00      	nop
 800869e:	e008      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086a0:	bf00      	nop
 80086a2:	e006      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086a4:	bf00      	nop
 80086a6:	e004      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086a8:	bf00      	nop
 80086aa:	e002      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086b0:	bf00      	nop
  }

  return status;
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ca:	79f9      	ldrb	r1, [r7, #7]
 80086cc:	2300      	movs	r3, #0
 80086ce:	9303      	str	r3, [sp, #12]
 80086d0:	2308      	movs	r3, #8
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	2300      	movs	r3, #0
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	2300      	movs	r3, #0
 80086de:	2200      	movs	r2, #0
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fb46 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4611      	mov	r1, r2
 80086fc:	461a      	mov	r2, r3
 80086fe:	460b      	mov	r3, r1
 8008700:	80fb      	strh	r3, [r7, #6]
 8008702:	4613      	mov	r3, r2
 8008704:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008714:	7979      	ldrb	r1, [r7, #5]
 8008716:	7e3b      	ldrb	r3, [r7, #24]
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	2301      	movs	r3, #1
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	2200      	movs	r2, #0
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fb21 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b088      	sub	sp, #32
 800873e:	af04      	add	r7, sp, #16
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	4611      	mov	r1, r2
 8008746:	461a      	mov	r2, r3
 8008748:	460b      	mov	r3, r1
 800874a:	80fb      	strh	r3, [r7, #6]
 800874c:	4613      	mov	r3, r2
 800874e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008750:	7979      	ldrb	r1, [r7, #5]
 8008752:	2300      	movs	r3, #0
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2301      	movs	r3, #1
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	2201      	movs	r2, #1
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fb03 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800876c:	2300      	movs	r3, #0

}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af04      	add	r7, sp, #16
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4611      	mov	r1, r2
 8008782:	461a      	mov	r2, r3
 8008784:	460b      	mov	r3, r1
 8008786:	80fb      	strh	r3, [r7, #6]
 8008788:	4613      	mov	r3, r2
 800878a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800879a:	7979      	ldrb	r1, [r7, #5]
 800879c:	7e3b      	ldrb	r3, [r7, #24]
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	2301      	movs	r3, #1
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	2302      	movs	r3, #2
 80087ae:	2200      	movs	r2, #0
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fade 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af04      	add	r7, sp, #16
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4611      	mov	r1, r2
 80087cc:	461a      	mov	r2, r3
 80087ce:	460b      	mov	r3, r1
 80087d0:	80fb      	strh	r3, [r7, #6]
 80087d2:	4613      	mov	r3, r2
 80087d4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087d6:	7979      	ldrb	r1, [r7, #5]
 80087d8:	2300      	movs	r3, #0
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2301      	movs	r3, #1
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2302      	movs	r3, #2
 80087ea:	2201      	movs	r2, #1
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fac0 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af04      	add	r7, sp, #16
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	4603      	mov	r3, r0
 800880c:	70fb      	strb	r3, [r7, #3]
 800880e:	460b      	mov	r3, r1
 8008810:	70bb      	strb	r3, [r7, #2]
 8008812:	4613      	mov	r3, r2
 8008814:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008816:	7878      	ldrb	r0, [r7, #1]
 8008818:	78ba      	ldrb	r2, [r7, #2]
 800881a:	78f9      	ldrb	r1, [r7, #3]
 800881c:	8b3b      	ldrh	r3, [r7, #24]
 800881e:	9302      	str	r3, [sp, #8]
 8008820:	7d3b      	ldrb	r3, [r7, #20]
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	7c3b      	ldrb	r3, [r7, #16]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4603      	mov	r3, r0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa53 	bl	8008cd6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa72 	bl	8008d34 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f836 	bl	80088d8 <USBH_GetFreePipe>
 800886c:	4603      	mov	r3, r0
 800886e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008870:	89fb      	ldrh	r3, [r7, #14]
 8008872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008876:	4293      	cmp	r3, r2
 8008878:	d00a      	beq.n	8008890 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	89fb      	ldrh	r3, [r7, #14]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	33e0      	adds	r3, #224	@ 0xe0
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008890:	89fb      	ldrh	r3, [r7, #14]
 8008892:	b2db      	uxtb	r3, r3
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d80d      	bhi.n	80088ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	33e0      	adds	r3, #224	@ 0xe0
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	33e0      	adds	r3, #224	@ 0xe0
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e00f      	b.n	800890a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	33e0      	adds	r3, #224	@ 0xe0
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d102      	bne.n	8008904 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	b29b      	uxth	r3, r3
 8008902:	e007      	b.n	8008914 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	3301      	adds	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b0f      	cmp	r3, #15
 800890e:	d9ec      	bls.n	80088ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008910:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008924:	2201      	movs	r2, #1
 8008926:	490e      	ldr	r1, [pc, #56]	@ (8008960 <MX_USB_HOST_Init+0x40>)
 8008928:	480e      	ldr	r0, [pc, #56]	@ (8008964 <MX_USB_HOST_Init+0x44>)
 800892a:	f7fe fbb7 	bl	800709c <USBH_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008934:	f7f8 f904 	bl	8000b40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008938:	490b      	ldr	r1, [pc, #44]	@ (8008968 <MX_USB_HOST_Init+0x48>)
 800893a:	480a      	ldr	r0, [pc, #40]	@ (8008964 <MX_USB_HOST_Init+0x44>)
 800893c:	f7fe fc3c 	bl	80071b8 <USBH_RegisterClass>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008946:	f7f8 f8fb 	bl	8000b40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800894a:	4806      	ldr	r0, [pc, #24]	@ (8008964 <MX_USB_HOST_Init+0x44>)
 800894c:	f7fe fcc0 	bl	80072d0 <USBH_Start>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008956:	f7f8 f8f3 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800895a:	bf00      	nop
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	08008981 	.word	0x08008981
 8008964:	20000250 	.word	0x20000250
 8008968:	2000000c 	.word	0x2000000c

0800896c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008970:	4802      	ldr	r0, [pc, #8]	@ (800897c <MX_USB_HOST_Process+0x10>)
 8008972:	f7fe fcbd 	bl	80072f0 <USBH_Process>
}
 8008976:	bf00      	nop
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000250 	.word	0x20000250

08008980 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	3b01      	subs	r3, #1
 8008990:	2b04      	cmp	r3, #4
 8008992:	d819      	bhi.n	80089c8 <USBH_UserProcess+0x48>
 8008994:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <USBH_UserProcess+0x1c>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	080089b9 	.word	0x080089b9
 80089a4:	080089c9 	.word	0x080089c9
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089b1 	.word	0x080089b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089b0:	4b09      	ldr	r3, [pc, #36]	@ (80089d8 <USBH_UserProcess+0x58>)
 80089b2:	2203      	movs	r2, #3
 80089b4:	701a      	strb	r2, [r3, #0]
  break;
 80089b6:	e008      	b.n	80089ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089b8:	4b07      	ldr	r3, [pc, #28]	@ (80089d8 <USBH_UserProcess+0x58>)
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
  break;
 80089be:	e004      	b.n	80089ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089c0:	4b05      	ldr	r3, [pc, #20]	@ (80089d8 <USBH_UserProcess+0x58>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
  break;
 80089c6:	e000      	b.n	80089ca <USBH_UserProcess+0x4a>

  default:
  break;
 80089c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000628 	.word	0x20000628

080089dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	@ 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	605a      	str	r2, [r3, #4]
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	60da      	str	r2, [r3, #12]
 80089f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089fc:	d147      	bne.n	8008a8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
 8008a02:	4b25      	ldr	r3, [pc, #148]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a06:	4a24      	ldr	r2, [pc, #144]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a0e:	4b22      	ldr	r3, [pc, #136]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	481b      	ldr	r0, [pc, #108]	@ (8008a9c <HAL_HCD_MspInit+0xc0>)
 8008a30:	f7f9 fd90 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a34:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a42:	2300      	movs	r3, #0
 8008a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a46:	230a      	movs	r3, #10
 8008a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4812      	ldr	r0, [pc, #72]	@ (8008a9c <HAL_HCD_MspInit+0xc0>)
 8008a52:	f7f9 fd7f 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a56:	4b10      	ldr	r3, [pc, #64]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a60:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	4b0c      	ldr	r3, [pc, #48]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a72:	4b09      	ldr	r3, [pc, #36]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	2043      	movs	r0, #67	@ 0x43
 8008a84:	f7f9 fd2f 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a88:	2043      	movs	r0, #67	@ 0x43
 8008a8a:	f7f9 fd48 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3728      	adds	r7, #40	@ 0x28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	40020000 	.word	0x40020000

08008aa0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fff5 	bl	8007a9e <USBH_LL_IncTimer>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff f82d 	bl	8007b2a <USBH_LL_Connect>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff f836 	bl	8007b58 <USBH_LL_Disconnect>
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
 8008b00:	4613      	mov	r3, r2
 8008b02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe ffe7 	bl	8007af2 <USBH_LL_PortEnabled>
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ffe7 	bl	8007b0e <USBH_LL_PortDisabled>
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d12a      	bne.n	8008bb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b5a:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a15      	ldr	r2, [pc, #84]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b66:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b6a:	4b14      	ldr	r3, [pc, #80]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008b70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b72:	4b12      	ldr	r3, [pc, #72]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b74:	2208      	movs	r2, #8
 8008b76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b78:	4b10      	ldr	r3, [pc, #64]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b84:	4b0d      	ldr	r3, [pc, #52]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b86:	2202      	movs	r2, #2
 8008b88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b90:	480a      	ldr	r0, [pc, #40]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b92:	f7f9 fec7 	bl	8002924 <HAL_HCD_Init>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b9c:	f7f7 ffd0 	bl	8000b40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ba0:	4806      	ldr	r0, [pc, #24]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008ba2:	f7fa faaa 	bl	80030fa <HAL_HCD_GetCurrentFrame>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fe ff68 	bl	8007a80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000062c 	.word	0x2000062c

08008bc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fa fa19 	bl	800300e <HAL_HCD_Start>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f95c 	bl	8008ea0 <USBH_Get_USB_Status>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fa fa21 	bl	8003054 <HAL_HCD_Stop>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 f941 	bl	8008ea0 <USBH_Get_USB_Status>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fa fa69 	bl	8003116 <HAL_HCD_GetCurrentSpeed>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d00c      	beq.n	8008c64 <USBH_LL_GetSpeed+0x38>
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d80d      	bhi.n	8008c6a <USBH_LL_GetSpeed+0x3e>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <USBH_LL_GetSpeed+0x2c>
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d003      	beq.n	8008c5e <USBH_LL_GetSpeed+0x32>
 8008c56:	e008      	b.n	8008c6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	e008      	b.n	8008c70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	73fb      	strb	r3, [r7, #15]
    break;
 8008c62:	e005      	b.n	8008c70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c64:	2302      	movs	r3, #2
 8008c66:	73fb      	strb	r3, [r7, #15]
    break;
 8008c68:	e002      	b.n	8008c70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6e:	bf00      	nop
  }
  return  speed;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fa f9fc 	bl	800308e <HAL_HCD_ResetPort>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f8ff 	bl	8008ea0 <USBH_Get_USB_Status>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fa fa03 	bl	80030d2 <HAL_HCD_HC_GetXferCount>
 8008ccc:	4603      	mov	r3, r0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cd6:	b590      	push	{r4, r7, lr}
 8008cd8:	b089      	sub	sp, #36	@ 0x24
 8008cda:	af04      	add	r7, sp, #16
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	70fb      	strb	r3, [r7, #3]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70bb      	strb	r3, [r7, #2]
 8008cec:	4613      	mov	r3, r2
 8008cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008cfe:	787c      	ldrb	r4, [r7, #1]
 8008d00:	78ba      	ldrb	r2, [r7, #2]
 8008d02:	78f9      	ldrb	r1, [r7, #3]
 8008d04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008d06:	9302      	str	r3, [sp, #8]
 8008d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4623      	mov	r3, r4
 8008d16:	f7f9 fe67 	bl	80029e8 <HAL_HCD_HC_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f8bd 	bl	8008ea0 <USBH_Get_USB_Status>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}

08008d34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f9 fed7 	bl	8002b06 <HAL_HCD_HC_Halt>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f89e 	bl	8008ea0 <USBH_Get_USB_Status>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d72:	b590      	push	{r4, r7, lr}
 8008d74:	b089      	sub	sp, #36	@ 0x24
 8008d76:	af04      	add	r7, sp, #16
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4603      	mov	r3, r0
 8008d82:	70fb      	strb	r3, [r7, #3]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70bb      	strb	r3, [r7, #2]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008d9a:	787c      	ldrb	r4, [r7, #1]
 8008d9c:	78ba      	ldrb	r2, [r7, #2]
 8008d9e:	78f9      	ldrb	r1, [r7, #3]
 8008da0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008da8:	9302      	str	r3, [sp, #8]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	4623      	mov	r3, r4
 8008db6:	f7f9 fec9 	bl	8002b4c <HAL_HCD_HC_SubmitRequest>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f86d 	bl	8008ea0 <USBH_Get_USB_Status>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd90      	pop	{r4, r7, pc}

08008dd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fa f95d 	bl	80030aa <HAL_HCD_HC_GetURBState>
 8008df0:	4603      	mov	r3, r0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d103      	bne.n	8008e18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f870 	bl	8008ef8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e18:	20c8      	movs	r0, #200	@ 0xc8
 8008e1a:	f7f8 f9a1 	bl	8001160 <HAL_Delay>
  return USBH_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
 8008e34:	4613      	mov	r3, r2
 8008e36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	212c      	movs	r1, #44	@ 0x2c
 8008e46:	fb01 f303 	mul.w	r3, r1, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	333b      	adds	r3, #59	@ 0x3b
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d009      	beq.n	8008e68 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	212c      	movs	r1, #44	@ 0x2c
 8008e5a:	fb01 f303 	mul.w	r3, r1, r3
 8008e5e:	4413      	add	r3, r2
 8008e60:	3354      	adds	r3, #84	@ 0x54
 8008e62:	78ba      	ldrb	r2, [r7, #2]
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e008      	b.n	8008e7a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	212c      	movs	r1, #44	@ 0x2c
 8008e6e:	fb01 f303 	mul.w	r3, r1, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	3355      	adds	r3, #85	@ 0x55
 8008e76:	78ba      	ldrb	r2, [r7, #2]
 8008e78:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7f8 f965 	bl	8001160 <HAL_Delay>
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	d817      	bhi.n	8008ee4 <USBH_Get_USB_Status+0x44>
 8008eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <USBH_Get_USB_Status+0x1c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ecd 	.word	0x08008ecd
 8008ec0:	08008ed3 	.word	0x08008ed3
 8008ec4:	08008ed9 	.word	0x08008ed9
 8008ec8:	08008edf 	.word	0x08008edf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed0:	e00b      	b.n	8008eea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed6:	e008      	b.n	8008eea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e005      	b.n	8008eea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e002      	b.n	8008eea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	bf00      	nop
  }
  return usb_status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e001      	b.n	8008f16 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f12:	2301      	movs	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4803      	ldr	r0, [pc, #12]	@ (8008f2c <MX_DriverVbusFS+0x34>)
 8008f1e:	f7f9 fcb5 	bl	800288c <HAL_GPIO_WritePin>
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	40020800 	.word	0x40020800

08008f30 <malloc>:
 8008f30:	4b02      	ldr	r3, [pc, #8]	@ (8008f3c <malloc+0xc>)
 8008f32:	4601      	mov	r1, r0
 8008f34:	6818      	ldr	r0, [r3, #0]
 8008f36:	f000 b82d 	b.w	8008f94 <_malloc_r>
 8008f3a:	bf00      	nop
 8008f3c:	2000002c 	.word	0x2000002c

08008f40 <free>:
 8008f40:	4b02      	ldr	r3, [pc, #8]	@ (8008f4c <free+0xc>)
 8008f42:	4601      	mov	r1, r0
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	f000 b8f5 	b.w	8009134 <_free_r>
 8008f4a:	bf00      	nop
 8008f4c:	2000002c 	.word	0x2000002c

08008f50 <sbrk_aligned>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4e0f      	ldr	r6, [pc, #60]	@ (8008f90 <sbrk_aligned+0x40>)
 8008f54:	460c      	mov	r4, r1
 8008f56:	6831      	ldr	r1, [r6, #0]
 8008f58:	4605      	mov	r5, r0
 8008f5a:	b911      	cbnz	r1, 8008f62 <sbrk_aligned+0x12>
 8008f5c:	f000 f8ae 	bl	80090bc <_sbrk_r>
 8008f60:	6030      	str	r0, [r6, #0]
 8008f62:	4621      	mov	r1, r4
 8008f64:	4628      	mov	r0, r5
 8008f66:	f000 f8a9 	bl	80090bc <_sbrk_r>
 8008f6a:	1c43      	adds	r3, r0, #1
 8008f6c:	d103      	bne.n	8008f76 <sbrk_aligned+0x26>
 8008f6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f72:	4620      	mov	r0, r4
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	1cc4      	adds	r4, r0, #3
 8008f78:	f024 0403 	bic.w	r4, r4, #3
 8008f7c:	42a0      	cmp	r0, r4
 8008f7e:	d0f8      	beq.n	8008f72 <sbrk_aligned+0x22>
 8008f80:	1a21      	subs	r1, r4, r0
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 f89a 	bl	80090bc <_sbrk_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d1f2      	bne.n	8008f72 <sbrk_aligned+0x22>
 8008f8c:	e7ef      	b.n	8008f6e <sbrk_aligned+0x1e>
 8008f8e:	bf00      	nop
 8008f90:	20000930 	.word	0x20000930

08008f94 <_malloc_r>:
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	1ccd      	adds	r5, r1, #3
 8008f9a:	f025 0503 	bic.w	r5, r5, #3
 8008f9e:	3508      	adds	r5, #8
 8008fa0:	2d0c      	cmp	r5, #12
 8008fa2:	bf38      	it	cc
 8008fa4:	250c      	movcc	r5, #12
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	4606      	mov	r6, r0
 8008faa:	db01      	blt.n	8008fb0 <_malloc_r+0x1c>
 8008fac:	42a9      	cmp	r1, r5
 8008fae:	d904      	bls.n	8008fba <_malloc_r+0x26>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	6033      	str	r3, [r6, #0]
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009090 <_malloc_r+0xfc>
 8008fbe:	f000 f869 	bl	8009094 <__malloc_lock>
 8008fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc6:	461c      	mov	r4, r3
 8008fc8:	bb44      	cbnz	r4, 800901c <_malloc_r+0x88>
 8008fca:	4629      	mov	r1, r5
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7ff ffbf 	bl	8008f50 <sbrk_aligned>
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	d158      	bne.n	800908a <_malloc_r+0xf6>
 8008fd8:	f8d8 4000 	ldr.w	r4, [r8]
 8008fdc:	4627      	mov	r7, r4
 8008fde:	2f00      	cmp	r7, #0
 8008fe0:	d143      	bne.n	800906a <_malloc_r+0xd6>
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	d04b      	beq.n	800907e <_malloc_r+0xea>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	4639      	mov	r1, r7
 8008fea:	4630      	mov	r0, r6
 8008fec:	eb04 0903 	add.w	r9, r4, r3
 8008ff0:	f000 f864 	bl	80090bc <_sbrk_r>
 8008ff4:	4581      	cmp	r9, r0
 8008ff6:	d142      	bne.n	800907e <_malloc_r+0xea>
 8008ff8:	6821      	ldr	r1, [r4, #0]
 8008ffa:	1a6d      	subs	r5, r5, r1
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7ff ffa6 	bl	8008f50 <sbrk_aligned>
 8009004:	3001      	adds	r0, #1
 8009006:	d03a      	beq.n	800907e <_malloc_r+0xea>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	442b      	add	r3, r5
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	f8d8 3000 	ldr.w	r3, [r8]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	bb62      	cbnz	r2, 8009070 <_malloc_r+0xdc>
 8009016:	f8c8 7000 	str.w	r7, [r8]
 800901a:	e00f      	b.n	800903c <_malloc_r+0xa8>
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	1b52      	subs	r2, r2, r5
 8009020:	d420      	bmi.n	8009064 <_malloc_r+0xd0>
 8009022:	2a0b      	cmp	r2, #11
 8009024:	d917      	bls.n	8009056 <_malloc_r+0xc2>
 8009026:	1961      	adds	r1, r4, r5
 8009028:	42a3      	cmp	r3, r4
 800902a:	6025      	str	r5, [r4, #0]
 800902c:	bf18      	it	ne
 800902e:	6059      	strne	r1, [r3, #4]
 8009030:	6863      	ldr	r3, [r4, #4]
 8009032:	bf08      	it	eq
 8009034:	f8c8 1000 	streq.w	r1, [r8]
 8009038:	5162      	str	r2, [r4, r5]
 800903a:	604b      	str	r3, [r1, #4]
 800903c:	4630      	mov	r0, r6
 800903e:	f000 f82f 	bl	80090a0 <__malloc_unlock>
 8009042:	f104 000b 	add.w	r0, r4, #11
 8009046:	1d23      	adds	r3, r4, #4
 8009048:	f020 0007 	bic.w	r0, r0, #7
 800904c:	1ac2      	subs	r2, r0, r3
 800904e:	bf1c      	itt	ne
 8009050:	1a1b      	subne	r3, r3, r0
 8009052:	50a3      	strne	r3, [r4, r2]
 8009054:	e7af      	b.n	8008fb6 <_malloc_r+0x22>
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	42a3      	cmp	r3, r4
 800905a:	bf0c      	ite	eq
 800905c:	f8c8 2000 	streq.w	r2, [r8]
 8009060:	605a      	strne	r2, [r3, #4]
 8009062:	e7eb      	b.n	800903c <_malloc_r+0xa8>
 8009064:	4623      	mov	r3, r4
 8009066:	6864      	ldr	r4, [r4, #4]
 8009068:	e7ae      	b.n	8008fc8 <_malloc_r+0x34>
 800906a:	463c      	mov	r4, r7
 800906c:	687f      	ldr	r7, [r7, #4]
 800906e:	e7b6      	b.n	8008fde <_malloc_r+0x4a>
 8009070:	461a      	mov	r2, r3
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	42a3      	cmp	r3, r4
 8009076:	d1fb      	bne.n	8009070 <_malloc_r+0xdc>
 8009078:	2300      	movs	r3, #0
 800907a:	6053      	str	r3, [r2, #4]
 800907c:	e7de      	b.n	800903c <_malloc_r+0xa8>
 800907e:	230c      	movs	r3, #12
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	4630      	mov	r0, r6
 8009084:	f000 f80c 	bl	80090a0 <__malloc_unlock>
 8009088:	e794      	b.n	8008fb4 <_malloc_r+0x20>
 800908a:	6005      	str	r5, [r0, #0]
 800908c:	e7d6      	b.n	800903c <_malloc_r+0xa8>
 800908e:	bf00      	nop
 8009090:	20000934 	.word	0x20000934

08009094 <__malloc_lock>:
 8009094:	4801      	ldr	r0, [pc, #4]	@ (800909c <__malloc_lock+0x8>)
 8009096:	f000 b84b 	b.w	8009130 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20000a74 	.word	0x20000a74

080090a0 <__malloc_unlock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	@ (80090a8 <__malloc_unlock+0x8>)
 80090a2:	f000 b846 	b.w	8009132 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000a74 	.word	0x20000a74

080090ac <memset>:
 80090ac:	4402      	add	r2, r0
 80090ae:	4603      	mov	r3, r0
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d100      	bne.n	80090b6 <memset+0xa>
 80090b4:	4770      	bx	lr
 80090b6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ba:	e7f9      	b.n	80090b0 <memset+0x4>

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	@ (80090d8 <_sbrk_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f7 ff66 	bl	8000f98 <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000a70 	.word	0x20000a70

080090dc <__errno>:
 80090dc:	4b01      	ldr	r3, [pc, #4]	@ (80090e4 <__errno+0x8>)
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	2000002c 	.word	0x2000002c

080090e8 <__libc_init_array>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009120 <__libc_init_array+0x38>)
 80090ec:	4c0d      	ldr	r4, [pc, #52]	@ (8009124 <__libc_init_array+0x3c>)
 80090ee:	1b64      	subs	r4, r4, r5
 80090f0:	10a4      	asrs	r4, r4, #2
 80090f2:	2600      	movs	r6, #0
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	d109      	bne.n	800910c <__libc_init_array+0x24>
 80090f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009128 <__libc_init_array+0x40>)
 80090fa:	4c0c      	ldr	r4, [pc, #48]	@ (800912c <__libc_init_array+0x44>)
 80090fc:	f000 f864 	bl	80091c8 <_init>
 8009100:	1b64      	subs	r4, r4, r5
 8009102:	10a4      	asrs	r4, r4, #2
 8009104:	2600      	movs	r6, #0
 8009106:	42a6      	cmp	r6, r4
 8009108:	d105      	bne.n	8009116 <__libc_init_array+0x2e>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009110:	4798      	blx	r3
 8009112:	3601      	adds	r6, #1
 8009114:	e7ee      	b.n	80090f4 <__libc_init_array+0xc>
 8009116:	f855 3b04 	ldr.w	r3, [r5], #4
 800911a:	4798      	blx	r3
 800911c:	3601      	adds	r6, #1
 800911e:	e7f2      	b.n	8009106 <__libc_init_array+0x1e>
 8009120:	08009204 	.word	0x08009204
 8009124:	08009204 	.word	0x08009204
 8009128:	08009204 	.word	0x08009204
 800912c:	08009208 	.word	0x08009208

08009130 <__retarget_lock_acquire_recursive>:
 8009130:	4770      	bx	lr

08009132 <__retarget_lock_release_recursive>:
 8009132:	4770      	bx	lr

08009134 <_free_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4605      	mov	r5, r0
 8009138:	2900      	cmp	r1, #0
 800913a:	d041      	beq.n	80091c0 <_free_r+0x8c>
 800913c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009140:	1f0c      	subs	r4, r1, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	bfb8      	it	lt
 8009146:	18e4      	addlt	r4, r4, r3
 8009148:	f7ff ffa4 	bl	8009094 <__malloc_lock>
 800914c:	4a1d      	ldr	r2, [pc, #116]	@ (80091c4 <_free_r+0x90>)
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	b933      	cbnz	r3, 8009160 <_free_r+0x2c>
 8009152:	6063      	str	r3, [r4, #4]
 8009154:	6014      	str	r4, [r2, #0]
 8009156:	4628      	mov	r0, r5
 8009158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800915c:	f7ff bfa0 	b.w	80090a0 <__malloc_unlock>
 8009160:	42a3      	cmp	r3, r4
 8009162:	d908      	bls.n	8009176 <_free_r+0x42>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	1821      	adds	r1, r4, r0
 8009168:	428b      	cmp	r3, r1
 800916a:	bf01      	itttt	eq
 800916c:	6819      	ldreq	r1, [r3, #0]
 800916e:	685b      	ldreq	r3, [r3, #4]
 8009170:	1809      	addeq	r1, r1, r0
 8009172:	6021      	streq	r1, [r4, #0]
 8009174:	e7ed      	b.n	8009152 <_free_r+0x1e>
 8009176:	461a      	mov	r2, r3
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	b10b      	cbz	r3, 8009180 <_free_r+0x4c>
 800917c:	42a3      	cmp	r3, r4
 800917e:	d9fa      	bls.n	8009176 <_free_r+0x42>
 8009180:	6811      	ldr	r1, [r2, #0]
 8009182:	1850      	adds	r0, r2, r1
 8009184:	42a0      	cmp	r0, r4
 8009186:	d10b      	bne.n	80091a0 <_free_r+0x6c>
 8009188:	6820      	ldr	r0, [r4, #0]
 800918a:	4401      	add	r1, r0
 800918c:	1850      	adds	r0, r2, r1
 800918e:	4283      	cmp	r3, r0
 8009190:	6011      	str	r1, [r2, #0]
 8009192:	d1e0      	bne.n	8009156 <_free_r+0x22>
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	6053      	str	r3, [r2, #4]
 800919a:	4408      	add	r0, r1
 800919c:	6010      	str	r0, [r2, #0]
 800919e:	e7da      	b.n	8009156 <_free_r+0x22>
 80091a0:	d902      	bls.n	80091a8 <_free_r+0x74>
 80091a2:	230c      	movs	r3, #12
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	e7d6      	b.n	8009156 <_free_r+0x22>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	1821      	adds	r1, r4, r0
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf04      	itt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	6063      	str	r3, [r4, #4]
 80091b6:	bf04      	itt	eq
 80091b8:	1809      	addeq	r1, r1, r0
 80091ba:	6021      	streq	r1, [r4, #0]
 80091bc:	6054      	str	r4, [r2, #4]
 80091be:	e7ca      	b.n	8009156 <_free_r+0x22>
 80091c0:	bd38      	pop	{r3, r4, r5, pc}
 80091c2:	bf00      	nop
 80091c4:	20000934 	.word	0x20000934

080091c8 <_init>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr

080091d4 <_fini>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	bf00      	nop
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr
