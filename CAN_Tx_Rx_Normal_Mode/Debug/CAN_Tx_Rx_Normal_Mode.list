
CAN_Tx_Rx_Normal_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008bb8  08008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd4  08008bd4  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd4  08008bd4  00009bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bdc  08008bdc  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bdc  08008bdc  00009bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be0  08008be0  00009be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008be4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          000009b4  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a30  20000a30  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a80  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b8d  00000000  00000000  00020b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  000246c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e15  00000000  00000000  00025940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a6f  00000000  00000000  00026755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018109  00000000  00000000  0004a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd9d2  00000000  00000000  000622cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012fc9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005074  00000000  00000000  0012fce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00134d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ba0 	.word	0x08008ba0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008ba0 	.word	0x08008ba0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_GPIO_EXTI_Callback>:

uint32_t TxMailbox;
int datacheck=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0)
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d10b      	bne.n	80004e0 <HAL_GPIO_EXTI_Callback+0x28>
	{
		TxData[0]=100;
 80004c8:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80004ca:	2264      	movs	r2, #100	@ 0x64
 80004cc:	701a      	strb	r2, [r3, #0]
		TxData[1]=10;
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80004d0:	220a      	movs	r2, #10
 80004d2:	705a      	strb	r2, [r3, #1]

		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80004d4:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <HAL_GPIO_EXTI_Callback+0x34>)
 80004d6:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80004d8:	4905      	ldr	r1, [pc, #20]	@ (80004f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80004da:	4806      	ldr	r0, [pc, #24]	@ (80004f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004dc:	f000 ffd2 	bl	8001484 <HAL_CAN_AddTxMessage>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200001e8 	.word	0x200001e8
 80004ec:	200001f8 	.word	0x200001f8
 80004f0:	200001b4 	.word	0x200001b4
 80004f4:	20000098 	.word	0x20000098

080004f8 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000500:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <HAL_CAN_RxFifo0FullCallback+0x2c>)
 8000502:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <HAL_CAN_RxFifo0FullCallback+0x30>)
 8000504:	2100      	movs	r1, #0
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f001 f897 	bl	800163a <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC==2)
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <HAL_CAN_RxFifo0FullCallback+0x30>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d102      	bne.n	800051a <HAL_CAN_RxFifo0FullCallback+0x22>
	{
		datacheck=1;
 8000514:	4b05      	ldr	r3, [pc, #20]	@ (800052c <HAL_CAN_RxFifo0FullCallback+0x34>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
	}
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200001f0 	.word	0x200001f0
 8000528:	200001cc 	.word	0x200001cc
 800052c:	200001fc 	.word	0x200001fc

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fcef 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f84b 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f99b 	bl	8000878 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f905 	bl	8000750 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000546:	f000 f931 	bl	80007ac <MX_I2S3_Init>
  MX_SPI1_Init();
 800054a:	f000 f95f 	bl	800080c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800054e:	f007 fed3 	bl	80082f8 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000552:	f000 f8a9 	bl	80006a8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1); // Start CAN
 8000556:	481a      	ldr	r0, [pc, #104]	@ (80005c0 <main+0x90>)
 8000558:	f000 ff50 	bl	80013fc <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800055c:	2102      	movs	r1, #2
 800055e:	4818      	ldr	r0, [pc, #96]	@ (80005c0 <main+0x90>)
 8000560:	f001 f97d 	bl	800185e <HAL_CAN_ActivateNotification>

  TxHeader.DLC=2;  // Data lendgth
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <main+0x94>)
 8000566:	2202      	movs	r2, #2
 8000568:	611a      	str	r2, [r3, #16]
  TxHeader.IDE=CAN_ID_STD;
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <main+0x94>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <main+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  TxHeader.StdId=0x446;  // ID of this controller
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <main+0x94>)
 8000578:	f240 4246 	movw	r2, #1094	@ 0x446
 800057c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057e:	f007 fee1 	bl	8008344 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(datacheck)
 8000582:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <main+0x98>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <main+0x4e>
    {
    	for(int i=0; i<RxData[1]; i++)
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00c      	b.n	80005aa <main+0x7a>
    	{
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <main+0x9c>)
 8000596:	f001 fe7e 	bl	8002296 <HAL_GPIO_TogglePin>
    	HAL_Delay(RxData[0]);
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <main+0xa0>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fd2c 	bl	8000ffc <HAL_Delay>
    	for(int i=0; i<RxData[1]; i++)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <main+0xa0>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4293      	cmp	r3, r2
 80005b4:	dbec      	blt.n	8000590 <main+0x60>
    	}
    	datacheck=0;
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <main+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
    MX_USB_HOST_Process();
 80005bc:	e7df      	b.n	800057e <main+0x4e>
 80005be:	bf00      	nop
 80005c0:	20000098 	.word	0x20000098
 80005c4:	200001b4 	.word	0x200001b4
 80005c8:	200001fc 	.word	0x200001fc
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	200001f0 	.word	0x200001f0

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f008 fa4e 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000648:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f004 f83c 	bl	80046d8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000666:	f000 fa0d 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fa9d 	bl	8004bc8 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000694:	f000 f9f6 	bl	8000a84 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	@ 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <MX_CAN1_Init+0xa4>)
 80006b2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006b6:	2215      	movs	r2, #21
 80006b8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006c6:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006f8:	4813      	ldr	r0, [pc, #76]	@ (8000748 <MX_CAN1_Init+0xa0>)
 80006fa:	f000 fca3 	bl	8001044 <HAL_CAN_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f9be 	bl	8000a84 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank=18;
 800070c:	2312      	movs	r3, #18
 800070e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh=0x103<<5;
 8000714:	f242 0360 	movw	r3, #8288	@ 0x2060
 8000718:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow=0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh=0x103<<5;
 800071e:	f242 0360 	movw	r3, #8288	@ 0x2060
 8000722:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow=0x0000;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank=20;
 8000730:	2314      	movs	r3, #20
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <MX_CAN1_Init+0xa0>)
 800073a:	f000 fd7f 	bl	800123c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000098 	.word	0x20000098
 800074c:	40006400 	.word	0x40006400

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f003 f9bf 	bl	8003b10 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f974 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000c0 	.word	0x200000c0
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007b2:	4a14      	ldr	r2, [pc, #80]	@ (8000804 <MX_I2S3_Init+0x58>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <MX_I2S3_Init+0x5c>)
 80007d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_I2S3_Init+0x54>)
 80007ec:	f003 fad4 	bl	8003d98 <HAL_I2S_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007f6:	f000 f945 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000114 	.word	0x20000114
 8000804:	40003c00 	.word	0x40003c00
 8000808:	00017700 	.word	0x00017700

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_SPI1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_SPI1_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_SPI1_Init+0x64>)
 800085e:	f004 fcff 	bl	8005260 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f90c 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000015c 	.word	0x2000015c
 8000874:	40013000 	.word	0x40013000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b76      	ldr	r3, [pc, #472]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a75      	ldr	r2, [pc, #468]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b73      	ldr	r3, [pc, #460]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b6f      	ldr	r3, [pc, #444]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a6e      	ldr	r2, [pc, #440]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b6c      	ldr	r3, [pc, #432]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b68      	ldr	r3, [pc, #416]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a67      	ldr	r2, [pc, #412]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b65      	ldr	r3, [pc, #404]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b61      	ldr	r3, [pc, #388]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b5a      	ldr	r3, [pc, #360]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a59      	ldr	r2, [pc, #356]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b57      	ldr	r3, [pc, #348]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b53      	ldr	r3, [pc, #332]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a52      	ldr	r2, [pc, #328]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b50      	ldr	r3, [pc, #320]	@ (8000a6c <MX_GPIO_Init+0x1f4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2108      	movs	r1, #8
 800093a:	484d      	ldr	r0, [pc, #308]	@ (8000a70 <MX_GPIO_Init+0x1f8>)
 800093c:	f001 fc92 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <MX_GPIO_Init+0x1fc>)
 8000946:	f001 fc8d 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	2200      	movs	r2, #0
 800094c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000950:	4849      	ldr	r0, [pc, #292]	@ (8000a78 <MX_GPIO_Init+0x200>)
 8000952:	f001 fc87 	bl	8002264 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000956:	2308      	movs	r3, #8
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4840      	ldr	r0, [pc, #256]	@ (8000a70 <MX_GPIO_Init+0x1f8>)
 800096e:	f001 fadd 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x1fc>)
 800098a:	f001 facf 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4832      	ldr	r0, [pc, #200]	@ (8000a74 <MX_GPIO_Init+0x1fc>)
 80009aa:	f001 fabf 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	482e      	ldr	r0, [pc, #184]	@ (8000a7c <MX_GPIO_Init+0x204>)
 80009c4:	f001 fab2 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009c8:	2304      	movs	r3, #4
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <MX_GPIO_Init+0x208>)
 80009dc:	f001 faa6 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4820      	ldr	r0, [pc, #128]	@ (8000a80 <MX_GPIO_Init+0x208>)
 80009fe:	f001 fa95 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a02:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4817      	ldr	r0, [pc, #92]	@ (8000a78 <MX_GPIO_Init+0x200>)
 8000a1c:	f001 fa86 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_GPIO_Init+0x200>)
 8000a34:	f001 fa7a 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <MX_GPIO_Init+0x1f8>)
 8000a4e:	f001 fa6d 	bl	8001f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2006      	movs	r0, #6
 8000a58:	f001 fa31 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5c:	2006      	movs	r0, #6
 8000a5e:	f001 fa4a 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f001 f9ea 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b74 <HAL_CAN_MspInit+0x94>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d133      	bne.n	8000b6a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <HAL_CAN_MspInit+0x98>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b78 <HAL_CAN_MspInit+0x98>)
 8000b0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <HAL_CAN_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_CAN_MspInit+0x98>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <HAL_CAN_MspInit+0x98>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_CAN_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4809      	ldr	r0, [pc, #36]	@ (8000b7c <HAL_CAN_MspInit+0x9c>)
 8000b56:	f001 f9e9 	bl	8001f2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2014      	movs	r0, #20
 8000b60:	f001 f9ad 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b64:	2014      	movs	r0, #20
 8000b66:	f001 f9c6 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	@ 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40006400 	.word	0x40006400
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <HAL_I2C_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12c      	bne.n	8000bfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_I2C_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a17      	ldr	r2, [pc, #92]	@ (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bbe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <HAL_I2C_MspInit+0x8c>)
 8000bdc:	f001 f9a6 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_I2C_MspInit+0x88>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	@ 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40005400 	.word	0x40005400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400

08000c10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	@ 0x38
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a31      	ldr	r2, [pc, #196]	@ (8000d00 <HAL_I2S_MspInit+0xf0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d15a      	bne.n	8000cf6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c44:	23c0      	movs	r3, #192	@ 0xc0
 8000c46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 f9c5 	bl	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c5c:	f7ff ff12 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a26      	ldr	r2, [pc, #152]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c84:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_I2S_MspInit+0xf4>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <HAL_I2S_MspInit+0xf8>)
 8000cd0:	f001 f92c 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cd4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <HAL_I2S_MspInit+0xfc>)
 8000cf2:	f001 f91b 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3738      	adds	r7, #56	@ 0x38
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40003c00 	.word	0x40003c00
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020800 	.word	0x40020800

08000d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_SPI_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d6a:	23e0      	movs	r3, #224	@ 0xe0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_SPI_MspInit+0x8c>)
 8000d86:	f001 f8d1 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f8e1 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f001 fa62 	bl	80022cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <CAN1_RX0_IRQHandler+0x10>)
 8000e12:	f000 fd4a 	bl	80018aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000098 	.word	0x20000098

08000e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <OTG_FS_IRQHandler+0x10>)
 8000e26:	f001 fcd3 	bl	80027d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200005e4 	.word	0x200005e4

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f007 fe26 	bl	8008ab4 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20020000 	.word	0x20020000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	20000200 	.word	0x20000200
 8000e9c:	20000a30 	.word	0x20000a30

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	@ (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f007 fde5 	bl	8008ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb1b 	bl	8000530 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f08:	08008be4 	.word	0x08008be4
  ldr r2, =_sbss
 8000f0c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f10:	20000a30 	.word	0x20000a30

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 ffb1 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fda0 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 ffc9 	bl	8001f12 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f98:	f000 ff91 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000204 	.word	0x20000204

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000204 	.word	0x20000204

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0ed      	b.n	8001232 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fd3c 	bl	8000ae0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001078:	f7ff ffb4 	bl	8000fe4 <HAL_GetTick>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107e:	e012      	b.n	80010a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001080:	f7ff ffb0 	bl	8000fe4 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d90b      	bls.n	80010a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2205      	movs	r2, #5
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0c5      	b.n	8001232 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0e5      	beq.n	8001080 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0202 	bic.w	r2, r2, #2
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff ff8e 	bl	8000fe4 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff ff8a 	bl	8000fe4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e09f      	b.n	8001232 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e5      	bne.n	80010cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e1b      	ldrb	r3, [r3, #24]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e007      	b.n	800112a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e5b      	ldrb	r3, [r3, #25]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001152:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e9b      	ldrb	r3, [r3, #26]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0220 	orr.w	r2, r2, #32
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0220 	bic.w	r2, r2, #32
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7edb      	ldrb	r3, [r3, #27]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0210 	bic.w	r2, r2, #16
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0210 	orr.w	r2, r2, #16
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7f1b      	ldrb	r3, [r3, #28]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d108      	bne.n	80011c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0208 	orr.w	r2, r2, #8
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f5b      	ldrb	r3, [r3, #29]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0204 	orr.w	r2, r2, #4
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e007      	b.n	80011fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0204 	bic.w	r2, r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	ea42 0103 	orr.w	r1, r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001252:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001254:	7cfb      	ldrb	r3, [r7, #19]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d003      	beq.n	8001262 <HAL_CAN_ConfigFilter+0x26>
 800125a:	7cfb      	ldrb	r3, [r7, #19]
 800125c:	2b02      	cmp	r3, #2
 800125e:	f040 80be 	bne.w	80013de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001262:	4b65      	ldr	r3, [pc, #404]	@ (80013f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001264:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800127c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	431a      	orrs	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	401a      	ands	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d123      	bne.n	800130c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3248      	adds	r2, #72	@ 0x48
 80012ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001300:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	3348      	adds	r3, #72	@ 0x48
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d122      	bne.n	800135a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001334:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3248      	adds	r2, #72	@ 0x48
 800133a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001350:	6979      	ldr	r1, [r7, #20]
 8001352:	3348      	adds	r3, #72	@ 0x48
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001374:	e007      	b.n	8001386 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013d0:	f023 0201 	bic.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e006      	b.n	80013ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40006400 	.word	0x40006400

080013fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d12e      	bne.n	800146e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff fddc 	bl	8000fe4 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800142e:	e012      	b.n	8001456 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001430:	f7ff fdd8 	bl	8000fe4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d90b      	bls.n	8001456 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2205      	movs	r2, #5
 800144e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e012      	b.n	800147c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e5      	bne.n	8001430 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e006      	b.n	800147c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
  }
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	@ 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d003      	beq.n	80014b0 <HAL_CAN_AddTxMessage+0x2c>
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f040 80b8 	bne.w	8001620 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80a0 	beq.w	8001610 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	0e1b      	lsrs	r3, r3, #24
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e09e      	b.n	800162e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014f0:	2201      	movs	r2, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	409a      	lsls	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3318      	adds	r3, #24
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	440b      	add	r3, r1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e00f      	b.n	800153e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001528:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001532:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3318      	adds	r3, #24
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	440b      	add	r3, r1
 800154e:	3304      	adds	r3, #4
 8001550:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	7d1b      	ldrb	r3, [r3, #20]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	6811      	ldr	r1, [r2, #0]
 800156e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3318      	adds	r3, #24
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	3304      	adds	r3, #4
 800157c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3307      	adds	r3, #7
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	061a      	lsls	r2, r3, #24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3306      	adds	r3, #6
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3305      	adds	r3, #5
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	4313      	orrs	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	3204      	adds	r2, #4
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	4610      	mov	r0, r2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	ea43 0200 	orr.w	r2, r3, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80015b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3303      	adds	r3, #3
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	061a      	lsls	r2, r3, #24
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3302      	adds	r3, #2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3301      	adds	r3, #1
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	4313      	orrs	r3, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	4610      	mov	r0, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6811      	ldr	r1, [r2, #0]
 80015dc:	ea43 0200 	orr.w	r2, r3, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3318      	adds	r3, #24
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6811      	ldr	r1, [r2, #0]
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3318      	adds	r3, #24
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	440b      	add	r3, r1
 800160a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e00e      	b.n	800162e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e006      	b.n	800162e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800163a:	b480      	push	{r7}
 800163c:	b087      	sub	sp, #28
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d003      	beq.n	800165e <HAL_CAN_GetRxMessage+0x24>
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b02      	cmp	r3, #2
 800165a:	f040 80f3 	bne.w	8001844 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10e      	bne.n	8001682 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0e7      	b.n	8001852 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0d8      	b.n	8001852 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	331b      	adds	r3, #27
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0204 	and.w	r2, r3, #4
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	331b      	adds	r3, #27
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0d5b      	lsrs	r3, r3, #21
 80016ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	331b      	adds	r3, #27
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	08db      	lsrs	r3, r3, #3
 80016e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	331b      	adds	r3, #27
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0202 	and.w	r2, r3, #2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	331b      	adds	r3, #27
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	3304      	adds	r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 020f 	and.w	r2, r3, #15
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	331b      	adds	r3, #27
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	331b      	adds	r3, #27
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0a1a      	lsrs	r2, r3, #8
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0c1a      	lsrs	r2, r3, #16
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3302      	adds	r3, #2
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0e1a      	lsrs	r2, r3, #24
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3303      	adds	r3, #3
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3304      	adds	r3, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0a1a      	lsrs	r2, r3, #8
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	3305      	adds	r3, #5
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0c1a      	lsrs	r2, r3, #16
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3306      	adds	r3, #6
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e1a      	lsrs	r2, r3, #24
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3307      	adds	r3, #7
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	e007      	b.n	8001840 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e006      	b.n	8001852 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d002      	beq.n	800187c <HAL_CAN_ActivateNotification+0x1e>
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d109      	bne.n	8001890 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6959      	ldr	r1, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e006      	b.n	800189e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
  }
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b08a      	sub	sp, #40	@ 0x28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d07c      	beq.n	80019ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d023      	beq.n	8001942 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f983 	bl	8001c18 <HAL_CAN_TxMailbox0CompleteCallback>
 8001912:	e016      	b.n	8001942 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
 8001926:	e00c      	b.n	8001942 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	e002      	b.n	8001942 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f989 	bl	8001c54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d024      	beq.n	8001996 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001954:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f963 	bl	8001c2c <HAL_CAN_TxMailbox1CompleteCallback>
 8001966:	e016      	b.n	8001996 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
 800197a:	e00c      	b.n	8001996 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
 800198e:	e002      	b.n	8001996 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f969 	bl	8001c68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d024      	beq.n	80019ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f943 	bl	8001c40 <HAL_CAN_TxMailbox2CompleteCallback>
 80019ba:	e016      	b.n	80019ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ce:	e00c      	b.n	80019ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e2:	e002      	b.n	80019ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f949 	bl	8001c7c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2208      	movs	r2, #8
 8001a28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fd64 	bl	80004f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f921 	bl	8001c90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f912 	bl	8001cb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f8f9 	bl	8001ca4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2210      	movs	r2, #16
 8001acc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8fc 	bl	8001ccc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2208      	movs	r2, #8
 8001aee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8f5 	bl	8001ce0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d07b      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d072      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d043      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d03e      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b78:	2b60      	cmp	r3, #96	@ 0x60
 8001b7a:	d02b      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x32a>
 8001b7c:	2b60      	cmp	r3, #96	@ 0x60
 8001b7e:	d82e      	bhi.n	8001bde <HAL_CAN_IRQHandler+0x334>
 8001b80:	2b50      	cmp	r3, #80	@ 0x50
 8001b82:	d022      	beq.n	8001bca <HAL_CAN_IRQHandler+0x320>
 8001b84:	2b50      	cmp	r3, #80	@ 0x50
 8001b86:	d82a      	bhi.n	8001bde <HAL_CAN_IRQHandler+0x334>
 8001b88:	2b40      	cmp	r3, #64	@ 0x40
 8001b8a:	d019      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x316>
 8001b8c:	2b40      	cmp	r3, #64	@ 0x40
 8001b8e:	d826      	bhi.n	8001bde <HAL_CAN_IRQHandler+0x334>
 8001b90:	2b30      	cmp	r3, #48	@ 0x30
 8001b92:	d010      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x30c>
 8001b94:	2b30      	cmp	r3, #48	@ 0x30
 8001b96:	d822      	bhi.n	8001bde <HAL_CAN_IRQHandler+0x334>
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d002      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x2f8>
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d005      	beq.n	8001bac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ba0:	e01d      	b.n	8001bde <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001baa:	e019      	b.n	8001be0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bb4:	e014      	b.n	8001be0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	f043 0320 	orr.w	r3, r3, #32
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bbe:	e00f      	b.n	8001be0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bc8:	e00a      	b.n	8001be0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bd2:	e005      	b.n	8001be0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bdc:	e000      	b.n	8001be0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f872 	bl	8001cf4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	@ (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	@ (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e16b      	b.n	8002220 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 815a 	bne.w	800221a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d017      	beq.n	800201c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d123      	bne.n	8002070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80b4 	beq.w	800221a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <HAL_GPIO_Init+0x30c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002238 <HAL_GPIO_Init+0x30c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002238 <HAL_GPIO_Init+0x30c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ce:	4a5b      	ldr	r2, [pc, #364]	@ (800223c <HAL_GPIO_Init+0x310>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a52      	ldr	r2, [pc, #328]	@ (8002240 <HAL_GPIO_Init+0x314>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <HAL_GPIO_Init+0x226>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a51      	ldr	r2, [pc, #324]	@ (8002244 <HAL_GPIO_Init+0x318>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x222>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a50      	ldr	r2, [pc, #320]	@ (8002248 <HAL_GPIO_Init+0x31c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x21e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4f      	ldr	r2, [pc, #316]	@ (800224c <HAL_GPIO_Init+0x320>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x21a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4e      	ldr	r2, [pc, #312]	@ (8002250 <HAL_GPIO_Init+0x324>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x216>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4d      	ldr	r2, [pc, #308]	@ (8002254 <HAL_GPIO_Init+0x328>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x212>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4c      	ldr	r2, [pc, #304]	@ (8002258 <HAL_GPIO_Init+0x32c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4b      	ldr	r2, [pc, #300]	@ (800225c <HAL_GPIO_Init+0x330>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x20a>
 8002132:	2307      	movs	r3, #7
 8002134:	e00e      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002136:	2308      	movs	r3, #8
 8002138:	e00c      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800213a:	2306      	movs	r3, #6
 800213c:	e00a      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800213e:	2305      	movs	r3, #5
 8002140:	e008      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002142:	2304      	movs	r3, #4
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002146:	2303      	movs	r3, #3
 8002148:	e004      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800214a:	2302      	movs	r3, #2
 800214c:	e002      	b.n	8002154 <HAL_GPIO_Init+0x228>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_GPIO_Init+0x228>
 8002152:	2300      	movs	r3, #0
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f002 0203 	and.w	r2, r2, #3
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	4093      	lsls	r3, r2
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002164:	4935      	ldr	r1, [pc, #212]	@ (800223c <HAL_GPIO_Init+0x310>)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_GPIO_Init+0x334>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002196:	4a32      	ldr	r2, [pc, #200]	@ (8002260 <HAL_GPIO_Init+0x334>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219c:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <HAL_GPIO_Init+0x334>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c0:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c6:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_GPIO_Init+0x334>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002214:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <HAL_GPIO_Init+0x334>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	f67f ae90 	bls.w	8001f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3724      	adds	r7, #36	@ 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40013800 	.word	0x40013800
 8002240:	40020000 	.word	0x40020000
 8002244:	40020400 	.word	0x40020400
 8002248:	40020800 	.word	0x40020800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40021000 	.word	0x40021000
 8002254:	40021400 	.word	0x40021400
 8002258:	40021800 	.word	0x40021800
 800225c:	40021c00 	.word	0x40021c00
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	041a      	lsls	r2, r3, #16
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	400b      	ands	r3, r1
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e2:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f8e4 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40013c00 	.word	0x40013c00

080022fc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	b08f      	sub	sp, #60	@ 0x3c
 8002300:	af0a      	add	r7, sp, #40	@ 0x28
 8002302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e054      	b.n	80023b8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f006 f843 	bl	80083b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f882 	bl	8005456 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	687e      	ldr	r6, [r7, #4]
 800235a:	466d      	mov	r5, sp
 800235c:	f106 0410 	add.w	r4, r6, #16
 8002360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002368:	e894 0003 	ldmia.w	r4, {r0, r1}
 800236c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002370:	1d33      	adds	r3, r6, #4
 8002372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f002 fffc 	bl	8005372 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2101      	movs	r1, #1
 8002380:	4618      	mov	r0, r3
 8002382:	f003 f879 	bl	8005478 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	687e      	ldr	r6, [r7, #4]
 800238e:	466d      	mov	r5, sp
 8002390:	f106 0410 	add.w	r4, r6, #16
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a4:	1d33      	adds	r3, r6, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f003 fa01 	bl	80057b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023c0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af04      	add	r7, sp, #16
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	70fb      	strb	r3, [r7, #3]
 80023d2:	460b      	mov	r3, r1
 80023d4:	70bb      	strb	r3, [r7, #2]
 80023d6:	4613      	mov	r3, r2
 80023d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_HCD_HC_Init+0x28>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e076      	b.n	80024d6 <HAL_HCD_HC_Init+0x116>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	@ 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	333d      	adds	r3, #61	@ 0x3d
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	@ 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3338      	adds	r3, #56	@ 0x38
 8002410:	787a      	ldrb	r2, [r7, #1]
 8002412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	212c      	movs	r1, #44	@ 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3340      	adds	r3, #64	@ 0x40
 8002422:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002424:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	212c      	movs	r1, #44	@ 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3339      	adds	r3, #57	@ 0x39
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	212c      	movs	r1, #44	@ 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	333f      	adds	r3, #63	@ 0x3f
 8002446:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800244a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	78ba      	ldrb	r2, [r7, #2]
 8002450:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002454:	b2d0      	uxtb	r0, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	212c      	movs	r1, #44	@ 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	333a      	adds	r3, #58	@ 0x3a
 8002462:	4602      	mov	r2, r0
 8002464:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002466:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800246a:	2b00      	cmp	r3, #0
 800246c:	da09      	bge.n	8002482 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	212c      	movs	r1, #44	@ 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	333b      	adds	r3, #59	@ 0x3b
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e008      	b.n	8002494 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	212c      	movs	r1, #44	@ 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	333b      	adds	r3, #59	@ 0x3b
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	212c      	movs	r1, #44	@ 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	333c      	adds	r3, #60	@ 0x3c
 80024a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024a6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	787c      	ldrb	r4, [r7, #1]
 80024ae:	78ba      	ldrb	r2, [r7, #2]
 80024b0:	78f9      	ldrb	r1, [r7, #3]
 80024b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4623      	mov	r3, r4
 80024c4:	f003 fafa 	bl	8005abc <USB_HC_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}

080024de <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_HCD_HC_Halt+0x1e>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e00f      	b.n	800251c <HAL_HCD_HC_Halt+0x3e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fd4a 	bl	8005fa6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	70fb      	strb	r3, [r7, #3]
 8002536:	460b      	mov	r3, r1
 8002538:	70bb      	strb	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	@ 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	333b      	adds	r3, #59	@ 0x3b
 800254c:	78ba      	ldrb	r2, [r7, #2]
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	@ 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	333f      	adds	r3, #63	@ 0x3f
 800255e:	787a      	ldrb	r2, [r7, #1]
 8002560:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	@ 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3342      	adds	r3, #66	@ 0x42
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	212c      	movs	r1, #44	@ 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333d      	adds	r3, #61	@ 0x3d
 8002588:	7f3a      	ldrb	r2, [r7, #28]
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e008      	b.n	80025a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	212c      	movs	r1, #44	@ 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3342      	adds	r3, #66	@ 0x42
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f200 80c6 	bhi.w	8002734 <HAL_HCD_HC_SubmitRequest+0x210>
 80025a8:	a201      	add	r2, pc, #4	@ (adr r2, 80025b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	08002721 	.word	0x08002721
 80025b8:	08002625 	.word	0x08002625
 80025bc:	080026a3 	.word	0x080026a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025c0:	7c3b      	ldrb	r3, [r7, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f040 80b8 	bne.w	8002738 <HAL_HCD_HC_SubmitRequest+0x214>
 80025c8:	78bb      	ldrb	r3, [r7, #2]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80b4 	bne.w	8002738 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80025d0:	8b3b      	ldrh	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	212c      	movs	r1, #44	@ 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3355      	adds	r3, #85	@ 0x55
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	212c      	movs	r1, #44	@ 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3355      	adds	r3, #85	@ 0x55
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	212c      	movs	r1, #44	@ 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3342      	adds	r3, #66	@ 0x42
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800260e:	e093      	b.n	8002738 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	212c      	movs	r1, #44	@ 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3342      	adds	r3, #66	@ 0x42
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
      break;
 8002622:	e089      	b.n	8002738 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002624:	78bb      	ldrb	r3, [r7, #2]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11d      	bne.n	8002666 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	@ 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3355      	adds	r3, #85	@ 0x55
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	212c      	movs	r1, #44	@ 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3342      	adds	r3, #66	@ 0x42
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002650:	e073      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	212c      	movs	r1, #44	@ 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3342      	adds	r3, #66	@ 0x42
 8002660:	2202      	movs	r2, #2
 8002662:	701a      	strb	r2, [r3, #0]
      break;
 8002664:	e069      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	@ 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3354      	adds	r3, #84	@ 0x54
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	212c      	movs	r1, #44	@ 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3342      	adds	r3, #66	@ 0x42
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
      break;
 800268c:	e055      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	@ 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3342      	adds	r3, #66	@ 0x42
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
      break;
 80026a0:	e04b      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026a2:	78bb      	ldrb	r3, [r7, #2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d11d      	bne.n	80026e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	@ 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3355      	adds	r3, #85	@ 0x55
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	@ 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3342      	adds	r3, #66	@ 0x42
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ce:	e034      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	212c      	movs	r1, #44	@ 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3342      	adds	r3, #66	@ 0x42
 80026de:	2202      	movs	r2, #2
 80026e0:	701a      	strb	r2, [r3, #0]
      break;
 80026e2:	e02a      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	212c      	movs	r1, #44	@ 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3354      	adds	r3, #84	@ 0x54
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	212c      	movs	r1, #44	@ 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3342      	adds	r3, #66	@ 0x42
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
      break;
 800270a:	e016      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	212c      	movs	r1, #44	@ 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3342      	adds	r3, #66	@ 0x42
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
      break;
 800271e:	e00c      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	@ 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3342      	adds	r3, #66	@ 0x42
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
      break;
 8002732:	e002      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002738:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	212c      	movs	r1, #44	@ 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3344      	adds	r3, #68	@ 0x44
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	8b3a      	ldrh	r2, [r7, #24]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	202c      	movs	r0, #44	@ 0x2c
 8002754:	fb00 f303 	mul.w	r3, r0, r3
 8002758:	440b      	add	r3, r1
 800275a:	334c      	adds	r3, #76	@ 0x4c
 800275c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	212c      	movs	r1, #44	@ 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3360      	adds	r3, #96	@ 0x60
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	212c      	movs	r1, #44	@ 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3350      	adds	r3, #80	@ 0x50
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	212c      	movs	r1, #44	@ 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3339      	adds	r3, #57	@ 0x39
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	212c      	movs	r1, #44	@ 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3361      	adds	r3, #97	@ 0x61
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	222c      	movs	r2, #44	@ 0x2c
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	3338      	adds	r3, #56	@ 0x38
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	18d1      	adds	r1, r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	f003 fa9e 	bl	8005d00 <USB_HC_StartXfer>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 ff9f 	bl	800572a <USB_GetMode>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f040 80f6 	bne.w	80029e0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 ff83 	bl	8005704 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80ec 	beq.w	80029de <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 ff7a 	bl	8005704 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800281a:	d104      	bne.n	8002826 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 ff6a 	bl	8005704 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800283a:	d104      	bne.n	8002846 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff5a 	bl	8005704 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002856:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800285a:	d104      	bne.n	8002866 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f002 ff4a 	bl	8005704 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d103      	bne.n	8002882 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2202      	movs	r2, #2
 8002880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 ff3c 	bl	8005704 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002896:	d11c      	bne.n	80028d2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80028a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028b2:	2110      	movs	r1, #16
 80028b4:	6938      	ldr	r0, [r7, #16]
 80028b6:	f002 fe2b 	bl	8005510 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028ba:	6938      	ldr	r0, [r7, #16]
 80028bc:	f002 fe5c 	bl	8005578 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 f832 	bl	8005930 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f005 fdef 	bl	80084b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 ff14 	bl	8005704 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e6:	d102      	bne.n	80028ee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f001 f89e 	bl	8003a2a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 ff06 	bl	8005704 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d106      	bne.n	8002910 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f005 fdb8 	bl	8008478 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f002 fef5 	bl	8005704 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b10      	cmp	r3, #16
 8002922:	d101      	bne.n	8002928 <HAL_HCD_IRQHandler+0x158>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_HCD_IRQHandler+0x15a>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0210 	bic.w	r2, r2, #16
 800293c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 ffa1 	bl	8003886 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0210 	orr.w	r2, r2, #16
 8002952:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f002 fed3 	bl	8005704 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002968:	d13a      	bne.n	80029e0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fb08 	bl	8005f84 <USB_HC_ReadInterrupt>
 8002974:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e025      	b.n	80029c8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d018      	beq.n	80029c2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a6:	d106      	bne.n	80029b6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8ab 	bl	8002b0a <HCD_HC_IN_IRQHandler>
 80029b4:	e005      	b.n	80029c2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fbf9 	bl	80031b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3d4      	bcc.n	800297c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	e000      	b.n	80029e0 <HAL_HCD_IRQHandler+0x210>
      return;
 80029de:	bf00      	nop
    }
  }
}
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_HCD_Start+0x16>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e013      	b.n	8002a24 <HAL_HCD_Start+0x3e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fff4 	bl	80059f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fd0d 	bl	8005434 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_HCD_Stop+0x16>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e00d      	b.n	8002a5e <HAL_HCD_Stop+0x32>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fbe2 	bl	8006218 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 ff96 	bl	80059a4 <USB_ResetPort>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	212c      	movs	r1, #44	@ 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3360      	adds	r3, #96	@ 0x60
 8002a9c:	781b      	ldrb	r3, [r3, #0]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	212c      	movs	r1, #44	@ 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3350      	adds	r3, #80	@ 0x50
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 ffda 	bl	8005a98 <USB_GetCurrentFrame>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 ffb5 	bl	8005a6a <USB_GetHostSpeed>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d11a      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2304      	movs	r3, #4
 8002b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	@ 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	@ 0x61
 8002b5a:	2206      	movs	r2, #6
 8002b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fa1c 	bl	8005fa6 <USB_HC_Halt>
 8002b6e:	e0af      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b86:	d11b      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	212c      	movs	r1, #44	@ 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3361      	adds	r3, #97	@ 0x61
 8002baa:	2207      	movs	r2, #7
 8002bac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 f9f4 	bl	8005fa6 <USB_HC_Halt>
 8002bbe:	e087      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d109      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2320      	movs	r3, #32
 8002be6:	6093      	str	r3, [r2, #8]
 8002be8:	e072      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d11a      	bne.n	8002c36 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2308      	movs	r3, #8
 8002c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	@ 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3361      	adds	r3, #97	@ 0x61
 8002c20:	2205      	movs	r2, #5
 8002c22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 f9b9 	bl	8005fa6 <USB_HC_Halt>
 8002c34:	e04c      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4c:	d11b      	bne.n	8002c86 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	212c      	movs	r1, #44	@ 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3361      	adds	r3, #97	@ 0x61
 8002c70:	2208      	movs	r2, #8
 8002c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f991 	bl	8005fa6 <USB_HC_Halt>
 8002c84:	e024      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c98:	2b80      	cmp	r3, #128	@ 0x80
 8002c9a:	d119      	bne.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	@ 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3361      	adds	r3, #97	@ 0x61
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f96b 	bl	8005fa6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce6:	d112      	bne.n	8002d0e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 f957 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d0a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d0c:	e24e      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 80df 	bne.w	8002ee4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	@ 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3348      	adds	r3, #72	@ 0x48
 8002d3c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0159      	lsls	r1, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d50:	1ad2      	subs	r2, r2, r3
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	202c      	movs	r0, #44	@ 0x2c
 8002d58:	fb00 f303 	mul.w	r3, r0, r3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3350      	adds	r3, #80	@ 0x50
 8002d60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	@ 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	@ 0x61
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	@ 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	335c      	adds	r3, #92	@ 0x5c
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2301      	movs	r3, #1
 8002d96:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	@ 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	333f      	adds	r3, #63	@ 0x3f
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	@ 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	333f      	adds	r3, #63	@ 0x3f
 8002dba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d111      	bne.n	8002de4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 f8eb 	bl	8005fa6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
 8002de2:	e03a      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	212c      	movs	r1, #44	@ 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	333f      	adds	r3, #63	@ 0x3f
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d009      	beq.n	8002e0c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	@ 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	333f      	adds	r3, #63	@ 0x3f
 8002e06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d126      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	0151      	lsls	r1, r2, #5
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	440a      	add	r2, r1
 8002e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e2a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	@ 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	@ 0x60
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	b2d9      	uxtb	r1, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	202c      	movs	r0, #44	@ 0x2c
 8002e48:	fb00 f303 	mul.w	r3, r0, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3360      	adds	r3, #96	@ 0x60
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f005 fb39 	bl	80084cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12b      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	@ 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3348      	adds	r3, #72	@ 0x48
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	202c      	movs	r0, #44	@ 0x2c
 8002e78:	fb00 f202 	mul.w	r2, r0, r2
 8002e7c:	440a      	add	r2, r1
 8002e7e:	3240      	adds	r2, #64	@ 0x40
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 818e 	beq.w	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	@ 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3354      	adds	r3, #84	@ 0x54
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2d8      	uxtb	r0, r3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	212c      	movs	r1, #44	@ 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3354      	adds	r3, #84	@ 0x54
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	701a      	strb	r2, [r3, #0]
}
 8002eb8:	e178      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	@ 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3354      	adds	r3, #84	@ 0x54
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	@ 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3354      	adds	r3, #84	@ 0x54
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
}
 8002ee2:	e163      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	f040 80f6 	bne.w	80030e8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	212c      	movs	r1, #44	@ 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3361      	adds	r3, #97	@ 0x61
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d109      	bne.n	8002f24 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	212c      	movs	r1, #44	@ 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3360      	adds	r3, #96	@ 0x60
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e0c9      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	212c      	movs	r1, #44	@ 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3361      	adds	r3, #97	@ 0x61
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d109      	bne.n	8002f4c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	212c      	movs	r1, #44	@ 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3360      	adds	r3, #96	@ 0x60
 8002f46:	2205      	movs	r2, #5
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e0b5      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	212c      	movs	r1, #44	@ 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3361      	adds	r3, #97	@ 0x61
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d009      	beq.n	8002f74 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	212c      	movs	r1, #44	@ 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3361      	adds	r3, #97	@ 0x61
 8002f6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d150      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	212c      	movs	r1, #44	@ 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	335c      	adds	r3, #92	@ 0x5c
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	202c      	movs	r0, #44	@ 0x2c
 8002f8c:	fb00 f303 	mul.w	r3, r0, r3
 8002f90:	440b      	add	r3, r1
 8002f92:	335c      	adds	r3, #92	@ 0x5c
 8002f94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	212c      	movs	r1, #44	@ 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	335c      	adds	r3, #92	@ 0x5c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d912      	bls.n	8002fd0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	212c      	movs	r1, #44	@ 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	335c      	adds	r3, #92	@ 0x5c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	@ 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3360      	adds	r3, #96	@ 0x60
 8002fca:	2204      	movs	r2, #4
 8002fcc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fce:	e073      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	212c      	movs	r1, #44	@ 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3360      	adds	r3, #96	@ 0x60
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ff8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003000:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003014:	e050      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	@ 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3361      	adds	r3, #97	@ 0x61
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d122      	bne.n	8003070 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	212c      	movs	r1, #44	@ 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3360      	adds	r3, #96	@ 0x60
 8003038:	2202      	movs	r2, #2
 800303a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003052:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800305a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e023      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	212c      	movs	r1, #44	@ 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3361      	adds	r3, #97	@ 0x61
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b07      	cmp	r3, #7
 8003082:	d119      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	@ 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	335c      	adds	r3, #92	@ 0x5c
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	202c      	movs	r0, #44	@ 0x2c
 800309c:	fb00 f303 	mul.w	r3, r0, r3
 80030a0:	440b      	add	r3, r1
 80030a2:	335c      	adds	r3, #92	@ 0x5c
 80030a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	212c      	movs	r1, #44	@ 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3360      	adds	r3, #96	@ 0x60
 80030b4:	2204      	movs	r2, #4
 80030b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2302      	movs	r3, #2
 80030c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b2d9      	uxtb	r1, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	202c      	movs	r0, #44	@ 0x2c
 80030d4:	fb00 f303 	mul.w	r3, r0, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3360      	adds	r3, #96	@ 0x60
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f005 f9f3 	bl	80084cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030e6:	e061      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d156      	bne.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	212c      	movs	r1, #44	@ 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	333f      	adds	r3, #63	@ 0x3f
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d111      	bne.n	8003136 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	212c      	movs	r1, #44	@ 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	335c      	adds	r3, #92	@ 0x5c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f002 ff39 	bl	8005fa6 <USB_HC_Halt>
 8003134:	e031      	b.n	800319a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	@ 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	333f      	adds	r3, #63	@ 0x3f
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	212c      	movs	r1, #44	@ 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333f      	adds	r3, #63	@ 0x3f
 8003158:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11d      	bne.n	800319a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	212c      	movs	r1, #44	@ 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	335c      	adds	r3, #92	@ 0x5c
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d110      	bne.n	800319a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	212c      	movs	r1, #44	@ 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	@ 0x61
 8003186:	2203      	movs	r2, #3
 8003188:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f002 ff06 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2310      	movs	r3, #16
 80031aa:	6093      	str	r3, [r2, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11a      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2304      	movs	r3, #4
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	@ 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3361      	adds	r3, #97	@ 0x61
 8003204:	2206      	movs	r2, #6
 8003206:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fec7 	bl	8005fa6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003218:	e331      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b20      	cmp	r3, #32
 800322e:	d12e      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2320      	movs	r3, #32
 8003240:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	@ 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	333d      	adds	r3, #61	@ 0x3d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	f040 8313 	bne.w	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	@ 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	333d      	adds	r3, #61	@ 0x3d
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	212c      	movs	r1, #44	@ 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	@ 0x60
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f002 fe8d 	bl	8005fa6 <USB_HC_Halt>
}
 800328c:	e2f7      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a4:	d112      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 fe6e 	bl	8005fa6 <USB_HC_Halt>
}
 80032ca:	e2d8      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d140      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	@ 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	335c      	adds	r3, #92	@ 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003306:	2b40      	cmp	r3, #64	@ 0x40
 8003308:	d111      	bne.n	800332e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	@ 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	333d      	adds	r3, #61	@ 0x3d
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2340      	movs	r3, #64	@ 0x40
 800332c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2301      	movs	r3, #1
 800333e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	@ 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3361      	adds	r3, #97	@ 0x61
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fe22 	bl	8005fa6 <USB_HC_Halt>
}
 8003362:	e28c      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b40      	cmp	r3, #64	@ 0x40
 8003378:	d12c      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	@ 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3361      	adds	r3, #97	@ 0x61
 8003388:	2204      	movs	r2, #4
 800338a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	@ 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	333d      	adds	r3, #61	@ 0x3d
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	212c      	movs	r1, #44	@ 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	@ 0x5c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 fdf3 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2340      	movs	r3, #64	@ 0x40
 80033d0:	6093      	str	r3, [r2, #8]
}
 80033d2:	e254      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11a      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2308      	movs	r3, #8
 80033fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	@ 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3361      	adds	r3, #97	@ 0x61
 800340a:	2205      	movs	r2, #5
 800340c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fdc4 	bl	8005fa6 <USB_HC_Halt>
}
 800341e:	e22e      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d140      	bne.n	80034b8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	@ 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	335c      	adds	r3, #92	@ 0x5c
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	@ 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3361      	adds	r3, #97	@ 0x61
 8003456:	2203      	movs	r2, #3
 8003458:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	@ 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333d      	adds	r3, #61	@ 0x3d
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d112      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	@ 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	333c      	adds	r3, #60	@ 0x3c
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	212c      	movs	r1, #44	@ 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	333d      	adds	r3, #61	@ 0x3d
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 fd81 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	2310      	movs	r3, #16
 80034b4:	6093      	str	r3, [r2, #8]
}
 80034b6:	e1e2      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b80      	cmp	r3, #128	@ 0x80
 80034cc:	d164      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d111      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	@ 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3361      	adds	r3, #97	@ 0x61
 80034e4:	2206      	movs	r2, #6
 80034e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 fd57 	bl	8005fa6 <USB_HC_Halt>
 80034f8:	e044      	b.n	8003584 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	212c      	movs	r1, #44	@ 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	335c      	adds	r3, #92	@ 0x5c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	202c      	movs	r0, #44	@ 0x2c
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	440b      	add	r3, r1
 8003518:	335c      	adds	r3, #92	@ 0x5c
 800351a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	@ 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	335c      	adds	r3, #92	@ 0x5c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d920      	bls.n	8003572 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	@ 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	335c      	adds	r3, #92	@ 0x5c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	@ 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3360      	adds	r3, #96	@ 0x60
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	b2d9      	uxtb	r1, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	202c      	movs	r0, #44	@ 0x2c
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	@ 0x60
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f004 ffae 	bl	80084cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003570:	e008      	b.n	8003584 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	212c      	movs	r1, #44	@ 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3360      	adds	r3, #96	@ 0x60
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	6093      	str	r3, [r2, #8]
}
 8003596:	e172      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ae:	d11b      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	@ 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3361      	adds	r3, #97	@ 0x61
 80035be:	2208      	movs	r2, #8
 80035c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fcea 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035de:	461a      	mov	r2, r3
 80035e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e4:	6093      	str	r3, [r2, #8]
}
 80035e6:	e14a      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	f040 813f 	bne.w	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	@ 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	@ 0x61
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d17d      	bne.n	8003710 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	212c      	movs	r1, #44	@ 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3360      	adds	r3, #96	@ 0x60
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	@ 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333f      	adds	r3, #63	@ 0x3f
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d00a      	beq.n	8003650 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	@ 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333f      	adds	r3, #63	@ 0x3f
 8003648:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	f040 8100 	bne.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	@ 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3355      	adds	r3, #85	@ 0x55
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2d8      	uxtb	r0, r3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	@ 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3355      	adds	r3, #85	@ 0x55
 800367c:	4602      	mov	r2, r0
 800367e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b01      	cmp	r3, #1
 8003686:	f040 80e3 	bne.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	@ 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	334c      	adds	r3, #76	@ 0x4c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80d8 	beq.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	212c      	movs	r1, #44	@ 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	334c      	adds	r3, #76	@ 0x4c
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	202c      	movs	r0, #44	@ 0x2c
 80036b6:	fb00 f202 	mul.w	r2, r0, r2
 80036ba:	440a      	add	r2, r1
 80036bc:	3240      	adds	r2, #64	@ 0x40
 80036be:	8812      	ldrh	r2, [r2, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	202c      	movs	r0, #44	@ 0x2c
 80036ca:	fb00 f202 	mul.w	r2, r0, r2
 80036ce:	440a      	add	r2, r1
 80036d0:	3240      	adds	r2, #64	@ 0x40
 80036d2:	8812      	ldrh	r2, [r2, #0]
 80036d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b5 	beq.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	@ 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3355      	adds	r3, #85	@ 0x55
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	f083 0301 	eor.w	r3, r3, #1
 80036fa:	b2d8      	uxtb	r0, r3
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	212c      	movs	r1, #44	@ 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3355      	adds	r3, #85	@ 0x55
 800370a:	4602      	mov	r2, r0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e09f      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	@ 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3361      	adds	r3, #97	@ 0x61
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d109      	bne.n	8003738 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	@ 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3360      	adds	r3, #96	@ 0x60
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e08b      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	212c      	movs	r1, #44	@ 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3361      	adds	r3, #97	@ 0x61
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d109      	bne.n	8003760 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	@ 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	@ 0x60
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e077      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	212c      	movs	r1, #44	@ 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3361      	adds	r3, #97	@ 0x61
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d109      	bne.n	8003788 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	212c      	movs	r1, #44	@ 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3360      	adds	r3, #96	@ 0x60
 8003782:	2205      	movs	r2, #5
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e063      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	212c      	movs	r1, #44	@ 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3361      	adds	r3, #97	@ 0x61
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b06      	cmp	r3, #6
 800379a:	d009      	beq.n	80037b0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	@ 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	@ 0x61
 80037aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d14f      	bne.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	212c      	movs	r1, #44	@ 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	335c      	adds	r3, #92	@ 0x5c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	202c      	movs	r0, #44	@ 0x2c
 80037c8:	fb00 f303 	mul.w	r3, r0, r3
 80037cc:	440b      	add	r3, r1
 80037ce:	335c      	adds	r3, #92	@ 0x5c
 80037d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	@ 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	335c      	adds	r3, #92	@ 0x5c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d912      	bls.n	800380c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	212c      	movs	r1, #44	@ 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	@ 0x5c
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	212c      	movs	r1, #44	@ 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	3360      	adds	r3, #96	@ 0x60
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e021      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	212c      	movs	r1, #44	@ 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3360      	adds	r3, #96	@ 0x60
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003834:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800383c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384a:	461a      	mov	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	2302      	movs	r3, #2
 8003860:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	202c      	movs	r0, #44	@ 0x2c
 800386c:	fb00 f303 	mul.w	r3, r0, r3
 8003870:	4413      	add	r3, r2
 8003872:	3360      	adds	r3, #96	@ 0x60
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 fe27 	bl	80084cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800387e:	bf00      	nop
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b08a      	sub	sp, #40	@ 0x28
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	0c5b      	lsrs	r3, r3, #17
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d004      	beq.n	80038cc <HCD_RXQLVL_IRQHandler+0x46>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b05      	cmp	r3, #5
 80038c6:	f000 80a9 	beq.w	8003a1c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038ca:	e0aa      	b.n	8003a22 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80a6 	beq.w	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	212c      	movs	r1, #44	@ 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3344      	adds	r3, #68	@ 0x44
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 809b 	beq.w	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	212c      	movs	r1, #44	@ 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3350      	adds	r3, #80	@ 0x50
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	441a      	add	r2, r3
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	202c      	movs	r0, #44	@ 0x2c
 8003904:	fb00 f303 	mul.w	r3, r0, r3
 8003908:	440b      	add	r3, r1
 800390a:	334c      	adds	r3, #76	@ 0x4c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d87a      	bhi.n	8003a08 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	212c      	movs	r1, #44	@ 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3344      	adds	r3, #68	@ 0x44
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	b292      	uxth	r2, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f001 fe92 	bl	8005654 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	212c      	movs	r1, #44	@ 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3344      	adds	r3, #68	@ 0x44
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	441a      	add	r2, r3
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	202c      	movs	r0, #44	@ 0x2c
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	440b      	add	r3, r1
 8003950:	3344      	adds	r3, #68	@ 0x44
 8003952:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	212c      	movs	r1, #44	@ 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3350      	adds	r3, #80	@ 0x50
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	441a      	add	r2, r3
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	202c      	movs	r0, #44	@ 0x2c
 800396e:	fb00 f303 	mul.w	r3, r0, r3
 8003972:	440b      	add	r3, r1
 8003974:	3350      	adds	r3, #80	@ 0x50
 8003976:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	0cdb      	lsrs	r3, r3, #19
 8003988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	212c      	movs	r1, #44	@ 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3340      	adds	r3, #64	@ 0x40
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d13c      	bne.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d039      	beq.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	212c      	movs	r1, #44	@ 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	3354      	adds	r3, #84	@ 0x54
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f083 0301 	eor.w	r3, r3, #1
 80039f2:	b2d8      	uxtb	r0, r3
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	212c      	movs	r1, #44	@ 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3354      	adds	r3, #84	@ 0x54
 8003a02:	4602      	mov	r2, r0
 8003a04:	701a      	strb	r2, [r3, #0]
      break;
 8003a06:	e00b      	b.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	212c      	movs	r1, #44	@ 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3360      	adds	r3, #96	@ 0x60
 8003a16:	2204      	movs	r2, #4
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e001      	b.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a20:	bf00      	nop
  }
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	@ 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a56:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d10b      	bne.n	8003a7a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f004 fd11 	bl	8008494 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d132      	bne.n	8003aea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f043 0308 	orr.w	r3, r3, #8
 8003a8a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d126      	bne.n	8003ae4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d113      	bne.n	8003ac6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003aa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aa8:	d106      	bne.n	8003ab8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 ff3d 	bl	8005930 <USB_InitFSLSPClkSel>
 8003ab6:	e011      	b.n	8003adc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 ff36 	bl	8005930 <USB_InitFSLSPClkSel>
 8003ac4:	e00a      	b.n	8003adc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d106      	bne.n	8003adc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003ada:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f004 fd03 	bl	80084e8 <HAL_HCD_PortEnabled_Callback>
 8003ae2:	e002      	b.n	8003aea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f004 fd0d 	bl	8008504 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d103      	bne.n	8003afc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f043 0320 	orr.w	r3, r3, #32
 8003afa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e12b      	b.n	8003d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f822 	bl	8000b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	@ 0x24
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b74:	f001 fa20 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a81      	ldr	r2, [pc, #516]	@ (8003d84 <HAL_I2C_Init+0x274>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d807      	bhi.n	8003b94 <HAL_I2C_Init+0x84>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a80      	ldr	r2, [pc, #512]	@ (8003d88 <HAL_I2C_Init+0x278>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e006      	b.n	8003ba2 <HAL_I2C_Init+0x92>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a7d      	ldr	r2, [pc, #500]	@ (8003d8c <HAL_I2C_Init+0x27c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0e7      	b.n	8003d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a78      	ldr	r2, [pc, #480]	@ (8003d90 <HAL_I2C_Init+0x280>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0c9b      	lsrs	r3, r3, #18
 8003bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d84 <HAL_I2C_Init+0x274>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d802      	bhi.n	8003be4 <HAL_I2C_Init+0xd4>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3301      	adds	r3, #1
 8003be2:	e009      	b.n	8003bf8 <HAL_I2C_Init+0xe8>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a69      	ldr	r2, [pc, #420]	@ (8003d94 <HAL_I2C_Init+0x284>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	495c      	ldr	r1, [pc, #368]	@ (8003d84 <HAL_I2C_Init+0x274>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d819      	bhi.n	8003c4c <HAL_I2C_Init+0x13c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e59      	subs	r1, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c2c:	400b      	ands	r3, r1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_I2C_Init+0x138>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1e59      	subs	r1, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	e051      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	e04f      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <HAL_I2C_Init+0x168>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e58      	subs	r0, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	440b      	add	r3, r1
 8003c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e012      	b.n	8003c9e <HAL_I2C_Init+0x18e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Init+0x196>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e022      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10e      	bne.n	8003ccc <HAL_I2C_Init+0x1bc>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e58      	subs	r0, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	440b      	add	r3, r1
 8003cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	0099      	lsls	r1, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	6809      	ldr	r1, [r1, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6911      	ldr	r1, [r2, #16]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68d2      	ldr	r2, [r2, #12]
 8003d26:	4311      	orrs	r1, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	000186a0 	.word	0x000186a0
 8003d88:	001e847f 	.word	0x001e847f
 8003d8c:	003d08ff 	.word	0x003d08ff
 8003d90:	431bde83 	.word	0x431bde83
 8003d94:	10624dd3 	.word	0x10624dd3

08003d98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e128      	b.n	8003ffc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a90      	ldr	r2, [pc, #576]	@ (8004004 <HAL_I2S_Init+0x26c>)
 8003dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fc ff23 	bl	8000c10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d060      	beq.n	8003eb8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dfe:	2310      	movs	r3, #16
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e001      	b.n	8003e08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e04:	2320      	movs	r3, #32
 8003e06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d802      	bhi.n	8003e16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f001 f9c4 	bl	80051a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e1c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e26:	d125      	bne.n	8003e74 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	3305      	adds	r3, #5
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	e01f      	b.n	8003e92 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	3305      	adds	r3, #5
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e00e      	b.n	8003e92 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	461a      	mov	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	3305      	adds	r3, #5
 8003e90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4a5c      	ldr	r2, [pc, #368]	@ (8004008 <HAL_I2S_Init+0x270>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e003      	b.n	8003ec0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d902      	bls.n	8003ecc <HAL_I2S_Init+0x134>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2bff      	cmp	r3, #255	@ 0xff
 8003eca:	d907      	bls.n	8003edc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e08f      	b.n	8003ffc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	ea42 0103 	orr.w	r1, r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003efa:	f023 030f 	bic.w	r3, r3, #15
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6851      	ldr	r1, [r2, #4]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6892      	ldr	r2, [r2, #8]
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6992      	ldr	r2, [r2, #24]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d161      	bne.n	8003fec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a38      	ldr	r2, [pc, #224]	@ (800400c <HAL_I2S_Init+0x274>)
 8003f2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a37      	ldr	r2, [pc, #220]	@ (8004010 <HAL_I2S_Init+0x278>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_I2S_Init+0x1a4>
 8003f38:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <HAL_I2S_Init+0x27c>)
 8003f3a:	e001      	b.n	8003f40 <HAL_I2S_Init+0x1a8>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	4932      	ldr	r1, [pc, #200]	@ (8004010 <HAL_I2S_Init+0x278>)
 8003f48:	428a      	cmp	r2, r1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2S_Init+0x1b8>
 8003f4c:	4a31      	ldr	r2, [pc, #196]	@ (8004014 <HAL_I2S_Init+0x27c>)
 8003f4e:	e001      	b.n	8003f54 <HAL_I2S_Init+0x1bc>
 8003f50:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f58:	f023 030f 	bic.w	r3, r3, #15
 8003f5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2b      	ldr	r2, [pc, #172]	@ (8004010 <HAL_I2S_Init+0x278>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_I2S_Init+0x1d4>
 8003f68:	4b2a      	ldr	r3, [pc, #168]	@ (8004014 <HAL_I2S_Init+0x27c>)
 8003f6a:	e001      	b.n	8003f70 <HAL_I2S_Init+0x1d8>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f70:	2202      	movs	r2, #2
 8003f72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <HAL_I2S_Init+0x278>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2S_Init+0x1ea>
 8003f7e:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <HAL_I2S_Init+0x27c>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2S_Init+0x1ee>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f92:	d003      	beq.n	8003f9c <HAL_I2S_Init+0x204>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d103      	bne.n	8003fa4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fd4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0d      	ldr	r2, [pc, #52]	@ (8004010 <HAL_I2S_Init+0x278>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2S_Init+0x24c>
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <HAL_I2S_Init+0x27c>)
 8003fe2:	e001      	b.n	8003fe8 <HAL_I2S_Init+0x250>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe8:	897a      	ldrh	r2, [r7, #10]
 8003fea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	0800410f 	.word	0x0800410f
 8004008:	cccccccd 	.word	0xcccccccd
 800400c:	08004225 	.word	0x08004225
 8004010:	40003800 	.word	0x40003800
 8004014:	40003400 	.word	0x40003400

08004018 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10e      	bne.n	80040a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004098:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffb8 	bl	8004018 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	b292      	uxth	r2, r2
 80040c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10e      	bne.n	8004106 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff93 	bl	800402c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b04      	cmp	r3, #4
 8004128:	d13a      	bne.n	80041a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d109      	bne.n	8004148 <I2S_IRQHandler+0x3a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d102      	bne.n	8004148 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ffb4 	bl	80040b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414e:	2b40      	cmp	r3, #64	@ 0x40
 8004150:	d126      	bne.n	80041a0 <I2S_IRQHandler+0x92>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b20      	cmp	r3, #32
 800415e:	d11f      	bne.n	80041a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800416e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ff50 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d136      	bne.n	800421a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d109      	bne.n	80041ca <I2S_IRQHandler+0xbc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c0:	2b80      	cmp	r3, #128	@ 0x80
 80041c2:	d102      	bne.n	80041ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff45 	bl	8004054 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d122      	bne.n	800421a <I2S_IRQHandler+0x10c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d11b      	bne.n	800421a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff13 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a92      	ldr	r2, [pc, #584]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800423e:	4b92      	ldr	r3, [pc, #584]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004240:	e001      	b.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004242:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a8b      	ldr	r2, [pc, #556]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800425c:	4b8a      	ldr	r3, [pc, #552]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800425e:	e001      	b.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004270:	d004      	beq.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8099 	bne.w	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d107      	bne.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f925 	bl	80044e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9c8 	bl	8004640 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d13a      	bne.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d035      	beq.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d0:	e001      	b.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4969      	ldr	r1, [pc, #420]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042de:	428b      	cmp	r3, r1
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042e2:	4b69      	ldr	r3, [pc, #420]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fe88 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	f040 80c3 	bne.w	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80bd 	beq.w	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004356:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a49      	ldr	r2, [pc, #292]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004364:	e001      	b.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4944      	ldr	r1, [pc, #272]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004372:	428b      	cmp	r3, r1
 8004374:	d101      	bne.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004376:	4b44      	ldr	r3, [pc, #272]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004378:	e001      	b.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800437a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800437e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004382:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	f043 0204 	orr.w	r2, r3, #4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fe4a 	bl	8004040 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ac:	e089      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d107      	bne.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8be 	bl	8004544 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8fd 	bl	80045dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b40      	cmp	r3, #64	@ 0x40
 80043ea:	d12f      	bne.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02a      	beq.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004404:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004412:	e001      	b.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4919      	ldr	r1, [pc, #100]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004420:	428b      	cmp	r3, r1
 8004422:	d101      	bne.n	8004428 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004424:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004426:	e001      	b.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800442c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004430:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fdfa 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d136      	bne.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d031      	beq.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a07      	ldr	r2, [pc, #28]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d101      	bne.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800446a:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800446c:	e001      	b.n	8004472 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800446e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4902      	ldr	r1, [pc, #8]	@ (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800447a:	428b      	cmp	r3, r1
 800447c:	d106      	bne.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800447e:	4b02      	ldr	r3, [pc, #8]	@ (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004480:	e006      	b.n	8004490 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004482:	bf00      	nop
 8004484:	40003800 	.word	0x40003800
 8004488:	40003400 	.word	0x40003400
 800448c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004490:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004494:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	f043 0204 	orr.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fdc0 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	e000      	b.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044c2:	bf00      	nop
}
 80044c4:	bf00      	nop
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	1c99      	adds	r1, r3, #2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d113      	bne.n	800453a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004520:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ffc9 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	1c99      	adds	r1, r3, #2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6251      	str	r1, [r2, #36]	@ 0x24
 8004556:	8819      	ldrh	r1, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <I2SEx_TxISR_I2SExt+0x90>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <I2SEx_TxISR_I2SExt+0x22>
 8004562:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004564:	e001      	b.n	800456a <I2SEx_TxISR_I2SExt+0x26>
 8004566:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800456a:	460a      	mov	r2, r1
 800456c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d121      	bne.n	80045ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <I2SEx_TxISR_I2SExt+0x90>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <I2SEx_TxISR_I2SExt+0x50>
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004592:	e001      	b.n	8004598 <I2SEx_TxISR_I2SExt+0x54>
 8004594:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	490d      	ldr	r1, [pc, #52]	@ (80045d4 <I2SEx_TxISR_I2SExt+0x90>)
 80045a0:	428b      	cmp	r3, r1
 80045a2:	d101      	bne.n	80045a8 <I2SEx_TxISR_I2SExt+0x64>
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <I2SEx_TxISR_I2SExt+0x94>)
 80045a6:	e001      	b.n	80045ac <I2SEx_TxISR_I2SExt+0x68>
 80045a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff81 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40003800 	.word	0x40003800
 80045d8:	40003400 	.word	0x40003400

080045dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68d8      	ldr	r0, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	1c99      	adds	r1, r3, #2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045f4:	b282      	uxth	r2, r0
 80045f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800461e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff4a 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a20      	ldr	r2, [pc, #128]	@ (80046d0 <I2SEx_RxISR_I2SExt+0x90>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <I2SEx_RxISR_I2SExt+0x16>
 8004652:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <I2SEx_RxISR_I2SExt+0x94>)
 8004654:	e001      	b.n	800465a <I2SEx_RxISR_I2SExt+0x1a>
 8004656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800465a:	68d8      	ldr	r0, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	1c99      	adds	r1, r3, #2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004666:	b282      	uxth	r2, r0
 8004668:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d121      	bne.n	80046c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a12      	ldr	r2, [pc, #72]	@ (80046d0 <I2SEx_RxISR_I2SExt+0x90>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <I2SEx_RxISR_I2SExt+0x50>
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <I2SEx_RxISR_I2SExt+0x94>)
 800468e:	e001      	b.n	8004694 <I2SEx_RxISR_I2SExt+0x54>
 8004690:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	490d      	ldr	r1, [pc, #52]	@ (80046d0 <I2SEx_RxISR_I2SExt+0x90>)
 800469c:	428b      	cmp	r3, r1
 800469e:	d101      	bne.n	80046a4 <I2SEx_RxISR_I2SExt+0x64>
 80046a0:	4b0c      	ldr	r3, [pc, #48]	@ (80046d4 <I2SEx_RxISR_I2SExt+0x94>)
 80046a2:	e001      	b.n	80046a8 <I2SEx_RxISR_I2SExt+0x68>
 80046a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff03 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40003800 	.word	0x40003800
 80046d4:	40003400 	.word	0x40003400

080046d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e267      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d075      	beq.n	80047e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f6:	4b88      	ldr	r3, [pc, #544]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00c      	beq.n	800471c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004702:	4b85      	ldr	r3, [pc, #532]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470a:	2b08      	cmp	r3, #8
 800470c:	d112      	bne.n	8004734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470e:	4b82      	ldr	r3, [pc, #520]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471a:	d10b      	bne.n	8004734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	4b7e      	ldr	r3, [pc, #504]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05b      	beq.n	80047e0 <HAL_RCC_OscConfig+0x108>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d157      	bne.n	80047e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e242      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473c:	d106      	bne.n	800474c <HAL_RCC_OscConfig+0x74>
 800473e:	4b76      	ldr	r3, [pc, #472]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a75      	ldr	r2, [pc, #468]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01d      	b.n	8004788 <HAL_RCC_OscConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x98>
 8004756:	4b70      	ldr	r3, [pc, #448]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6f      	ldr	r2, [pc, #444]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b6d      	ldr	r3, [pc, #436]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6c      	ldr	r2, [pc, #432]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0xb0>
 8004770:	4b69      	ldr	r3, [pc, #420]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a68      	ldr	r2, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b66      	ldr	r3, [pc, #408]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a65      	ldr	r2, [pc, #404]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fc fc28 	bl	8000fe4 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004798:	f7fc fc24 	bl	8000fe4 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	@ 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e207      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0xc0>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fc fc14 	bl	8000fe4 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fc fc10 	bl	8000fe4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e1f3      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0xe8>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d063      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b47      	ldr	r3, [pc, #284]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004802:	2b08      	cmp	r3, #8
 8004804:	d11c      	bne.n	8004840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004806:	4b44      	ldr	r3, [pc, #272]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	4b41      	ldr	r3, [pc, #260]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x152>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e1c7      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b3b      	ldr	r3, [pc, #236]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4937      	ldr	r1, [pc, #220]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	e03a      	b.n	80048b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004848:	4b34      	ldr	r3, [pc, #208]	@ (800491c <HAL_RCC_OscConfig+0x244>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fc fbc9 	bl	8000fe4 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004856:	f7fc fbc5 	bl	8000fe4 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e1a8      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	4b2b      	ldr	r3, [pc, #172]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4925      	ldr	r1, [pc, #148]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
 8004888:	e015      	b.n	80048b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488a:	4b24      	ldr	r3, [pc, #144]	@ (800491c <HAL_RCC_OscConfig+0x244>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fc fba8 	bl	8000fe4 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004898:	f7fc fba4 	bl	8000fe4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e187      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d036      	beq.n	8004930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_RCC_OscConfig+0x248>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fc fb88 	bl	8000fe4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fc fb84 	bl	8000fe4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e167      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <HAL_RCC_OscConfig+0x240>)
 80048ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x200>
 80048f6:	e01b      	b.n	8004930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_OscConfig+0x248>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fe:	f7fc fb71 	bl	8000fe4 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	e00e      	b.n	8004924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004906:	f7fc fb6d 	bl	8000fe4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d907      	bls.n	8004924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e150      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
 8004918:	40023800 	.word	0x40023800
 800491c:	42470000 	.word	0x42470000
 8004920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004924:	4b88      	ldr	r3, [pc, #544]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ea      	bne.n	8004906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8097 	beq.w	8004a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004942:	4b81      	ldr	r3, [pc, #516]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10f      	bne.n	800496e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	4b7d      	ldr	r3, [pc, #500]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	4a7c      	ldr	r2, [pc, #496]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495c:	6413      	str	r3, [r2, #64]	@ 0x40
 800495e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	4b77      	ldr	r3, [pc, #476]	@ (8004b4c <HAL_RCC_OscConfig+0x474>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497a:	4b74      	ldr	r3, [pc, #464]	@ (8004b4c <HAL_RCC_OscConfig+0x474>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a73      	ldr	r2, [pc, #460]	@ (8004b4c <HAL_RCC_OscConfig+0x474>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004986:	f7fc fb2d 	bl	8000fe4 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fc fb29 	bl	8000fe4 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e10c      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b4c <HAL_RCC_OscConfig+0x474>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2ea>
 80049b4:	4b64      	ldr	r3, [pc, #400]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b8:	4a63      	ldr	r2, [pc, #396]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c0:	e01c      	b.n	80049fc <HAL_RCC_OscConfig+0x324>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x30c>
 80049ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	4a5b      	ldr	r2, [pc, #364]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0x324>
 80049e4:	4b58      	ldr	r3, [pc, #352]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a57      	ldr	r2, [pc, #348]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f0:	4b55      	ldr	r3, [pc, #340]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	4a54      	ldr	r2, [pc, #336]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049f6:	f023 0304 	bic.w	r3, r3, #4
 80049fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d015      	beq.n	8004a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fc faee 	bl	8000fe4 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fc faea 	bl	8000fe4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0cb      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a22:	4b49      	ldr	r3, [pc, #292]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ee      	beq.n	8004a0c <HAL_RCC_OscConfig+0x334>
 8004a2e:	e014      	b.n	8004a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a30:	f7fc fad8 	bl	8000fe4 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fc fad4 	bl	8000fe4 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0b5      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ee      	bne.n	8004a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a60:	4b39      	ldr	r3, [pc, #228]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	4a38      	ldr	r2, [pc, #224]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a1 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a76:	4b34      	ldr	r3, [pc, #208]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d05c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d141      	bne.n	8004b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b31      	ldr	r3, [pc, #196]	@ (8004b50 <HAL_RCC_OscConfig+0x478>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fc faa8 	bl	8000fe4 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fc faa4 	bl	8000fe4 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e087      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b27      	ldr	r3, [pc, #156]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	491b      	ldr	r1, [pc, #108]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b50 <HAL_RCC_OscConfig+0x478>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fc fa7d 	bl	8000fe4 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fc fa79 	bl	8000fe4 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e05c      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b00:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x416>
 8004b0c:	e054      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0e:	4b10      	ldr	r3, [pc, #64]	@ (8004b50 <HAL_RCC_OscConfig+0x478>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fc fa66 	bl	8000fe4 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fc fa62 	bl	8000fe4 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e045      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x444>
 8004b3a:	e03d      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e038      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x4ec>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d028      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d121      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11a      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d111      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0cc      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b68      	ldr	r3, [pc, #416]	@ (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d90c      	bls.n	8004c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b65      	ldr	r3, [pc, #404]	@ (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b63      	ldr	r3, [pc, #396]	@ (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0b8      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d020      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c1c:	4b59      	ldr	r3, [pc, #356]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a58      	ldr	r2, [pc, #352]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c34:	4b53      	ldr	r3, [pc, #332]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a52      	ldr	r2, [pc, #328]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c40:	4b50      	ldr	r3, [pc, #320]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	494d      	ldr	r1, [pc, #308]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d044      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	4b47      	ldr	r3, [pc, #284]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d119      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e07f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d107      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c86:	4b3f      	ldr	r3, [pc, #252]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e06f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c96:	4b3b      	ldr	r3, [pc, #236]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e067      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca6:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 0203 	bic.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4934      	ldr	r1, [pc, #208]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb8:	f7fc f994 	bl	8000fe4 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7fc f990 	bl	8000fe4 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e04f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 020c 	and.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d1eb      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b25      	ldr	r3, [pc, #148]	@ (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d20c      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b22      	ldr	r3, [pc, #136]	@ (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b20      	ldr	r3, [pc, #128]	@ (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e032      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b19      	ldr	r3, [pc, #100]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4916      	ldr	r1, [pc, #88]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	490e      	ldr	r1, [pc, #56]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d4e:	f000 f821 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	490a      	ldr	r1, [pc, #40]	@ (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	5ccb      	ldrb	r3, [r1, r3]
 8004d62:	fa22 f303 	lsr.w	r3, r2, r3
 8004d66:	4a09      	ldr	r2, [pc, #36]	@ (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d6a:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fc f8f4 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023c00 	.word	0x40023c00
 8004d84:	40023800 	.word	0x40023800
 8004d88:	08008bbc 	.word	0x08008bbc
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	20000004 	.word	0x20000004

08004d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d98:	b094      	sub	sp, #80	@ 0x50
 8004d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da0:	2300      	movs	r3, #0
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	2300      	movs	r3, #0
 8004da6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dac:	4b79      	ldr	r3, [pc, #484]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 030c 	and.w	r3, r3, #12
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d00d      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	f200 80e1 	bhi.w	8004f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d003      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0x3a>
 8004dc6:	e0db      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc8:	4b73      	ldr	r3, [pc, #460]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004dcc:	e0db      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dce:	4b73      	ldr	r3, [pc, #460]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x208>)
 8004dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dd2:	e0d8      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dde:	4b6d      	ldr	r3, [pc, #436]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d063      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dea:	4b6a      	ldr	r3, [pc, #424]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	2200      	movs	r2, #0
 8004df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004df4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dfe:	2300      	movs	r3, #0
 8004e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e06:	4622      	mov	r2, r4
 8004e08:	462b      	mov	r3, r5
 8004e0a:	f04f 0000 	mov.w	r0, #0
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	0159      	lsls	r1, r3, #5
 8004e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e18:	0150      	lsls	r0, r2, #5
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4621      	mov	r1, r4
 8004e20:	1a51      	subs	r1, r2, r1
 8004e22:	6139      	str	r1, [r7, #16]
 8004e24:	4629      	mov	r1, r5
 8004e26:	eb63 0301 	sbc.w	r3, r3, r1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e38:	4659      	mov	r1, fp
 8004e3a:	018b      	lsls	r3, r1, #6
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e42:	4651      	mov	r1, sl
 8004e44:	018a      	lsls	r2, r1, #6
 8004e46:	4651      	mov	r1, sl
 8004e48:	ebb2 0801 	subs.w	r8, r2, r1
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e66:	4690      	mov	r8, r2
 8004e68:	4699      	mov	r9, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	eb18 0303 	adds.w	r3, r8, r3
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	462b      	mov	r3, r5
 8004e74:	eb49 0303 	adc.w	r3, r9, r3
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e86:	4629      	mov	r1, r5
 8004e88:	024b      	lsls	r3, r1, #9
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e90:	4621      	mov	r1, r4
 8004e92:	024a      	lsls	r2, r1, #9
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ea4:	f7fb f990 	bl	80001c8 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb0:	e058      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb2:	4b38      	ldr	r3, [pc, #224]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	f04f 0000 	mov.w	r0, #0
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	0159      	lsls	r1, r3, #5
 8004eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ede:	0150      	lsls	r0, r2, #5
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eea:	4649      	mov	r1, r9
 8004eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f04:	ebb2 040a 	subs.w	r4, r2, sl
 8004f08:	eb63 050b 	sbc.w	r5, r3, fp
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	00eb      	lsls	r3, r5, #3
 8004f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1a:	00e2      	lsls	r2, r4, #3
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	4643      	mov	r3, r8
 8004f22:	18e3      	adds	r3, r4, r3
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	464b      	mov	r3, r9
 8004f28:	eb45 0303 	adc.w	r3, r5, r3
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	028b      	lsls	r3, r1, #10
 8004f3e:	4621      	mov	r1, r4
 8004f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f44:	4621      	mov	r1, r4
 8004f46:	028a      	lsls	r2, r1, #10
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	61fa      	str	r2, [r7, #28]
 8004f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f58:	f7fb f936 	bl	80001c8 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4613      	mov	r3, r2
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3750      	adds	r7, #80	@ 0x50
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	007a1200 	.word	0x007a1200

08004fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	@ (8004fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000000 	.word	0x20000000

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fbc:	f7ff fff0 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0a9b      	lsrs	r3, r3, #10
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	08008bcc 	.word	0x08008bcc

08004fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005004:	2b00      	cmp	r3, #0
 8005006:	d035      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005008:	4b62      	ldr	r3, [pc, #392]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800500e:	f7fb ffe9 	bl	8000fe4 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005016:	f7fb ffe5 	bl	8000fe4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0b0      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005028:	4b5b      	ldr	r3, [pc, #364]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	019a      	lsls	r2, r3, #6
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	071b      	lsls	r3, r3, #28
 8005040:	4955      	ldr	r1, [pc, #340]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005048:	4b52      	ldr	r3, [pc, #328]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800504a:	2201      	movs	r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800504e:	f7fb ffc9 	bl	8000fe4 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005056:	f7fb ffc5 	bl	8000fe4 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e090      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005068:	4b4b      	ldr	r3, [pc, #300]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8083 	beq.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4b44      	ldr	r3, [pc, #272]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	4a43      	ldr	r2, [pc, #268]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	@ 0x40
 8005092:	4b41      	ldr	r3, [pc, #260]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800509e:	4b3f      	ldr	r3, [pc, #252]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3e      	ldr	r2, [pc, #248]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050aa:	f7fb ff9b 	bl	8000fe4 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050b2:	f7fb ff97 	bl	8000fe4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e062      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c4:	4b35      	ldr	r3, [pc, #212]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050d0:	4b31      	ldr	r3, [pc, #196]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02f      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d028      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f8:	4b29      	ldr	r3, [pc, #164]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fe:	4b28      	ldr	r3, [pc, #160]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005104:	4a24      	ldr	r2, [pc, #144]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800510a:	4b23      	ldr	r3, [pc, #140]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d114      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005116:	f7fb ff65 	bl	8000fe4 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fb ff61 	bl	8000fe4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e02a      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800514c:	d10d      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800514e:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800515e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005162:	490d      	ldr	r1, [pc, #52]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
 8005168:	e005      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800516a:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005170:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005174:	6093      	str	r3, [r2, #8]
 8005176:	4b08      	ldr	r3, [pc, #32]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005178:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	4905      	ldr	r1, [pc, #20]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	42470068 	.word	0x42470068
 8005198:	40023800 	.word	0x40023800
 800519c:	40007000 	.word	0x40007000
 80051a0:	42470e40 	.word	0x42470e40

080051a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d13e      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051c2:	4b23      	ldr	r3, [pc, #140]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d12f      	bne.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051da:	617b      	str	r3, [r7, #20]
          break;
 80051dc:	e02f      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051de:	4b1c      	ldr	r3, [pc, #112]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ea:	d108      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051ec:	4b18      	ldr	r3, [pc, #96]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f4:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e007      	b.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051fe:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005206:	4a15      	ldr	r2, [pc, #84]	@ (800525c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800520e:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005222:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005228:	0f1b      	lsrs	r3, r3, #28
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]
          break;
 8005236:	e002      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
          break;
 800523c:	bf00      	nop
        }
      }
      break;
 800523e:	bf00      	nop
    }
  }
  return frequency;
 8005240:	697b      	ldr	r3, [r7, #20]
}
 8005242:	4618      	mov	r0, r3
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00bb8000 	.word	0x00bb8000
 8005258:	007a1200 	.word	0x007a1200
 800525c:	00f42400 	.word	0x00f42400

08005260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07b      	b.n	800536a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005282:	d009      	beq.n	8005298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
 800528a:	e005      	b.n	8005298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb fd2c 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0104 	and.w	r1, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	f003 0210 	and.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005372:	b084      	sub	sp, #16
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	f107 001c 	add.w	r0, r7, #28
 8005380:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	2b01      	cmp	r3, #1
 8005388:	d122      	bne.n	80053d0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800539e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d105      	bne.n	80053c4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9bf 	bl	8005748 <USB_CoreReset>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	e01a      	b.n	8005406 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9b3 	bl	8005748 <USB_CoreReset>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80053f8:	e005      	b.n	8005406 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10b      	bne.n	8005424 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f043 0206 	orr.w	r2, r3, #6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr

08005434 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0201 	bic.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d115      	bne.n	80054c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7fb fda8 	bl	8000ffc <HAL_Delay>
      ms++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f939 	bl	800572a <USB_GetMode>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d01e      	beq.n	80054fc <USB_SetCurrentMode+0x84>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b31      	cmp	r3, #49	@ 0x31
 80054c2:	d9f0      	bls.n	80054a6 <USB_SetCurrentMode+0x2e>
 80054c4:	e01a      	b.n	80054fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d115      	bne.n	80054f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054d8:	2001      	movs	r0, #1
 80054da:	f7fb fd8f 	bl	8000ffc <HAL_Delay>
      ms++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f920 	bl	800572a <USB_GetMode>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <USB_SetCurrentMode+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b31      	cmp	r3, #49	@ 0x31
 80054f4:	d9f0      	bls.n	80054d8 <USB_SetCurrentMode+0x60>
 80054f6:	e001      	b.n	80054fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e005      	b.n	8005508 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b32      	cmp	r3, #50	@ 0x32
 8005500:	d101      	bne.n	8005506 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <USB_FlushTxFifo+0x64>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e01b      	b.n	8005568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	daf2      	bge.n	800551e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	019b      	lsls	r3, r3, #6
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a08      	ldr	r2, [pc, #32]	@ (8005574 <USB_FlushTxFifo+0x64>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d0f0      	beq.n	8005548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a11      	ldr	r2, [pc, #68]	@ (80055d4 <USB_FlushRxFifo+0x5c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e018      	b.n	80055c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	daf2      	bge.n	8005584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2210      	movs	r2, #16
 80055a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a08      	ldr	r2, [pc, #32]	@ (80055d4 <USB_FlushRxFifo+0x5c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d0f0      	beq.n	80055a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	00030d40 	.word	0x00030d40

080055d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	@ 0x24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4611      	mov	r1, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	460b      	mov	r3, r1
 80055e8:	71fb      	strb	r3, [r7, #7]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d123      	bne.n	8005646 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055fe:	88bb      	ldrh	r3, [r7, #4]
 8005600:	3303      	adds	r3, #3
 8005602:	089b      	lsrs	r3, r3, #2
 8005604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e018      	b.n	800563e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	031a      	lsls	r2, r3, #12
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005618:	461a      	mov	r2, r3
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3301      	adds	r3, #1
 800562a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	3301      	adds	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3301      	adds	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	3301      	adds	r3, #1
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d3e2      	bcc.n	800560c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3724      	adds	r7, #36	@ 0x24
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005654:	b480      	push	{r7}
 8005656:	b08b      	sub	sp, #44	@ 0x2c
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	b29b      	uxth	r3, r3
 8005670:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	e014      	b.n	80056aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	601a      	str	r2, [r3, #0]
    pDest++;
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	3301      	adds	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	3301      	adds	r3, #1
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	3301      	adds	r3, #1
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	3301      	adds	r3, #1
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d3e6      	bcc.n	8005680 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056b2:	8bfb      	ldrh	r3, [r7, #30]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01e      	beq.n	80056f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c2:	461a      	mov	r2, r3
 80056c4:	f107 0310 	add.w	r3, r7, #16
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	701a      	strb	r2, [r3, #0]
      i++;
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	3301      	adds	r3, #1
 80056e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	3301      	adds	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80056ea:	8bfb      	ldrh	r3, [r7, #30]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1ea      	bne.n	80056cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	372c      	adds	r7, #44	@ 0x2c
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0301 	and.w	r3, r3, #1
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a13      	ldr	r2, [pc, #76]	@ (80057ac <USB_CoreReset+0x64>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e01b      	b.n	800579e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	daf2      	bge.n	8005754 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a09      	ldr	r2, [pc, #36]	@ (80057ac <USB_CoreReset+0x64>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e006      	b.n	800579e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d0f0      	beq.n	800577e <USB_CoreReset+0x36>

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	00030d40 	.word	0x00030d40

080057b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b0:	b084      	sub	sp, #16
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10a      	bne.n	8005822 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e014      	b.n	800584c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e009      	b.n	800584c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005846:	f023 0304 	bic.w	r3, r3, #4
 800584a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800584c:	2110      	movs	r1, #16
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fe5e 	bl	8005510 <USB_FlushTxFifo>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fe8a 	bl	8005578 <USB_FlushRxFifo>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e015      	b.n	80058a0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005886:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3301      	adds	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3e5      	bcc.n	8005874 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058c8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a13      	ldr	r2, [pc, #76]	@ (800591c <USB_HostInit+0x16c>)
 80058ce:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a13      	ldr	r2, [pc, #76]	@ (8005920 <USB_HostInit+0x170>)
 80058d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80058d8:	e009      	b.n	80058ee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2280      	movs	r2, #128	@ 0x80
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a10      	ldr	r2, [pc, #64]	@ (8005924 <USB_HostInit+0x174>)
 80058e4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005928 <USB_HostInit+0x178>)
 80058ea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 0210 	orr.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	4b09      	ldr	r3, [pc, #36]	@ (800592c <USB_HostInit+0x17c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005918:	b004      	add	sp, #16
 800591a:	4770      	bx	lr
 800591c:	01000200 	.word	0x01000200
 8005920:	00e00300 	.word	0x00e00300
 8005924:	00600080 	.word	0x00600080
 8005928:	004000e0 	.word	0x004000e0
 800592c:	a3200008 	.word	0xa3200008

08005930 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005978:	461a      	mov	r2, r3
 800597a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800597e:	6053      	str	r3, [r2, #4]
 8005980:	e009      	b.n	8005996 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d106      	bne.n	8005996 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800598e:	461a      	mov	r2, r3
 8005990:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005994:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80059d4:	2064      	movs	r0, #100	@ 0x64
 80059d6:	f7fb fb11 	bl	8000ffc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059e8:	200a      	movs	r0, #10
 80059ea:	f7fb fb07 	bl	8000ffc <HAL_Delay>

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <USB_DriveVbus+0x44>
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a46:	d109      	bne.n	8005a5c <USB_DriveVbus+0x64>
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	0c5b      	lsrs	r3, r3, #17
 8005a88:	f003 0303 	and.w	r3, r3, #3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	b29b      	uxth	r3, r3
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	70fb      	strb	r3, [r7, #3]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70bb      	strb	r3, [r7, #2]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005af0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005af2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d87e      	bhi.n	8005bf8 <USB_HC_Init+0x13c>
 8005afa:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <USB_HC_Init+0x44>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005bbb 	.word	0x08005bbb
 8005b08:	08005b11 	.word	0x08005b11
 8005b0c:	08005b7d 	.word	0x08005b7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005b22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da10      	bge.n	8005b4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b4a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b4c:	e057      	b.n	8005bfe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d051      	beq.n	8005bfe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b78:	60d3      	str	r3, [r2, #12]
      break;
 8005b7a:	e040      	b.n	8005bfe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005b8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da34      	bge.n	8005c02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005bb8:	e023      	b.n	8005c02 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f240 2325 	movw	r3, #549	@ 0x225
 8005bcc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da17      	bge.n	8005c06 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005bf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005bf6:	e006      	b.n	8005c06 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	77fb      	strb	r3, [r7, #31]
      break;
 8005bfc:	e004      	b.n	8005c08 <USB_HC_Init+0x14c>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <USB_HC_Init+0x14c>
      break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <USB_HC_Init+0x14c>
      break;
 8005c06:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	2101      	movs	r1, #1
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	6939      	ldr	r1, [r7, #16]
 8005c3e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c42:	4313      	orrs	r3, r2
 8005c44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da03      	bge.n	8005c62 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e001      	b.n	8005c66 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff feff 	bl	8005a6a <USB_GetHostSpeed>
 8005c6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d106      	bne.n	8005c84 <USB_HC_Init+0x1c8>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d003      	beq.n	8005c84 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e001      	b.n	8005c88 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c88:	787b      	ldrb	r3, [r7, #1]
 8005c8a:	059b      	lsls	r3, r3, #22
 8005c8c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c90:	78bb      	ldrb	r3, [r7, #2]
 8005c92:	02db      	lsls	r3, r3, #11
 8005c94:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c9e:	049b      	lsls	r3, r3, #18
 8005ca0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ca4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ca6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	0159      	lsls	r1, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	440b      	add	r3, r1
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cbe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cc4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005cc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d003      	beq.n	8005cd6 <USB_HC_Init+0x21a>
 8005cce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10f      	bne.n	8005cf6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cf4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	@ 0x30
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d02d      	beq.n	8005d86 <USB_HC_StartXfer+0x86>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d129      	bne.n	8005d86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d117      	bne.n	8005d68 <USB_HC_StartXfer+0x68>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	79db      	ldrb	r3, [r3, #7]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <USB_HC_StartXfer+0x48>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	79db      	ldrb	r3, [r3, #7]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d10f      	bne.n	8005d68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <USB_HC_StartXfer+0x86>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	795b      	ldrb	r3, [r3, #5]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fa0f 	bl	80061a0 <USB_DoPing>
      return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e0f8      	b.n	8005f78 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	8912      	ldrh	r2, [r2, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	8912      	ldrh	r2, [r2, #8]
 8005d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da2:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8005da4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005da6:	8b7b      	ldrh	r3, [r7, #26]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d90b      	bls.n	8005dc4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005dac:	8b7b      	ldrh	r3, [r7, #26]
 8005dae:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005db0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	8912      	ldrh	r2, [r2, #8]
 8005db6:	fb03 f202 	mul.w	r2, r3, r2
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	611a      	str	r2, [r3, #16]
 8005dbe:	e001      	b.n	8005dc4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	78db      	ldrb	r3, [r3, #3]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	8912      	ldrh	r2, [r2, #8]
 8005dd2:	fb03 f202 	mul.w	r2, r3, r2
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e003      	b.n	8005de4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dee:	04d9      	lsls	r1, r3, #19
 8005df0:	4b63      	ldr	r3, [pc, #396]	@ (8005f80 <USB_HC_StartXfer+0x280>)
 8005df2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005df4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7a9b      	ldrb	r3, [r3, #10]
 8005dfa:	075b      	lsls	r3, r3, #29
 8005dfc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e00:	69f9      	ldr	r1, [r7, #28]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	6a39      	ldr	r1, [r7, #32]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68d9      	ldr	r1, [r3, #12]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e26:	460a      	mov	r2, r1
 8005e28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	7e7b      	ldrb	r3, [r7, #25]
 8005e72:	075b      	lsls	r3, r3, #29
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	0148      	lsls	r0, r1, #5
 8005e78:	6a39      	ldr	r1, [r7, #32]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	e003      	b.n	8005eb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005eb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eca:	461a      	mov	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e04e      	b.n	8005f78 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	78db      	ldrb	r3, [r3, #3]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d149      	bne.n	8005f76 <USB_HC_StartXfer+0x276>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d045      	beq.n	8005f76 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	79db      	ldrb	r3, [r3, #7]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d830      	bhi.n	8005f54 <USB_HC_StartXfer+0x254>
 8005ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef8 <USB_HC_StartXfer+0x1f8>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	08005f09 	.word	0x08005f09
 8005f04:	08005f2d 	.word	0x08005f2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	3303      	adds	r3, #3
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f12:	8afa      	ldrh	r2, [r7, #22]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d91c      	bls.n	8005f58 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f2a:	e015      	b.n	8005f58 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	3303      	adds	r3, #3
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f36:	8afa      	ldrh	r2, [r7, #22]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d90a      	bls.n	8005f5c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f52:	e003      	b.n	8005f5c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <USB_HC_StartXfer+0x25e>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <USB_HC_StartXfer+0x25e>
        break;
 8005f5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68d9      	ldr	r1, [r3, #12]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	785a      	ldrb	r2, [r3, #1]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	9000      	str	r0, [sp, #0]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fb31 	bl	80055d8 <USB_WritePacket>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	@ 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	1ff80000 	.word	0x1ff80000

08005f84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	b29b      	uxth	r3, r3
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b089      	sub	sp, #36	@ 0x24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	0c9b      	lsrs	r3, r3, #18
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	0fdb      	lsrs	r3, r3, #31
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d104      	bne.n	8006000 <USB_HC_Halt+0x5a>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e0c8      	b.n	8006192 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <USB_HC_Halt+0x66>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d163      	bne.n	80060d4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006026:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800602a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 80ab 	bne.w	8006190 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d133      	bne.n	80060ae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006064:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	440a      	add	r2, r1
 800607c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006080:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006084:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3301      	adds	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006092:	d81d      	bhi.n	80060d0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060aa:	d0ec      	beq.n	8006086 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060ac:	e070      	b.n	8006190 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060ce:	e05f      	b.n	8006190 <USB_HC_Halt+0x1ea>
            break;
 80060d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060d2:	e05d      	b.n	8006190 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d133      	bne.n	800616c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800611e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006122:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800613e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006142:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006150:	d81d      	bhi.n	800618e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006168:	d0ec      	beq.n	8006144 <USB_HC_Halt+0x19e>
 800616a:	e011      	b.n	8006190 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	440a      	add	r2, r1
 8006182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006186:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e000      	b.n	8006190 <USB_HC_Halt+0x1ea>
          break;
 800618e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3724      	adds	r7, #36	@ 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80061b4:	2301      	movs	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	04da      	lsls	r2, r3, #19
 80061bc:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <USB_DoPing+0x74>)
 80061be:	4013      	ands	r3, r2
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	1ff80000 	.word	0x1ff80000

08006218 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff f912 	bl	8005456 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006232:	2110      	movs	r1, #16
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff f96b 	bl	8005510 <USB_FlushTxFifo>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f997 	bl	8005578 <USB_FlushRxFifo>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006254:	2300      	movs	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e01f      	b.n	800629a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006270:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006278:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006280:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628e:	461a      	mov	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	3301      	adds	r3, #1
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d9dc      	bls.n	800625a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e034      	b.n	8006310 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062da:	461a      	mov	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ec:	d80c      	bhi.n	8006308 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006304:	d0ec      	beq.n	80062e0 <USB_StopHost+0xc8>
 8006306:	e000      	b.n	800630a <USB_StopHost+0xf2>
        break;
 8006308:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	3301      	adds	r3, #1
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d9c7      	bls.n	80062a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006322:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800632a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff f881 	bl	8005434 <USB_EnableGlobalInt>

  return ret;
 8006332:	7ffb      	ldrb	r3, [r7, #31]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b089      	sub	sp, #36	@ 0x24
 8006340:	af04      	add	r7, sp, #16
 8006342:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006344:	2301      	movs	r3, #1
 8006346:	2202      	movs	r2, #2
 8006348:	2102      	movs	r1, #2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fc66 	bl	8006c1c <USBH_FindInterface>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2bff      	cmp	r3, #255	@ 0xff
 8006358:	d002      	beq.n	8006360 <USBH_CDC_InterfaceInit+0x24>
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d901      	bls.n	8006364 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006360:	2302      	movs	r3, #2
 8006362:	e13d      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc3b 	bl	8006be4 <USBH_SelectInterface>
 800636e:	4603      	mov	r3, r0
 8006370:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006378:	2302      	movs	r3, #2
 800637a:	e131      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006382:	2050      	movs	r0, #80	@ 0x50
 8006384:	f002 fac0 	bl	8008908 <malloc>
 8006388:	4603      	mov	r3, r0
 800638a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800639c:	2302      	movs	r3, #2
 800639e:	e11f      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80063a0:	2250      	movs	r2, #80	@ 0x50
 80063a2:	2100      	movs	r1, #0
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f002 fb6d 	bl	8008a84 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	211a      	movs	r1, #26
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da15      	bge.n	80063ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	211a      	movs	r1, #26
 80063c8:	fb01 f303 	mul.w	r3, r1, r3
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063d2:	781a      	ldrb	r2, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	211a      	movs	r1, #26
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 ff1c 	bl	8008232 <USBH_AllocPipe>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	7819      	ldrb	r1, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	7858      	ldrb	r0, [r3, #1]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	8952      	ldrh	r2, [r2, #10]
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	2203      	movs	r2, #3
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4623      	mov	r3, r4
 8006424:	4602      	mov	r2, r0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fed4 	bl	80081d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f002 f9e3 	bl	8008800 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800643a:	2300      	movs	r3, #0
 800643c:	2200      	movs	r2, #0
 800643e:	210a      	movs	r1, #10
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fbeb 	bl	8006c1c <USBH_FindInterface>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2bff      	cmp	r3, #255	@ 0xff
 800644e:	d002      	beq.n	8006456 <USBH_CDC_InterfaceInit+0x11a>
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d901      	bls.n	800645a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006456:	2302      	movs	r3, #2
 8006458:	e0c2      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	211a      	movs	r1, #26
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b25b      	sxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	da16      	bge.n	80064a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	211a      	movs	r1, #26
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	4413      	add	r3, r2
 800647e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	211a      	movs	r1, #26
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	835a      	strh	r2, [r3, #26]
 800649e:	e015      	b.n	80064cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	211a      	movs	r1, #26
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	211a      	movs	r1, #26
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	211a      	movs	r1, #26
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da16      	bge.n	8006512 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	211a      	movs	r1, #26
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	211a      	movs	r1, #26
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800650a:	881a      	ldrh	r2, [r3, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	835a      	strh	r2, [r3, #26]
 8006510:	e015      	b.n	800653e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	211a      	movs	r1, #26
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	4413      	add	r3, r2
 800651e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	211a      	movs	r1, #26
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	7b9b      	ldrb	r3, [r3, #14]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fe74 	bl	8008232 <USBH_AllocPipe>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7bdb      	ldrb	r3, [r3, #15]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fe6a 	bl	8008232 <USBH_AllocPipe>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	7b59      	ldrb	r1, [r3, #13]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	7b98      	ldrb	r0, [r3, #14]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	8b12      	ldrh	r2, [r2, #24]
 800657e:	9202      	str	r2, [sp, #8]
 8006580:	2202      	movs	r2, #2
 8006582:	9201      	str	r2, [sp, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4623      	mov	r3, r4
 8006588:	4602      	mov	r2, r0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fe22 	bl	80081d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	7b19      	ldrb	r1, [r3, #12]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	7bd8      	ldrb	r0, [r3, #15]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	8b52      	ldrh	r2, [r2, #26]
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	2202      	movs	r2, #2
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4623      	mov	r3, r4
 80065b2:	4602      	mov	r2, r0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fe0d 	bl	80081d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	7b5b      	ldrb	r3, [r3, #13]
 80065c6:	2200      	movs	r2, #0
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f002 f918 	bl	8008800 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	7b1b      	ldrb	r3, [r3, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 f911 	bl	8008800 <USBH_LL_SetToggle>

  return USBH_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}

080065e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fe02 	bl	8008212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fe2d 	bl	8008274 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7b1b      	ldrb	r3, [r3, #12]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fdef 	bl	8008212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7b1b      	ldrb	r3, [r3, #12]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fe1a 	bl	8008274 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	7b5b      	ldrb	r3, [r3, #13]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	7b5b      	ldrb	r3, [r3, #13]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fddc 	bl	8008212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	7b5b      	ldrb	r3, [r3, #13]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fe07 	bl	8008274 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4618      	mov	r0, r3
 8006682:	f002 f949 	bl	8008918 <free>
    phost->pActiveClass->pData = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800668c:	2200      	movs	r2, #0
 800668e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3340      	adds	r3, #64	@ 0x40
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8b1 	bl	800681a <GetLineCoding>
 80066b8:	4603      	mov	r3, r0
 80066ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80066c8:	2102      	movs	r1, #2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066ce:	7afb      	ldrb	r3, [r7, #11]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d877      	bhi.n	80067ec <USBH_CDC_Process+0x114>
 80066fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006704 <USBH_CDC_Process+0x2c>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006719 	.word	0x08006719
 8006708:	0800671f 	.word	0x0800671f
 800670c:	0800674f 	.word	0x0800674f
 8006710:	080067c3 	.word	0x080067c3
 8006714:	080067d1 	.word	0x080067d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
      break;
 800671c:	e06d      	b.n	80067fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f897 	bl	8006858 <SetLineCoding>
 800672a:	4603      	mov	r3, r0
 800672c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800673c:	e058      	b.n	80067f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d055      	beq.n	80067f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2204      	movs	r2, #4
 8006748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800674c:	e050      	b.n	80067f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3340      	adds	r3, #64	@ 0x40
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f860 	bl	800681a <GetLineCoding>
 800675a:	4603      	mov	r3, r0
 800675c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d126      	bne.n	80067b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006776:	791b      	ldrb	r3, [r3, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d13b      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006786:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006788:	429a      	cmp	r2, r3
 800678a:	d133      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006796:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006798:	429a      	cmp	r2, r3
 800679a:	d12b      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d124      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f958 	bl	8006a60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067b0:	e020      	b.n	80067f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d01d      	beq.n	80067f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2204      	movs	r2, #4
 80067bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80067c0:	e018      	b.n	80067f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f867 	bl	8006896 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8da 	bl	8006982 <CDC_ProcessReception>
      break;
 80067ce:	e014      	b.n	80067fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 ffe7 	bl	80077a6 <USBH_ClrFeature>
 80067d8:	4603      	mov	r3, r0
 80067da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80067ea:	e005      	b.n	80067f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80067ec:	bf00      	nop
 80067ee:	e004      	b.n	80067fa <USBH_CDC_Process+0x122>
      break;
 80067f0:	bf00      	nop
 80067f2:	e002      	b.n	80067fa <USBH_CDC_Process+0x122>
      break;
 80067f4:	bf00      	nop
 80067f6:	e000      	b.n	80067fa <USBH_CDC_Process+0x122>
      break;
 80067f8:	bf00      	nop

  }

  return status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22a1      	movs	r2, #161	@ 0xa1
 8006828:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2221      	movs	r2, #33	@ 0x21
 800682e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2207      	movs	r2, #7
 8006840:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2207      	movs	r2, #7
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fa72 	bl	8007d32 <USBH_CtlReq>
 800684e:	4603      	mov	r3, r0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2221      	movs	r2, #33	@ 0x21
 8006866:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2207      	movs	r2, #7
 800687e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2207      	movs	r2, #7
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 fa53 	bl	8007d32 <USBH_CtlReq>
 800688c:	4603      	mov	r3, r0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af02      	add	r7, sp, #8
 800689c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d002      	beq.n	80068bc <CDC_ProcessTransmission+0x26>
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d023      	beq.n	8006902 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80068ba:	e05e      	b.n	800697a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	8b12      	ldrh	r2, [r2, #24]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d90b      	bls.n	80068e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8b1a      	ldrh	r2, [r3, #24]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	7b5b      	ldrb	r3, [r3, #13]
 80068d4:	2001      	movs	r0, #1
 80068d6:	9000      	str	r0, [sp, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fc38 	bl	800814e <USBH_BulkSendData>
 80068de:	e00b      	b.n	80068f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7b5b      	ldrb	r3, [r3, #13]
 80068ee:	2001      	movs	r0, #1
 80068f0:	9000      	str	r0, [sp, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fc2b 	bl	800814e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006900:	e03b      	b.n	800697a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	7b5b      	ldrb	r3, [r3, #13]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 ff4f 	bl	80087ac <USBH_LL_GetURBState>
 800690e:	4603      	mov	r3, r0
 8006910:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d128      	bne.n	800696a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	8b12      	ldrh	r2, [r2, #24]
 8006920:	4293      	cmp	r3, r2
 8006922:	d90e      	bls.n	8006942 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	8b12      	ldrh	r2, [r2, #24]
 800692c:	1a9a      	subs	r2, r3, r2
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	8b12      	ldrh	r2, [r2, #24]
 800693a:	441a      	add	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]
 8006940:	e002      	b.n	8006948 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006958:	e00e      	b.n	8006978 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f868 	bl	8006a38 <USBH_CDC_TransmitCallback>
      break;
 8006968:	e006      	b.n	8006978 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d103      	bne.n	8006978 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006978:	bf00      	nop
  }
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006994:	2300      	movs	r3, #0
 8006996:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d002      	beq.n	80069a8 <CDC_ProcessReception+0x26>
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d00e      	beq.n	80069c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80069a6:	e043      	b.n	8006a30 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	6a19      	ldr	r1, [r3, #32]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	8b5a      	ldrh	r2, [r3, #26]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	7b1b      	ldrb	r3, [r3, #12]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fbef 	bl	8008198 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2204      	movs	r2, #4
 80069be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80069c2:	e035      	b.n	8006a30 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	7b1b      	ldrb	r3, [r3, #12]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 feee 	bl	80087ac <USBH_LL_GetURBState>
 80069d0:	4603      	mov	r3, r0
 80069d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069d4:	7cfb      	ldrb	r3, [r7, #19]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d129      	bne.n	8006a2e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	7b1b      	ldrb	r3, [r3, #12]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fe51 	bl	8008688 <USBH_LL_GetLastXferSize>
 80069e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d016      	beq.n	8006a20 <CDC_ProcessReception+0x9e>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	8b5b      	ldrh	r3, [r3, #26]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d910      	bls.n	8006a20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad2      	subs	r2, r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a1a      	ldr	r2, [r3, #32]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	441a      	add	r2, r3
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006a1e:	e006      	b.n	8006a2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f80f 	bl	8006a4c <USBH_CDC_ReceiveCallback>
      break;
 8006a2e:	bf00      	nop
  }
}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e029      	b.n	8006ae0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	79fa      	ldrb	r2, [r7, #7]
 8006a90:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f81f 	bl	8006ae8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f001 fd21 	bl	8008520 <USBH_LL_Init>

  return USBH_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e009      	b.n	8006b0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	33e0      	adds	r3, #224	@ 0xe0
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	2200      	movs	r2, #0
 8006b06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b0f      	cmp	r3, #15
 8006b12:	d9f2      	bls.n	8006afa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e009      	b.n	8006b2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b34:	d3f1      	bcc.n	8006b1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2240      	movs	r2, #64	@ 0x40
 8006b5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10e      	bne.n	8006bcc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	33de      	adds	r3, #222	@ 0xde
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
 8006bca:	e004      	b.n	8006bd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	73fb      	strb	r3, [r7, #15]
 8006bd0:	e001      	b.n	8006bd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d204      	bcs.n	8006c0a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006c08:	e001      	b.n	8006c0e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	4608      	mov	r0, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	70fb      	strb	r3, [r7, #3]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70bb      	strb	r3, [r7, #2]
 8006c32:	4613      	mov	r3, r2
 8006c34:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006c44:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c46:	e025      	b.n	8006c94 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	221a      	movs	r2, #26
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	3308      	adds	r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	3302      	adds	r3, #2
 8006c58:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	795b      	ldrb	r3, [r3, #5]
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d002      	beq.n	8006c6a <USBH_FindInterface+0x4e>
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	2bff      	cmp	r3, #255	@ 0xff
 8006c68:	d111      	bne.n	8006c8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c6e:	78ba      	ldrb	r2, [r7, #2]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d002      	beq.n	8006c7a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c74:	78bb      	ldrb	r3, [r7, #2]
 8006c76:	2bff      	cmp	r3, #255	@ 0xff
 8006c78:	d109      	bne.n	8006c8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c7e:	787a      	ldrb	r2, [r7, #1]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d002      	beq.n	8006c8a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c84:	787b      	ldrb	r3, [r7, #1]
 8006c86:	2bff      	cmp	r3, #255	@ 0xff
 8006c88:	d101      	bne.n	8006c8e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	e006      	b.n	8006c9c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	3301      	adds	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d9d6      	bls.n	8006c48 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c9a:	23ff      	movs	r3, #255	@ 0xff
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fc71 	bl	8008598 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fd8a 	bl	80087d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d102      	bne.n	8006cea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b0b      	cmp	r3, #11
 8006cf2:	f200 81bb 	bhi.w	800706c <USBH_Process+0x3a4>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <USBH_Process+0x34>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d5f 	.word	0x08006d5f
 8006d04:	08006dc7 	.word	0x08006dc7
 8006d08:	08007007 	.word	0x08007007
 8006d0c:	0800706d 	.word	0x0800706d
 8006d10:	08006e67 	.word	0x08006e67
 8006d14:	08006fad 	.word	0x08006fad
 8006d18:	08006e9d 	.word	0x08006e9d
 8006d1c:	08006ebd 	.word	0x08006ebd
 8006d20:	08006edb 	.word	0x08006edb
 8006d24:	08006f1f 	.word	0x08006f1f
 8006d28:	08006fef 	.word	0x08006fef
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 819b 	beq.w	8007070 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d40:	20c8      	movs	r0, #200	@ 0xc8
 8006d42:	f001 fd8d 	bl	8008860 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fc83 	bl	8008652 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d5c:	e188      	b.n	8007070 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d107      	bne.n	8006d78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d76:	e18a      	b.n	800708e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d82:	d914      	bls.n	8006dae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d903      	bls.n	8006da6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220d      	movs	r2, #13
 8006da2:	701a      	strb	r2, [r3, #0]
      break;
 8006da4:	e173      	b.n	800708e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e16f      	b.n	800708e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006db4:	f103 020a 	add.w	r2, r3, #10
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006dbe:	200a      	movs	r0, #10
 8006dc0:	f001 fd4e 	bl	8008860 <USBH_Delay>
      break;
 8006dc4:	e163      	b.n	800708e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ddc:	2064      	movs	r0, #100	@ 0x64
 8006dde:	f001 fd3f 	bl	8008860 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fc0e 	bl	8008604 <USBH_LL_GetSpeed>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2205      	movs	r2, #5
 8006df6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fa19 	bl	8008232 <USBH_AllocPipe>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e08:	2180      	movs	r1, #128	@ 0x80
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fa11 	bl	8008232 <USBH_AllocPipe>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7919      	ldrb	r1, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e2c:	9202      	str	r2, [sp, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	9201      	str	r2, [sp, #4]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	4603      	mov	r3, r0
 8006e36:	2280      	movs	r2, #128	@ 0x80
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f9cb 	bl	80081d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7959      	ldrb	r1, [r3, #5]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e52:	9202      	str	r2, [sp, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 f9b8 	bl	80081d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e64:	e113      	b.n	800708e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f916 	bl	8007098 <USBH_HandleEnum>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f040 80fd 	bne.w	8007074 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d103      	bne.n	8006e94 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2208      	movs	r2, #8
 8006e90:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e92:	e0ef      	b.n	8007074 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2207      	movs	r2, #7
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e0eb      	b.n	8007074 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80e8 	beq.w	8007078 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eae:	2101      	movs	r1, #1
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006eba:	e0dd      	b.n	8007078 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fc27 	bl	8007718 <USBH_SetCfg>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 80d5 	bne.w	800707c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2209      	movs	r2, #9
 8006ed6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ed8:	e0d0      	b.n	800707c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d016      	beq.n	8006f16 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006ee8:	2101      	movs	r1, #1
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc37 	bl	800775e <USBH_SetFeature>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	220a      	movs	r2, #10
 8006f00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f02:	e0bd      	b.n	8007080 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	f040 80b9 	bne.w	8007080 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	220a      	movs	r2, #10
 8006f12:	701a      	strb	r2, [r3, #0]
      break;
 8006f14:	e0b4      	b.n	8007080 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	220a      	movs	r2, #10
 8006f1a:	701a      	strb	r2, [r3, #0]
      break;
 8006f1c:	e0b0      	b.n	8007080 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80ad 	beq.w	8007084 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	e016      	b.n	8006f66 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f38:	7bfa      	ldrb	r2, [r7, #15]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32de      	adds	r2, #222	@ 0xde
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	791a      	ldrb	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d108      	bne.n	8006f60 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	32de      	adds	r2, #222	@ 0xde
 8006f54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006f5e:	e005      	b.n	8006f6c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	3301      	adds	r3, #1
 8006f64:	73fb      	strb	r3, [r7, #15]
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0e5      	beq.n	8006f38 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d016      	beq.n	8006fa4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f94:	2103      	movs	r1, #3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f9a:	e073      	b.n	8007084 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	220d      	movs	r2, #13
 8006fa0:	701a      	strb	r2, [r3, #0]
      break;
 8006fa2:	e06f      	b.n	8007084 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	220d      	movs	r2, #13
 8006fa8:	701a      	strb	r2, [r3, #0]
      break;
 8006faa:	e06b      	b.n	8007084 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d017      	beq.n	8006fe6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	220b      	movs	r2, #11
 8006fd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fd4:	e058      	b.n	8007088 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d154      	bne.n	8007088 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	220d      	movs	r2, #13
 8006fe2:	701a      	strb	r2, [r3, #0]
      break;
 8006fe4:	e050      	b.n	8007088 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220d      	movs	r2, #13
 8006fea:	701a      	strb	r2, [r3, #0]
      break;
 8006fec:	e04c      	b.n	8007088 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d049      	beq.n	800708c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
      }
      break;
 8007004:	e042      	b.n	800708c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fd6a 	bl	8006ae8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007042:	2105      	movs	r1, #5
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	d107      	bne.n	8007064 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fe23 	bl	8006ca8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007062:	e014      	b.n	800708e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fa97 	bl	8008598 <USBH_LL_Start>
      break;
 800706a:	e010      	b.n	800708e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800706c:	bf00      	nop
 800706e:	e00e      	b.n	800708e <USBH_Process+0x3c6>
      break;
 8007070:	bf00      	nop
 8007072:	e00c      	b.n	800708e <USBH_Process+0x3c6>
      break;
 8007074:	bf00      	nop
 8007076:	e00a      	b.n	800708e <USBH_Process+0x3c6>
    break;
 8007078:	bf00      	nop
 800707a:	e008      	b.n	800708e <USBH_Process+0x3c6>
      break;
 800707c:	bf00      	nop
 800707e:	e006      	b.n	800708e <USBH_Process+0x3c6>
      break;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <USBH_Process+0x3c6>
      break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <USBH_Process+0x3c6>
      break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <USBH_Process+0x3c6>
      break;
 800708c:	bf00      	nop
  }
  return USBH_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af04      	add	r7, sp, #16
 800709e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b07      	cmp	r3, #7
 80070ae:	f200 81bd 	bhi.w	800742c <USBH_HandleEnum+0x394>
 80070b2:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <USBH_HandleEnum+0x20>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	08007193 	.word	0x08007193
 80070c0:	080071fd 	.word	0x080071fd
 80070c4:	08007287 	.word	0x08007287
 80070c8:	080072f1 	.word	0x080072f1
 80070cc:	08007361 	.word	0x08007361
 80070d0:	080073a7 	.word	0x080073a7
 80070d4:	080073ed 	.word	0x080073ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070d8:	2108      	movs	r1, #8
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa4c 	bl	8007578 <USBH_Get_DevDesc>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d12e      	bne.n	8007148 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7919      	ldrb	r1, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800710e:	9202      	str	r2, [sp, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	9201      	str	r2, [sp, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	4603      	mov	r3, r0
 8007118:	2280      	movs	r2, #128	@ 0x80
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 f85a 	bl	80081d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7959      	ldrb	r1, [r3, #5]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	9201      	str	r2, [sp, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4603      	mov	r3, r0
 800713e:	2200      	movs	r2, #0
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 f847 	bl	80081d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007146:	e173      	b.n	8007430 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b03      	cmp	r3, #3
 800714c:	f040 8170 	bne.w	8007430 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007156:	3301      	adds	r3, #1
 8007158:	b2da      	uxtb	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007166:	2b03      	cmp	r3, #3
 8007168:	d903      	bls.n	8007172 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	220d      	movs	r2, #13
 800716e:	701a      	strb	r2, [r3, #0]
      break;
 8007170:	e15e      	b.n	8007430 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	795b      	ldrb	r3, [r3, #5]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f87b 	bl	8008274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	791b      	ldrb	r3, [r3, #4]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f875 	bl	8008274 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
      break;
 8007190:	e14e      	b.n	8007430 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007192:	2112      	movs	r1, #18
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f9ef 	bl	8007578 <USBH_Get_DevDesc>
 800719a:	4603      	mov	r3, r0
 800719c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071aa:	e143      	b.n	8007434 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	f040 8140 	bne.w	8007434 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071ba:	3301      	adds	r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d903      	bls.n	80071d6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	220d      	movs	r2, #13
 80071d2:	701a      	strb	r2, [r3, #0]
      break;
 80071d4:	e12e      	b.n	8007434 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	795b      	ldrb	r3, [r3, #5]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 f849 	bl	8008274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 f843 	bl	8008274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
      break;
 80071fa:	e11b      	b.n	8007434 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80071fc:	2101      	movs	r1, #1
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa66 	bl	80076d0 <USBH_SetAddress>
 8007204:	4603      	mov	r3, r0
 8007206:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d130      	bne.n	8007270 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800720e:	2002      	movs	r0, #2
 8007210:	f001 fb26 	bl	8008860 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7919      	ldrb	r1, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007236:	9202      	str	r2, [sp, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	9201      	str	r2, [sp, #4]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	4603      	mov	r3, r0
 8007240:	2280      	movs	r2, #128	@ 0x80
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 ffc6 	bl	80081d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7959      	ldrb	r1, [r3, #5]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800725c:	9202      	str	r2, [sp, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	9201      	str	r2, [sp, #4]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4603      	mov	r3, r0
 8007266:	2200      	movs	r2, #0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 ffb3 	bl	80081d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800726e:	e0e3      	b.n	8007438 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b03      	cmp	r3, #3
 8007274:	f040 80e0 	bne.w	8007438 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	705a      	strb	r2, [r3, #1]
      break;
 8007284:	e0d8      	b.n	8007438 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007286:	2109      	movs	r1, #9
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f99d 	bl	80075c8 <USBH_Get_CfgDesc>
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800729e:	e0cd      	b.n	800743c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	f040 80ca 	bne.w	800743c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072ae:	3301      	adds	r3, #1
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d903      	bls.n	80072ca <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e0b8      	b.n	800743c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 ffcf 	bl	8008274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 ffc9 	bl	8008274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
      break;
 80072ee:	e0a5      	b.n	800743c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f965 	bl	80075c8 <USBH_Get_CfgDesc>
 80072fe:	4603      	mov	r3, r0
 8007300:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2205      	movs	r2, #5
 800730c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800730e:	e097      	b.n	8007440 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b03      	cmp	r3, #3
 8007314:	f040 8094 	bne.w	8007440 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800731e:	3301      	adds	r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800732e:	2b03      	cmp	r3, #3
 8007330:	d903      	bls.n	800733a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	220d      	movs	r2, #13
 8007336:	701a      	strb	r2, [r3, #0]
      break;
 8007338:	e082      	b.n	8007440 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	795b      	ldrb	r3, [r3, #5]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 ff97 	bl	8008274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	791b      	ldrb	r3, [r3, #4]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 ff91 	bl	8008274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
      break;
 800735e:	e06f      	b.n	8007440 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007366:	2b00      	cmp	r3, #0
 8007368:	d019      	beq.n	800739e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007376:	23ff      	movs	r3, #255	@ 0xff
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f949 	bl	8007610 <USBH_Get_StringDesc>
 800737e:	4603      	mov	r3, r0
 8007380:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d103      	bne.n	8007390 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2206      	movs	r2, #6
 800738c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800738e:	e059      	b.n	8007444 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b03      	cmp	r3, #3
 8007394:	d156      	bne.n	8007444 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2206      	movs	r2, #6
 800739a:	705a      	strb	r2, [r3, #1]
      break;
 800739c:	e052      	b.n	8007444 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2206      	movs	r2, #6
 80073a2:	705a      	strb	r2, [r3, #1]
      break;
 80073a4:	e04e      	b.n	8007444 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d019      	beq.n	80073e4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073bc:	23ff      	movs	r3, #255	@ 0xff
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f926 	bl	8007610 <USBH_Get_StringDesc>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2207      	movs	r2, #7
 80073d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073d4:	e038      	b.n	8007448 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d135      	bne.n	8007448 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2207      	movs	r2, #7
 80073e0:	705a      	strb	r2, [r3, #1]
      break;
 80073e2:	e031      	b.n	8007448 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2207      	movs	r2, #7
 80073e8:	705a      	strb	r2, [r3, #1]
      break;
 80073ea:	e02d      	b.n	8007448 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d017      	beq.n	8007426 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007402:	23ff      	movs	r3, #255	@ 0xff
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f903 	bl	8007610 <USBH_Get_StringDesc>
 800740a:	4603      	mov	r3, r0
 800740c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007418:	e018      	b.n	800744c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d115      	bne.n	800744c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
      break;
 8007424:	e012      	b.n	800744c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
      break;
 800742a:	e00f      	b.n	800744c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800742c:	bf00      	nop
 800742e:	e00e      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 8007430:	bf00      	nop
 8007432:	e00c      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 8007434:	bf00      	nop
 8007436:	e00a      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 8007438:	bf00      	nop
 800743a:	e008      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 800743c:	bf00      	nop
 800743e:	e006      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 8007440:	bf00      	nop
 8007442:	e004      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 8007444:	bf00      	nop
 8007446:	e002      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 8007448:	bf00      	nop
 800744a:	e000      	b.n	800744e <USBH_HandleEnum+0x3b6>
      break;
 800744c:	bf00      	nop
  }
  return Status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f804 	bl	800749a <USBH_HandleSof>
}
 8007492:	bf00      	nop
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b0b      	cmp	r3, #11
 80074aa:	d10a      	bne.n	80074c2 <USBH_HandleSof+0x28>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
  }
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074da:	bf00      	nop
}
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80074f6:	bf00      	nop
}
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f83c 	bl	80085ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fe89 	bl	8008274 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	795b      	ldrb	r3, [r3, #5]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fe83 	bl	8008274 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af02      	add	r7, sp, #8
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	b29b      	uxth	r3, r3
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f864 	bl	8007666 <USBH_GetDescriptor>
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f203 3026 	addw	r0, r3, #806	@ 0x326
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	b292      	uxth	r2, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	f000 f919 	bl	80077f0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	331c      	adds	r3, #28
 80075d8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075da:	887b      	ldrh	r3, [r7, #2]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075e4:	2100      	movs	r1, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f83d 	bl	8007666 <USBH_GetDescriptor>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80075f6:	887b      	ldrh	r3, [r7, #2]
 80075f8:	461a      	mov	r2, r3
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f985 	bl	800790c <USBH_ParseCfgDesc>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	461a      	mov	r2, r3
 800761c:	460b      	mov	r3, r1
 800761e:	72fb      	strb	r3, [r7, #11]
 8007620:	4613      	mov	r3, r2
 8007622:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	b29b      	uxth	r3, r3
 8007628:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800762c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007634:	893b      	ldrh	r3, [r7, #8]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	460b      	mov	r3, r1
 800763a:	2100      	movs	r1, #0
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f812 	bl	8007666 <USBH_GetDescriptor>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d107      	bne.n	800765c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007652:	893a      	ldrh	r2, [r7, #8]
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fb1e 	bl	8007c98 <USBH_ParseStringDesc>
  }

  return status;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	72fb      	strb	r3, [r7, #11]
 8007674:	4613      	mov	r3, r2
 8007676:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	789b      	ldrb	r3, [r3, #2]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d11c      	bne.n	80076ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007686:	b2da      	uxtb	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2206      	movs	r2, #6
 8007690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	893a      	ldrh	r2, [r7, #8]
 8007696:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007698:	893b      	ldrh	r3, [r7, #8]
 800769a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800769e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a2:	d104      	bne.n	80076ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f240 4209 	movw	r2, #1033	@ 0x409
 80076aa:	829a      	strh	r2, [r3, #20]
 80076ac:	e002      	b.n	80076b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8b3a      	ldrh	r2, [r7, #24]
 80076b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076ba:	8b3b      	ldrh	r3, [r7, #24]
 80076bc:	461a      	mov	r2, r3
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fb36 	bl	8007d32 <USBH_CtlReq>
 80076c6:	4603      	mov	r3, r0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	789b      	ldrb	r3, [r3, #2]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10f      	bne.n	8007704 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2205      	movs	r2, #5
 80076ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fb12 	bl	8007d32 <USBH_CtlReq>
 800770e:	4603      	mov	r3, r0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	789b      	ldrb	r3, [r3, #2]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10e      	bne.n	800774a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2209      	movs	r2, #9
 8007736:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	887a      	ldrh	r2, [r7, #2]
 800773c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 faef 	bl	8007d32 <USBH_CtlReq>
 8007754:	4603      	mov	r3, r0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	789b      	ldrb	r3, [r3, #2]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10f      	bne.n	8007792 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2203      	movs	r2, #3
 800777c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	b29a      	uxth	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007792:	2200      	movs	r2, #0
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 facb 	bl	8007d32 <USBH_CtlReq>
 800779c:	4603      	mov	r3, r0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	789b      	ldrb	r3, [r3, #2]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d10f      	bne.n	80077da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 faa7 	bl	8007d32 <USBH_CtlReq>
 80077e4:	4603      	mov	r3, r0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	785a      	ldrb	r2, [r3, #1]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	3302      	adds	r3, #2
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3303      	adds	r3, #3
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	b29b      	uxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	791a      	ldrb	r2, [r3, #4]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	795a      	ldrb	r2, [r3, #5]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	799a      	ldrb	r2, [r3, #6]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	79da      	ldrb	r2, [r3, #7]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	79db      	ldrb	r3, [r3, #7]
 800784c:	2b20      	cmp	r3, #32
 800784e:	dc0f      	bgt.n	8007870 <USBH_ParseDevDesc+0x80>
 8007850:	2b08      	cmp	r3, #8
 8007852:	db14      	blt.n	800787e <USBH_ParseDevDesc+0x8e>
 8007854:	3b08      	subs	r3, #8
 8007856:	4a2c      	ldr	r2, [pc, #176]	@ (8007908 <USBH_ParseDevDesc+0x118>)
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <USBH_ParseDevDesc+0x84>
 800786e:	e006      	b.n	800787e <USBH_ParseDevDesc+0x8e>
 8007870:	2b40      	cmp	r3, #64	@ 0x40
 8007872:	d104      	bne.n	800787e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	79da      	ldrb	r2, [r3, #7]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	71da      	strb	r2, [r3, #7]
      break;
 800787c:	e003      	b.n	8007886 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2240      	movs	r2, #64	@ 0x40
 8007882:	71da      	strb	r2, [r3, #7]
      break;
 8007884:	bf00      	nop
  }

  if (length > 8U)
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	2b08      	cmp	r3, #8
 800788a:	d936      	bls.n	80078fa <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3308      	adds	r3, #8
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	3309      	adds	r3, #9
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	b29b      	uxth	r3, r3
 800789e:	4313      	orrs	r3, r2
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	330a      	adds	r3, #10
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	330b      	adds	r3, #11
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4313      	orrs	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	330c      	adds	r3, #12
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	330d      	adds	r3, #13
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	7b9a      	ldrb	r2, [r3, #14]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	7bda      	ldrb	r2, [r3, #15]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	7c1a      	ldrb	r2, [r3, #16]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	7c5a      	ldrb	r2, [r3, #17]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	745a      	strb	r2, [r3, #17]
  }
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	01000101 	.word	0x01000101

0800790c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08c      	sub	sp, #48	@ 0x30
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007920:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	785a      	ldrb	r2, [r3, #1]
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	3302      	adds	r3, #2
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	3303      	adds	r3, #3
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	b29b      	uxth	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	b29b      	uxth	r3, r3
 8007962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007966:	bf28      	it	cs
 8007968:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800796c:	b29a      	uxth	r2, r3
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	791a      	ldrb	r2, [r3, #4]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	795a      	ldrb	r2, [r3, #5]
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	799a      	ldrb	r2, [r3, #6]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	79da      	ldrb	r2, [r3, #7]
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	7a1a      	ldrb	r2, [r3, #8]
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d002      	beq.n	80079a8 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	2209      	movs	r2, #9
 80079a6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	f240 809d 	bls.w	8007aea <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 80079b0:	2309      	movs	r3, #9
 80079b2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079b8:	e081      	b.n	8007abe <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079ba:	f107 0316 	add.w	r3, r7, #22
 80079be:	4619      	mov	r1, r3
 80079c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079c2:	f000 f99c 	bl	8007cfe <USBH_GetNextDesc>
 80079c6:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d176      	bne.n	8007abe <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b09      	cmp	r3, #9
 80079d6:	d002      	beq.n	80079de <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	2209      	movs	r2, #9
 80079dc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079e2:	221a      	movs	r2, #26
 80079e4:	fb02 f303 	mul.w	r3, r2, r3
 80079e8:	3308      	adds	r3, #8
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	4413      	add	r3, r2
 80079ee:	3302      	adds	r3, #2
 80079f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079f4:	69f8      	ldr	r0, [r7, #28]
 80079f6:	f000 f87e 	bl	8007af6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a04:	e043      	b.n	8007a8e <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a06:	f107 0316 	add.w	r3, r7, #22
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a0e:	f000 f976 	bl	8007cfe <USBH_GetNextDesc>
 8007a12:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b05      	cmp	r3, #5
 8007a1a:	d138      	bne.n	8007a8e <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	795b      	ldrb	r3, [r3, #5]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d10f      	bne.n	8007a44 <USBH_ParseCfgDesc+0x138>
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	799b      	ldrb	r3, [r3, #6]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d10b      	bne.n	8007a44 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	79db      	ldrb	r3, [r3, #7]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10f      	bne.n	8007a54 <USBH_ParseCfgDesc+0x148>
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d00b      	beq.n	8007a54 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	2209      	movs	r2, #9
 8007a40:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a42:	e007      	b.n	8007a54 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b07      	cmp	r3, #7
 8007a4a:	d004      	beq.n	8007a56 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	2207      	movs	r2, #7
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e000      	b.n	8007a56 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a54:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a5a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a5e:	3201      	adds	r2, #1
 8007a60:	00d2      	lsls	r2, r2, #3
 8007a62:	211a      	movs	r1, #26
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	4413      	add	r3, r2
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6a3a      	ldr	r2, [r7, #32]
 8007a6e:	4413      	add	r3, r2
 8007a70:	3304      	adds	r3, #4
 8007a72:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a76:	69b9      	ldr	r1, [r7, #24]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f86b 	bl	8007b54 <USBH_ParseEPDesc>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a88:	3301      	adds	r3, #1
 8007a8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	791b      	ldrb	r3, [r3, #4]
 8007a92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d204      	bcs.n	8007aa4 <USBH_ParseCfgDesc+0x198>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	885a      	ldrh	r2, [r3, #2]
 8007a9e:	8afb      	ldrh	r3, [r7, #22]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d8b0      	bhi.n	8007a06 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	791b      	ldrb	r3, [r3, #4]
 8007aa8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d201      	bcs.n	8007ab4 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e01c      	b.n	8007aee <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8007ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d805      	bhi.n	8007ad2 <USBH_ParseCfgDesc+0x1c6>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	885a      	ldrh	r2, [r3, #2]
 8007aca:	8afb      	ldrh	r3, [r7, #22]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	f63f af74 	bhi.w	80079ba <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	bf28      	it	cs
 8007ada:	2302      	movcs	r3, #2
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d201      	bcs.n	8007aea <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e001      	b.n	8007aee <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8007aea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3730      	adds	r7, #48	@ 0x30
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	785a      	ldrb	r2, [r3, #1]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	789a      	ldrb	r2, [r3, #2]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	78da      	ldrb	r2, [r3, #3]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	791a      	ldrb	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	795a      	ldrb	r2, [r3, #5]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	799a      	ldrb	r2, [r3, #6]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	79da      	ldrb	r2, [r3, #7]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	7a1a      	ldrb	r2, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	721a      	strb	r2, [r3, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	785a      	ldrb	r2, [r3, #1]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	789a      	ldrb	r2, [r3, #2]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	78da      	ldrb	r2, [r3, #3]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3305      	adds	r3, #5
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	799a      	ldrb	r2, [r3, #6]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	889b      	ldrh	r3, [r3, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	e031      	b.n	8007c18 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	889b      	ldrh	r3, [r3, #4]
 8007bb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007bbc:	f023 0307 	bic.w	r3, r3, #7
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	889b      	ldrh	r3, [r3, #4]
 8007bca:	b21a      	sxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3305      	adds	r3, #5
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	430b      	orrs	r3, r1
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10f      	bne.n	8007c0a <USBH_ParseEPDesc+0xb6>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3304      	adds	r3, #4
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3305      	adds	r3, #5
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	b21b      	sxth	r3, r3
 8007c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c06:	b21b      	sxth	r3, r3
 8007c08:	e001      	b.n	8007c0e <USBH_ParseEPDesc+0xba>
 8007c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	b21b      	sxth	r3, r3
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d116      	bne.n	8007c50 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	78db      	ldrb	r3, [r3, #3]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d005      	beq.n	8007c3a <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	78db      	ldrb	r3, [r3, #3]
 8007c32:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d127      	bne.n	8007c8a <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	799b      	ldrb	r3, [r3, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <USBH_ParseEPDesc+0xf6>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	799b      	ldrb	r3, [r3, #6]
 8007c46:	2b10      	cmp	r3, #16
 8007c48:	d91f      	bls.n	8007c8a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	75fb      	strb	r3, [r7, #23]
 8007c4e:	e01c      	b.n	8007c8a <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d10a      	bne.n	8007c72 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	799b      	ldrb	r3, [r3, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <USBH_ParseEPDesc+0x118>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	799b      	ldrb	r3, [r3, #6]
 8007c68:	2b10      	cmp	r3, #16
 8007c6a:	d90e      	bls.n	8007c8a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	75fb      	strb	r3, [r7, #23]
 8007c70:	e00b      	b.n	8007c8a <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	78db      	ldrb	r3, [r3, #3]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d105      	bne.n	8007c8a <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	799b      	ldrb	r3, [r3, #6]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007c86:	2303      	movs	r3, #3
 8007c88:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d120      	bne.n	8007cf2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	1e9a      	subs	r2, r3, #2
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	bf28      	it	cs
 8007cbc:	4613      	movcs	r3, r2
 8007cbe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	82fb      	strh	r3, [r7, #22]
 8007cca:	e00b      	b.n	8007ce4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ccc:	8afb      	ldrh	r3, [r7, #22]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cde:	8afb      	ldrh	r3, [r7, #22]
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	82fb      	strh	r3, [r7, #22]
 8007ce4:	8afa      	ldrh	r2, [r7, #22]
 8007ce6:	8abb      	ldrh	r3, [r7, #20]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d3ef      	bcc.n	8007ccc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
  }
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	4413      	add	r3, r2
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	789b      	ldrb	r3, [r3, #2]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d002      	beq.n	8007d52 <USBH_CtlReq+0x20>
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d00f      	beq.n	8007d70 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d50:	e027      	b.n	8007da2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	88fa      	ldrh	r2, [r7, #6]
 8007d5c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2202      	movs	r2, #2
 8007d68:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6e:	e018      	b.n	8007da2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f81b 	bl	8007dac <USBH_HandleControl>
 8007d76:	4603      	mov	r3, r0
 8007d78:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <USBH_CtlReq+0x54>
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d106      	bne.n	8007d94 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	761a      	strb	r2, [r3, #24]
      break;
 8007d92:	e005      	b.n	8007da0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d102      	bne.n	8007da0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	709a      	strb	r2, [r3, #2]
      break;
 8007da0:	bf00      	nop
  }
  return status;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007db4:	2301      	movs	r3, #1
 8007db6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7e1b      	ldrb	r3, [r3, #24]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	2b0a      	cmp	r3, #10
 8007dc4:	f200 8156 	bhi.w	8008074 <USBH_HandleControl+0x2c8>
 8007dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <USBH_HandleControl+0x24>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	08007e17 	.word	0x08007e17
 8007dd8:	08007e81 	.word	0x08007e81
 8007ddc:	08007ea7 	.word	0x08007ea7
 8007de0:	08007edf 	.word	0x08007edf
 8007de4:	08007f09 	.word	0x08007f09
 8007de8:	08007f5b 	.word	0x08007f5b
 8007dec:	08007f7d 	.word	0x08007f7d
 8007df0:	08007fb9 	.word	0x08007fb9
 8007df4:	08007fdf 	.word	0x08007fdf
 8007df8:	0800801d 	.word	0x0800801d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f103 0110 	add.w	r1, r3, #16
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	795b      	ldrb	r3, [r3, #5]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f943 	bl	8008094 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	761a      	strb	r2, [r3, #24]
      break;
 8007e14:	e139      	b.n	800808a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	795b      	ldrb	r3, [r3, #5]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fcc5 	bl	80087ac <USBH_LL_GetURBState>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d11e      	bne.n	8007e6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7c1b      	ldrb	r3, [r3, #16]
 8007e30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	8adb      	ldrh	r3, [r3, #22]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e3e:	7b7b      	ldrb	r3, [r7, #13]
 8007e40:	2b80      	cmp	r3, #128	@ 0x80
 8007e42:	d103      	bne.n	8007e4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2203      	movs	r2, #3
 8007e48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e4a:	e115      	b.n	8008078 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2205      	movs	r2, #5
 8007e50:	761a      	strb	r2, [r3, #24]
      break;
 8007e52:	e111      	b.n	8008078 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e54:	7b7b      	ldrb	r3, [r7, #13]
 8007e56:	2b80      	cmp	r3, #128	@ 0x80
 8007e58:	d103      	bne.n	8007e62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2209      	movs	r2, #9
 8007e5e:	761a      	strb	r2, [r3, #24]
      break;
 8007e60:	e10a      	b.n	8008078 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2207      	movs	r2, #7
 8007e66:	761a      	strb	r2, [r3, #24]
      break;
 8007e68:	e106      	b.n	8008078 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d003      	beq.n	8007e78 <USBH_HandleControl+0xcc>
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	f040 8100 	bne.w	8008078 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220b      	movs	r2, #11
 8007e7c:	761a      	strb	r2, [r3, #24]
      break;
 8007e7e:	e0fb      	b.n	8008078 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6899      	ldr	r1, [r3, #8]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	899a      	ldrh	r2, [r3, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	791b      	ldrb	r3, [r3, #4]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f93a 	bl	8008112 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	761a      	strb	r2, [r3, #24]
      break;
 8007ea4:	e0f1      	b.n	800808a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	791b      	ldrb	r3, [r3, #4]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fc7d 	bl	80087ac <USBH_LL_GetURBState>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d102      	bne.n	8007ec2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2209      	movs	r2, #9
 8007ec0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d102      	bne.n	8007ece <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ecc:	e0d6      	b.n	800807c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	f040 80d3 	bne.w	800807c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	220b      	movs	r2, #11
 8007eda:	761a      	strb	r2, [r3, #24]
      break;
 8007edc:	e0ce      	b.n	800807c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6899      	ldr	r1, [r3, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	899a      	ldrh	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	2001      	movs	r0, #1
 8007eec:	9000      	str	r0, [sp, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f8ea 	bl	80080c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2206      	movs	r2, #6
 8007f04:	761a      	strb	r2, [r3, #24]
      break;
 8007f06:	e0c0      	b.n	800808a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	795b      	ldrb	r3, [r3, #5]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fc4c 	bl	80087ac <USBH_LL_GetURBState>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d103      	bne.n	8007f26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2207      	movs	r2, #7
 8007f22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f24:	e0ac      	b.n	8008080 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b05      	cmp	r3, #5
 8007f2a:	d105      	bne.n	8007f38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	220c      	movs	r2, #12
 8007f30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f32:	2303      	movs	r3, #3
 8007f34:	73fb      	strb	r3, [r7, #15]
      break;
 8007f36:	e0a3      	b.n	8008080 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2205      	movs	r2, #5
 8007f42:	761a      	strb	r2, [r3, #24]
      break;
 8007f44:	e09c      	b.n	8008080 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	f040 8099 	bne.w	8008080 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	220b      	movs	r2, #11
 8007f52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f54:	2302      	movs	r3, #2
 8007f56:	73fb      	strb	r3, [r7, #15]
      break;
 8007f58:	e092      	b.n	8008080 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	791b      	ldrb	r3, [r3, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2100      	movs	r1, #0
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8d5 	bl	8008112 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2208      	movs	r2, #8
 8007f78:	761a      	strb	r2, [r3, #24]

      break;
 8007f7a:	e086      	b.n	800808a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	791b      	ldrb	r3, [r3, #4]
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc12 	bl	80087ac <USBH_LL_GetURBState>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d105      	bne.n	8007f9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	220d      	movs	r2, #13
 8007f96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f9c:	e072      	b.n	8008084 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d103      	bne.n	8007fac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220b      	movs	r2, #11
 8007fa8:	761a      	strb	r2, [r3, #24]
      break;
 8007faa:	e06b      	b.n	8008084 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d168      	bne.n	8008084 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb6:	e065      	b.n	8008084 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	795b      	ldrb	r3, [r3, #5]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	9200      	str	r2, [sp, #0]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f87f 	bl	80080c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	220a      	movs	r2, #10
 8007fda:	761a      	strb	r2, [r3, #24]
      break;
 8007fdc:	e055      	b.n	800808a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	795b      	ldrb	r3, [r3, #5]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fbe1 	bl	80087ac <USBH_LL_GetURBState>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d105      	bne.n	8008000 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	220d      	movs	r2, #13
 8007ffc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ffe:	e043      	b.n	8008088 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d103      	bne.n	800800e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2209      	movs	r2, #9
 800800a:	761a      	strb	r2, [r3, #24]
      break;
 800800c:	e03c      	b.n	8008088 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b04      	cmp	r3, #4
 8008012:	d139      	bne.n	8008088 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	220b      	movs	r2, #11
 8008018:	761a      	strb	r2, [r3, #24]
      break;
 800801a:	e035      	b.n	8008088 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	7e5b      	ldrb	r3, [r3, #25]
 8008020:	3301      	adds	r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	765a      	strb	r2, [r3, #25]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	7e5b      	ldrb	r3, [r3, #25]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d806      	bhi.n	800803e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800803c:	e025      	b.n	800808a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008044:	2106      	movs	r1, #6
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	795b      	ldrb	r3, [r3, #5]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f90c 	bl	8008274 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	791b      	ldrb	r3, [r3, #4]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f906 	bl	8008274 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800806e:	2302      	movs	r3, #2
 8008070:	73fb      	strb	r3, [r7, #15]
      break;
 8008072:	e00a      	b.n	800808a <USBH_HandleControl+0x2de>

    default:
      break;
 8008074:	bf00      	nop
 8008076:	e008      	b.n	800808a <USBH_HandleControl+0x2de>
      break;
 8008078:	bf00      	nop
 800807a:	e006      	b.n	800808a <USBH_HandleControl+0x2de>
      break;
 800807c:	bf00      	nop
 800807e:	e004      	b.n	800808a <USBH_HandleControl+0x2de>
      break;
 8008080:	bf00      	nop
 8008082:	e002      	b.n	800808a <USBH_HandleControl+0x2de>
      break;
 8008084:	bf00      	nop
 8008086:	e000      	b.n	800808a <USBH_HandleControl+0x2de>
      break;
 8008088:	bf00      	nop
  }

  return status;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af04      	add	r7, sp, #16
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080a2:	79f9      	ldrb	r1, [r7, #7]
 80080a4:	2300      	movs	r3, #0
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	2308      	movs	r3, #8
 80080aa:	9302      	str	r3, [sp, #8]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	2300      	movs	r3, #0
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	2200      	movs	r2, #0
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb46 	bl	800874a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af04      	add	r7, sp, #16
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	460b      	mov	r3, r1
 80080d8:	80fb      	strh	r3, [r7, #6]
 80080da:	4613      	mov	r3, r2
 80080dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ec:	7979      	ldrb	r1, [r7, #5]
 80080ee:	7e3b      	ldrb	r3, [r7, #24]
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	9302      	str	r3, [sp, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	2301      	movs	r3, #1
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	2200      	movs	r2, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fb21 	bl	800874a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b088      	sub	sp, #32
 8008116:	af04      	add	r7, sp, #16
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4611      	mov	r1, r2
 800811e:	461a      	mov	r2, r3
 8008120:	460b      	mov	r3, r1
 8008122:	80fb      	strh	r3, [r7, #6]
 8008124:	4613      	mov	r3, r2
 8008126:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008128:	7979      	ldrb	r1, [r7, #5]
 800812a:	2300      	movs	r3, #0
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	2301      	movs	r3, #1
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	2201      	movs	r2, #1
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fb03 	bl	800874a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008144:	2300      	movs	r3, #0

}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b088      	sub	sp, #32
 8008152:	af04      	add	r7, sp, #16
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	4611      	mov	r1, r2
 800815a:	461a      	mov	r2, r3
 800815c:	460b      	mov	r3, r1
 800815e:	80fb      	strh	r3, [r7, #6]
 8008160:	4613      	mov	r3, r2
 8008162:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008172:	7979      	ldrb	r1, [r7, #5]
 8008174:	7e3b      	ldrb	r3, [r7, #24]
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	2301      	movs	r3, #1
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	2302      	movs	r3, #2
 8008186:	2200      	movs	r2, #0
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fade 	bl	800874a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af04      	add	r7, sp, #16
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4611      	mov	r1, r2
 80081a4:	461a      	mov	r2, r3
 80081a6:	460b      	mov	r3, r1
 80081a8:	80fb      	strh	r3, [r7, #6]
 80081aa:	4613      	mov	r3, r2
 80081ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081ae:	7979      	ldrb	r1, [r7, #5]
 80081b0:	2300      	movs	r3, #0
 80081b2:	9303      	str	r3, [sp, #12]
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	2301      	movs	r3, #1
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	2302      	movs	r3, #2
 80081c2:	2201      	movs	r2, #1
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fac0 	bl	800874a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af04      	add	r7, sp, #16
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	70fb      	strb	r3, [r7, #3]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70bb      	strb	r3, [r7, #2]
 80081ea:	4613      	mov	r3, r2
 80081ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081ee:	7878      	ldrb	r0, [r7, #1]
 80081f0:	78ba      	ldrb	r2, [r7, #2]
 80081f2:	78f9      	ldrb	r1, [r7, #3]
 80081f4:	8b3b      	ldrh	r3, [r7, #24]
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	7d3b      	ldrb	r3, [r7, #20]
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	7c3b      	ldrb	r3, [r7, #16]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4603      	mov	r3, r0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa53 	bl	80086ae <USBH_LL_OpenPipe>

  return USBH_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa72 	bl	800870c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f836 	bl	80082b0 <USBH_GetFreePipe>
 8008244:	4603      	mov	r3, r0
 8008246:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800824e:	4293      	cmp	r3, r2
 8008250:	d00a      	beq.n	8008268 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	89fb      	ldrh	r3, [r7, #14]
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	33e0      	adds	r3, #224	@ 0xe0
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008268:	89fb      	ldrh	r3, [r7, #14]
 800826a:	b2db      	uxtb	r3, r3
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	2b0f      	cmp	r3, #15
 8008284:	d80d      	bhi.n	80082a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	33e0      	adds	r3, #224	@ 0xe0
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	33e0      	adds	r3, #224	@ 0xe0
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	e00f      	b.n	80082e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	33e0      	adds	r3, #224	@ 0xe0
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	e007      	b.n	80082ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	3301      	adds	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b0f      	cmp	r3, #15
 80082e6:	d9ec      	bls.n	80082c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80082fc:	2201      	movs	r2, #1
 80082fe:	490e      	ldr	r1, [pc, #56]	@ (8008338 <MX_USB_HOST_Init+0x40>)
 8008300:	480e      	ldr	r0, [pc, #56]	@ (800833c <MX_USB_HOST_Init+0x44>)
 8008302:	f7fe fbb7 	bl	8006a74 <USBH_Init>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800830c:	f7f8 fbba 	bl	8000a84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008310:	490b      	ldr	r1, [pc, #44]	@ (8008340 <MX_USB_HOST_Init+0x48>)
 8008312:	480a      	ldr	r0, [pc, #40]	@ (800833c <MX_USB_HOST_Init+0x44>)
 8008314:	f7fe fc3c 	bl	8006b90 <USBH_RegisterClass>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800831e:	f7f8 fbb1 	bl	8000a84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008322:	4806      	ldr	r0, [pc, #24]	@ (800833c <MX_USB_HOST_Init+0x44>)
 8008324:	f7fe fcc0 	bl	8006ca8 <USBH_Start>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800832e:	f7f8 fba9 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008332:	bf00      	nop
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	08008359 	.word	0x08008359
 800833c:	20000208 	.word	0x20000208
 8008340:	2000000c 	.word	0x2000000c

08008344 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008348:	4802      	ldr	r0, [pc, #8]	@ (8008354 <MX_USB_HOST_Process+0x10>)
 800834a:	f7fe fcbd 	bl	8006cc8 <USBH_Process>
}
 800834e:	bf00      	nop
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000208 	.word	0x20000208

08008358 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	3b01      	subs	r3, #1
 8008368:	2b04      	cmp	r3, #4
 800836a:	d819      	bhi.n	80083a0 <USBH_UserProcess+0x48>
 800836c:	a201      	add	r2, pc, #4	@ (adr r2, 8008374 <USBH_UserProcess+0x1c>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	080083a1 	.word	0x080083a1
 8008378:	08008391 	.word	0x08008391
 800837c:	080083a1 	.word	0x080083a1
 8008380:	08008399 	.word	0x08008399
 8008384:	08008389 	.word	0x08008389
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008388:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <USBH_UserProcess+0x58>)
 800838a:	2203      	movs	r2, #3
 800838c:	701a      	strb	r2, [r3, #0]
  break;
 800838e:	e008      	b.n	80083a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008390:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <USBH_UserProcess+0x58>)
 8008392:	2202      	movs	r2, #2
 8008394:	701a      	strb	r2, [r3, #0]
  break;
 8008396:	e004      	b.n	80083a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008398:	4b05      	ldr	r3, [pc, #20]	@ (80083b0 <USBH_UserProcess+0x58>)
 800839a:	2201      	movs	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
  break;
 800839e:	e000      	b.n	80083a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80083a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	200005e0 	.word	0x200005e0

080083b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	@ 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	609a      	str	r2, [r3, #8]
 80083c8:	60da      	str	r2, [r3, #12]
 80083ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083d4:	d147      	bne.n	8008466 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]
 80083da:	4b25      	ldr	r3, [pc, #148]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 80083dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083de:	4a24      	ldr	r2, [pc, #144]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80083e6:	4b22      	ldr	r3, [pc, #136]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 80083e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	613b      	str	r3, [r7, #16]
 80083f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4619      	mov	r1, r3
 8008406:	481b      	ldr	r0, [pc, #108]	@ (8008474 <HAL_HCD_MspInit+0xc0>)
 8008408:	f7f9 fd90 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800840c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008412:	2302      	movs	r3, #2
 8008414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008416:	2300      	movs	r3, #0
 8008418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800841a:	2300      	movs	r3, #0
 800841c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800841e:	230a      	movs	r3, #10
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008422:	f107 0314 	add.w	r3, r7, #20
 8008426:	4619      	mov	r1, r3
 8008428:	4812      	ldr	r0, [pc, #72]	@ (8008474 <HAL_HCD_MspInit+0xc0>)
 800842a:	f7f9 fd7f 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800842e:	4b10      	ldr	r3, [pc, #64]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 8008430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008432:	4a0f      	ldr	r2, [pc, #60]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 8008434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008438:	6353      	str	r3, [r2, #52]	@ 0x34
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 8008440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008442:	4a0b      	ldr	r2, [pc, #44]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 8008444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008448:	6453      	str	r3, [r2, #68]	@ 0x44
 800844a:	4b09      	ldr	r3, [pc, #36]	@ (8008470 <HAL_HCD_MspInit+0xbc>)
 800844c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	2043      	movs	r0, #67	@ 0x43
 800845c:	f7f9 fd2f 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008460:	2043      	movs	r0, #67	@ 0x43
 8008462:	f7f9 fd48 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008466:	bf00      	nop
 8008468:	3728      	adds	r7, #40	@ 0x28
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40023800 	.word	0x40023800
 8008474:	40020000 	.word	0x40020000

08008478 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fff5 	bl	8007476 <USBH_LL_IncTimer>
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff f82d 	bl	8007502 <USBH_LL_Connect>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff f836 	bl	8007530 <USBH_LL_Disconnect>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
 80084d8:	4613      	mov	r3, r2
 80084da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe ffe7 	bl	80074ca <USBH_LL_PortEnabled>
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe ffe7 	bl	80074e6 <USBH_LL_PortDisabled>
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800852e:	2b01      	cmp	r3, #1
 8008530:	d12a      	bne.n	8008588 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008532:	4a18      	ldr	r2, [pc, #96]	@ (8008594 <USBH_LL_Init+0x74>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a15      	ldr	r2, [pc, #84]	@ (8008594 <USBH_LL_Init+0x74>)
 800853e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008542:	4b14      	ldr	r3, [pc, #80]	@ (8008594 <USBH_LL_Init+0x74>)
 8008544:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008548:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800854a:	4b12      	ldr	r3, [pc, #72]	@ (8008594 <USBH_LL_Init+0x74>)
 800854c:	2208      	movs	r2, #8
 800854e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008550:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <USBH_LL_Init+0x74>)
 8008552:	2201      	movs	r2, #1
 8008554:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008556:	4b0f      	ldr	r3, [pc, #60]	@ (8008594 <USBH_LL_Init+0x74>)
 8008558:	2200      	movs	r2, #0
 800855a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800855c:	4b0d      	ldr	r3, [pc, #52]	@ (8008594 <USBH_LL_Init+0x74>)
 800855e:	2202      	movs	r2, #2
 8008560:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008562:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <USBH_LL_Init+0x74>)
 8008564:	2200      	movs	r2, #0
 8008566:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008568:	480a      	ldr	r0, [pc, #40]	@ (8008594 <USBH_LL_Init+0x74>)
 800856a:	f7f9 fec7 	bl	80022fc <HAL_HCD_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008574:	f7f8 fa86 	bl	8000a84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008578:	4806      	ldr	r0, [pc, #24]	@ (8008594 <USBH_LL_Init+0x74>)
 800857a:	f7fa faaa 	bl	8002ad2 <HAL_HCD_GetCurrentFrame>
 800857e:	4603      	mov	r3, r0
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe ff68 	bl	8007458 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200005e4 	.word	0x200005e4

08008598 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fa fa19 	bl	80029e6 <HAL_HCD_Start>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f95c 	bl	8008878 <USBH_Get_USB_Status>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fa fa21 	bl	8002a2c <HAL_HCD_Stop>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f941 	bl	8008878 <USBH_Get_USB_Status>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008616:	4618      	mov	r0, r3
 8008618:	f7fa fa69 	bl	8002aee <HAL_HCD_GetCurrentSpeed>
 800861c:	4603      	mov	r3, r0
 800861e:	2b02      	cmp	r3, #2
 8008620:	d00c      	beq.n	800863c <USBH_LL_GetSpeed+0x38>
 8008622:	2b02      	cmp	r3, #2
 8008624:	d80d      	bhi.n	8008642 <USBH_LL_GetSpeed+0x3e>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <USBH_LL_GetSpeed+0x2c>
 800862a:	2b01      	cmp	r3, #1
 800862c:	d003      	beq.n	8008636 <USBH_LL_GetSpeed+0x32>
 800862e:	e008      	b.n	8008642 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
    break;
 8008634:	e008      	b.n	8008648 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008636:	2301      	movs	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
    break;
 800863a:	e005      	b.n	8008648 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800863c:	2302      	movs	r3, #2
 800863e:	73fb      	strb	r3, [r7, #15]
    break;
 8008640:	e002      	b.n	8008648 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008642:	2301      	movs	r3, #1
 8008644:	73fb      	strb	r3, [r7, #15]
    break;
 8008646:	bf00      	nop
  }
  return  speed;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008668:	4618      	mov	r0, r3
 800866a:	f7fa f9fc 	bl	8002a66 <HAL_HCD_ResetPort>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f8ff 	bl	8008878 <USBH_Get_USB_Status>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fa fa03 	bl	8002aaa <HAL_HCD_HC_GetXferCount>
 80086a4:	4603      	mov	r3, r0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086ae:	b590      	push	{r4, r7, lr}
 80086b0:	b089      	sub	sp, #36	@ 0x24
 80086b2:	af04      	add	r7, sp, #16
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	461a      	mov	r2, r3
 80086bc:	4603      	mov	r3, r0
 80086be:	70fb      	strb	r3, [r7, #3]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70bb      	strb	r3, [r7, #2]
 80086c4:	4613      	mov	r3, r2
 80086c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086d6:	787c      	ldrb	r4, [r7, #1]
 80086d8:	78ba      	ldrb	r2, [r7, #2]
 80086da:	78f9      	ldrb	r1, [r7, #3]
 80086dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4623      	mov	r3, r4
 80086ee:	f7f9 fe67 	bl	80023c0 <HAL_HCD_HC_Init>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 f8bd 	bl	8008878 <USBH_Get_USB_Status>
 80086fe:	4603      	mov	r3, r0
 8008700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008702:	7bbb      	ldrb	r3, [r7, #14]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bd90      	pop	{r4, r7, pc}

0800870c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f7f9 fed7 	bl	80024de <HAL_HCD_HC_Halt>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f89e 	bl	8008878 <USBH_Get_USB_Status>
 800873c:	4603      	mov	r3, r0
 800873e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008740:	7bbb      	ldrb	r3, [r7, #14]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800874a:	b590      	push	{r4, r7, lr}
 800874c:	b089      	sub	sp, #36	@ 0x24
 800874e:	af04      	add	r7, sp, #16
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	4608      	mov	r0, r1
 8008754:	4611      	mov	r1, r2
 8008756:	461a      	mov	r2, r3
 8008758:	4603      	mov	r3, r0
 800875a:	70fb      	strb	r3, [r7, #3]
 800875c:	460b      	mov	r3, r1
 800875e:	70bb      	strb	r3, [r7, #2]
 8008760:	4613      	mov	r3, r2
 8008762:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008772:	787c      	ldrb	r4, [r7, #1]
 8008774:	78ba      	ldrb	r2, [r7, #2]
 8008776:	78f9      	ldrb	r1, [r7, #3]
 8008778:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800877c:	9303      	str	r3, [sp, #12]
 800877e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008780:	9302      	str	r3, [sp, #8]
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	4623      	mov	r3, r4
 800878e:	f7f9 fec9 	bl	8002524 <HAL_HCD_HC_SubmitRequest>
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 f86d 	bl	8008878 <USBH_Get_USB_Status>
 800879e:	4603      	mov	r3, r0
 80087a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd90      	pop	{r4, r7, pc}

080087ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fa f95d 	bl	8002a82 <HAL_HCD_HC_GetURBState>
 80087c8:	4603      	mov	r3, r0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d103      	bne.n	80087f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f870 	bl	80088d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087f0:	20c8      	movs	r0, #200	@ 0xc8
 80087f2:	f7f8 fc03 	bl	8000ffc <HAL_Delay>
  return USBH_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
 800880c:	4613      	mov	r3, r2
 800880e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008816:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	212c      	movs	r1, #44	@ 0x2c
 800881e:	fb01 f303 	mul.w	r3, r1, r3
 8008822:	4413      	add	r3, r2
 8008824:	333b      	adds	r3, #59	@ 0x3b
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	212c      	movs	r1, #44	@ 0x2c
 8008832:	fb01 f303 	mul.w	r3, r1, r3
 8008836:	4413      	add	r3, r2
 8008838:	3354      	adds	r3, #84	@ 0x54
 800883a:	78ba      	ldrb	r2, [r7, #2]
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e008      	b.n	8008852 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	212c      	movs	r1, #44	@ 0x2c
 8008846:	fb01 f303 	mul.w	r3, r1, r3
 800884a:	4413      	add	r3, r2
 800884c:	3355      	adds	r3, #85	@ 0x55
 800884e:	78ba      	ldrb	r2, [r7, #2]
 8008850:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7f8 fbc7 	bl	8000ffc <HAL_Delay>
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	2b03      	cmp	r3, #3
 800888a:	d817      	bhi.n	80088bc <USBH_Get_USB_Status+0x44>
 800888c:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <USBH_Get_USB_Status+0x1c>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088a5 	.word	0x080088a5
 8008898:	080088ab 	.word	0x080088ab
 800889c:	080088b1 	.word	0x080088b1
 80088a0:	080088b7 	.word	0x080088b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
    break;
 80088a8:	e00b      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088aa:	2302      	movs	r3, #2
 80088ac:	73fb      	strb	r3, [r7, #15]
    break;
 80088ae:	e008      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
    break;
 80088b4:	e005      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088b6:	2302      	movs	r3, #2
 80088b8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ba:	e002      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088bc:	2302      	movs	r3, #2
 80088be:	73fb      	strb	r3, [r7, #15]
    break;
 80088c0:	bf00      	nop
  }
  return usb_status;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e001      	b.n	80088ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80088ea:	2301      	movs	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	461a      	mov	r2, r3
 80088f2:	2101      	movs	r1, #1
 80088f4:	4803      	ldr	r0, [pc, #12]	@ (8008904 <MX_DriverVbusFS+0x34>)
 80088f6:	f7f9 fcb5 	bl	8002264 <HAL_GPIO_WritePin>
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40020800 	.word	0x40020800

08008908 <malloc>:
 8008908:	4b02      	ldr	r3, [pc, #8]	@ (8008914 <malloc+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f000 b82d 	b.w	800896c <_malloc_r>
 8008912:	bf00      	nop
 8008914:	2000002c 	.word	0x2000002c

08008918 <free>:
 8008918:	4b02      	ldr	r3, [pc, #8]	@ (8008924 <free+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f000 b8f5 	b.w	8008b0c <_free_r>
 8008922:	bf00      	nop
 8008924:	2000002c 	.word	0x2000002c

08008928 <sbrk_aligned>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4e0f      	ldr	r6, [pc, #60]	@ (8008968 <sbrk_aligned+0x40>)
 800892c:	460c      	mov	r4, r1
 800892e:	6831      	ldr	r1, [r6, #0]
 8008930:	4605      	mov	r5, r0
 8008932:	b911      	cbnz	r1, 800893a <sbrk_aligned+0x12>
 8008934:	f000 f8ae 	bl	8008a94 <_sbrk_r>
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f000 f8a9 	bl	8008a94 <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d103      	bne.n	800894e <sbrk_aligned+0x26>
 8008946:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800894a:	4620      	mov	r0, r4
 800894c:	bd70      	pop	{r4, r5, r6, pc}
 800894e:	1cc4      	adds	r4, r0, #3
 8008950:	f024 0403 	bic.w	r4, r4, #3
 8008954:	42a0      	cmp	r0, r4
 8008956:	d0f8      	beq.n	800894a <sbrk_aligned+0x22>
 8008958:	1a21      	subs	r1, r4, r0
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f89a 	bl	8008a94 <_sbrk_r>
 8008960:	3001      	adds	r0, #1
 8008962:	d1f2      	bne.n	800894a <sbrk_aligned+0x22>
 8008964:	e7ef      	b.n	8008946 <sbrk_aligned+0x1e>
 8008966:	bf00      	nop
 8008968:	200008e8 	.word	0x200008e8

0800896c <_malloc_r>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	1ccd      	adds	r5, r1, #3
 8008972:	f025 0503 	bic.w	r5, r5, #3
 8008976:	3508      	adds	r5, #8
 8008978:	2d0c      	cmp	r5, #12
 800897a:	bf38      	it	cc
 800897c:	250c      	movcc	r5, #12
 800897e:	2d00      	cmp	r5, #0
 8008980:	4606      	mov	r6, r0
 8008982:	db01      	blt.n	8008988 <_malloc_r+0x1c>
 8008984:	42a9      	cmp	r1, r5
 8008986:	d904      	bls.n	8008992 <_malloc_r+0x26>
 8008988:	230c      	movs	r3, #12
 800898a:	6033      	str	r3, [r6, #0]
 800898c:	2000      	movs	r0, #0
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a68 <_malloc_r+0xfc>
 8008996:	f000 f869 	bl	8008a6c <__malloc_lock>
 800899a:	f8d8 3000 	ldr.w	r3, [r8]
 800899e:	461c      	mov	r4, r3
 80089a0:	bb44      	cbnz	r4, 80089f4 <_malloc_r+0x88>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ffbf 	bl	8008928 <sbrk_aligned>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	4604      	mov	r4, r0
 80089ae:	d158      	bne.n	8008a62 <_malloc_r+0xf6>
 80089b0:	f8d8 4000 	ldr.w	r4, [r8]
 80089b4:	4627      	mov	r7, r4
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	d143      	bne.n	8008a42 <_malloc_r+0xd6>
 80089ba:	2c00      	cmp	r4, #0
 80089bc:	d04b      	beq.n	8008a56 <_malloc_r+0xea>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	4639      	mov	r1, r7
 80089c2:	4630      	mov	r0, r6
 80089c4:	eb04 0903 	add.w	r9, r4, r3
 80089c8:	f000 f864 	bl	8008a94 <_sbrk_r>
 80089cc:	4581      	cmp	r9, r0
 80089ce:	d142      	bne.n	8008a56 <_malloc_r+0xea>
 80089d0:	6821      	ldr	r1, [r4, #0]
 80089d2:	1a6d      	subs	r5, r5, r1
 80089d4:	4629      	mov	r1, r5
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ffa6 	bl	8008928 <sbrk_aligned>
 80089dc:	3001      	adds	r0, #1
 80089de:	d03a      	beq.n	8008a56 <_malloc_r+0xea>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	442b      	add	r3, r5
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	bb62      	cbnz	r2, 8008a48 <_malloc_r+0xdc>
 80089ee:	f8c8 7000 	str.w	r7, [r8]
 80089f2:	e00f      	b.n	8008a14 <_malloc_r+0xa8>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	1b52      	subs	r2, r2, r5
 80089f8:	d420      	bmi.n	8008a3c <_malloc_r+0xd0>
 80089fa:	2a0b      	cmp	r2, #11
 80089fc:	d917      	bls.n	8008a2e <_malloc_r+0xc2>
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	6059      	strne	r1, [r3, #4]
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	bf08      	it	eq
 8008a0c:	f8c8 1000 	streq.w	r1, [r8]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f82f 	bl	8008a78 <__malloc_unlock>
 8008a1a:	f104 000b 	add.w	r0, r4, #11
 8008a1e:	1d23      	adds	r3, r4, #4
 8008a20:	f020 0007 	bic.w	r0, r0, #7
 8008a24:	1ac2      	subs	r2, r0, r3
 8008a26:	bf1c      	itt	ne
 8008a28:	1a1b      	subne	r3, r3, r0
 8008a2a:	50a3      	strne	r3, [r4, r2]
 8008a2c:	e7af      	b.n	800898e <_malloc_r+0x22>
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	bf0c      	ite	eq
 8008a34:	f8c8 2000 	streq.w	r2, [r8]
 8008a38:	605a      	strne	r2, [r3, #4]
 8008a3a:	e7eb      	b.n	8008a14 <_malloc_r+0xa8>
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	6864      	ldr	r4, [r4, #4]
 8008a40:	e7ae      	b.n	80089a0 <_malloc_r+0x34>
 8008a42:	463c      	mov	r4, r7
 8008a44:	687f      	ldr	r7, [r7, #4]
 8008a46:	e7b6      	b.n	80089b6 <_malloc_r+0x4a>
 8008a48:	461a      	mov	r2, r3
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d1fb      	bne.n	8008a48 <_malloc_r+0xdc>
 8008a50:	2300      	movs	r3, #0
 8008a52:	6053      	str	r3, [r2, #4]
 8008a54:	e7de      	b.n	8008a14 <_malloc_r+0xa8>
 8008a56:	230c      	movs	r3, #12
 8008a58:	6033      	str	r3, [r6, #0]
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f80c 	bl	8008a78 <__malloc_unlock>
 8008a60:	e794      	b.n	800898c <_malloc_r+0x20>
 8008a62:	6005      	str	r5, [r0, #0]
 8008a64:	e7d6      	b.n	8008a14 <_malloc_r+0xa8>
 8008a66:	bf00      	nop
 8008a68:	200008ec 	.word	0x200008ec

08008a6c <__malloc_lock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	@ (8008a74 <__malloc_lock+0x8>)
 8008a6e:	f000 b84b 	b.w	8008b08 <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	20000a2c 	.word	0x20000a2c

08008a78 <__malloc_unlock>:
 8008a78:	4801      	ldr	r0, [pc, #4]	@ (8008a80 <__malloc_unlock+0x8>)
 8008a7a:	f000 b846 	b.w	8008b0a <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000a2c 	.word	0x20000a2c

08008a84 <memset>:
 8008a84:	4402      	add	r2, r0
 8008a86:	4603      	mov	r3, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <_sbrk_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d06      	ldr	r5, [pc, #24]	@ (8008ab0 <_sbrk_r+0x1c>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7f8 f9c8 	bl	8000e34 <_sbrk>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_sbrk_r+0x1a>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_sbrk_r+0x1a>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20000a28 	.word	0x20000a28

08008ab4 <__errno>:
 8008ab4:	4b01      	ldr	r3, [pc, #4]	@ (8008abc <__errno+0x8>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	2000002c 	.word	0x2000002c

08008ac0 <__libc_init_array>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8008af8 <__libc_init_array+0x38>)
 8008ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8008afc <__libc_init_array+0x3c>)
 8008ac6:	1b64      	subs	r4, r4, r5
 8008ac8:	10a4      	asrs	r4, r4, #2
 8008aca:	2600      	movs	r6, #0
 8008acc:	42a6      	cmp	r6, r4
 8008ace:	d109      	bne.n	8008ae4 <__libc_init_array+0x24>
 8008ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8008b00 <__libc_init_array+0x40>)
 8008ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8008b04 <__libc_init_array+0x44>)
 8008ad4:	f000 f864 	bl	8008ba0 <_init>
 8008ad8:	1b64      	subs	r4, r4, r5
 8008ada:	10a4      	asrs	r4, r4, #2
 8008adc:	2600      	movs	r6, #0
 8008ade:	42a6      	cmp	r6, r4
 8008ae0:	d105      	bne.n	8008aee <__libc_init_array+0x2e>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae8:	4798      	blx	r3
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7ee      	b.n	8008acc <__libc_init_array+0xc>
 8008aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af2:	4798      	blx	r3
 8008af4:	3601      	adds	r6, #1
 8008af6:	e7f2      	b.n	8008ade <__libc_init_array+0x1e>
 8008af8:	08008bdc 	.word	0x08008bdc
 8008afc:	08008bdc 	.word	0x08008bdc
 8008b00:	08008bdc 	.word	0x08008bdc
 8008b04:	08008be0 	.word	0x08008be0

08008b08 <__retarget_lock_acquire_recursive>:
 8008b08:	4770      	bx	lr

08008b0a <__retarget_lock_release_recursive>:
 8008b0a:	4770      	bx	lr

08008b0c <_free_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2900      	cmp	r1, #0
 8008b12:	d041      	beq.n	8008b98 <_free_r+0x8c>
 8008b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b18:	1f0c      	subs	r4, r1, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfb8      	it	lt
 8008b1e:	18e4      	addlt	r4, r4, r3
 8008b20:	f7ff ffa4 	bl	8008a6c <__malloc_lock>
 8008b24:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <_free_r+0x90>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	b933      	cbnz	r3, 8008b38 <_free_r+0x2c>
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	6014      	str	r4, [r2, #0]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b34:	f7ff bfa0 	b.w	8008a78 <__malloc_unlock>
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d908      	bls.n	8008b4e <_free_r+0x42>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf01      	itttt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	1809      	addeq	r1, r1, r0
 8008b4a:	6021      	streq	r1, [r4, #0]
 8008b4c:	e7ed      	b.n	8008b2a <_free_r+0x1e>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	b10b      	cbz	r3, 8008b58 <_free_r+0x4c>
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d9fa      	bls.n	8008b4e <_free_r+0x42>
 8008b58:	6811      	ldr	r1, [r2, #0]
 8008b5a:	1850      	adds	r0, r2, r1
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d10b      	bne.n	8008b78 <_free_r+0x6c>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	4401      	add	r1, r0
 8008b64:	1850      	adds	r0, r2, r1
 8008b66:	4283      	cmp	r3, r0
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	d1e0      	bne.n	8008b2e <_free_r+0x22>
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	6053      	str	r3, [r2, #4]
 8008b72:	4408      	add	r0, r1
 8008b74:	6010      	str	r0, [r2, #0]
 8008b76:	e7da      	b.n	8008b2e <_free_r+0x22>
 8008b78:	d902      	bls.n	8008b80 <_free_r+0x74>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	e7d6      	b.n	8008b2e <_free_r+0x22>
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	1821      	adds	r1, r4, r0
 8008b84:	428b      	cmp	r3, r1
 8008b86:	bf04      	itt	eq
 8008b88:	6819      	ldreq	r1, [r3, #0]
 8008b8a:	685b      	ldreq	r3, [r3, #4]
 8008b8c:	6063      	str	r3, [r4, #4]
 8008b8e:	bf04      	itt	eq
 8008b90:	1809      	addeq	r1, r1, r0
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	6054      	str	r4, [r2, #4]
 8008b96:	e7ca      	b.n	8008b2e <_free_r+0x22>
 8008b98:	bd38      	pop	{r3, r4, r5, pc}
 8008b9a:	bf00      	nop
 8008b9c:	200008ec 	.word	0x200008ec

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
