
CAN_Tx_Rx_Normal_Mode_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000304c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003210  08003210  00004210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003228  08003228  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003228  08003228  00004228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003230  08003230  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003230  08003230  00004230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003238  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003244  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003244  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a624  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aab  00000000  00000000  0000f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00011110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000662  00000000  00000000  00011968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209a0  00000000  00000000  00011fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a26d  00000000  00000000  0003296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f63  00000000  00000000  0003cbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103b3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002178  00000000  00000000  00103b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00105cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031f8 	.word	0x080031f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080031f8 	.word	0x080031f8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_CAN_RxFifo1FullCallback>:
int datacheck=0;



void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <HAL_CAN_RxFifo1FullCallback+0x28>)
 80004fe:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <HAL_CAN_RxFifo1FullCallback+0x2c>)
 8000500:	2101      	movs	r1, #1
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 feed 	bl	80012e2 <HAL_CAN_GetRxMessage>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d102      	bne.n	8000514 <HAL_CAN_RxFifo1FullCallback+0x20>
    {
        datacheck = 1;  // Set flag only if the message is received successfully
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_CAN_RxFifo1FullCallback+0x30>)
 8000510:	2201      	movs	r2, #1
 8000512:	601a      	str	r2, [r3, #0]

    }
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000d0 	.word	0x200000d0
 8000520:	200000ac 	.word	0x200000ac
 8000524:	200000dc 	.word	0x200000dc

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fb48 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f878 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f966 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f93a 	bl	80007b0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800053c:	f000 f8e4 	bl	8000708 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1); // Start CAN
 8000540:	4832      	ldr	r0, [pc, #200]	@ (800060c <main+0xe4>)
 8000542:	f000 fdaf 	bl	80010a4 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000546:	2110      	movs	r1, #16
 8000548:	4830      	ldr	r0, [pc, #192]	@ (800060c <main+0xe4>)
 800054a:	f000 ffdc 	bl	8001506 <HAL_CAN_ActivateNotification>

  TxHeader.DLC=1;  // Data length
 800054e:	4b30      	ldr	r3, [pc, #192]	@ (8000610 <main+0xe8>)
 8000550:	2201      	movs	r2, #1
 8000552:	611a      	str	r2, [r3, #16]
  TxHeader.IDE=CAN_ID_STD;
 8000554:	4b2e      	ldr	r3, [pc, #184]	@ (8000610 <main+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA;
 800055a:	4b2d      	ldr	r3, [pc, #180]	@ (8000610 <main+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  TxHeader.StdId=0x103;  // ID of this controller
 8000560:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <main+0xe8>)
 8000562:	f240 1203 	movw	r2, #259	@ 0x103
 8000566:	601a      	str	r2, [r3, #0]

  TxData[0]=50;// msg that being sent if we receive msg from 446
 8000568:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <main+0xec>)
 800056a:	2232      	movs	r2, #50	@ 0x32
 800056c:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_CAN_Start(&hcan1); // Start CAN
 800056e:	4827      	ldr	r0, [pc, #156]	@ (800060c <main+0xe4>)
 8000570:	f000 fd98 	bl	80010a4 <HAL_CAN_Start>


	    if(	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK){
 8000574:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <main+0xf0>)
 8000576:	4a27      	ldr	r2, [pc, #156]	@ (8000614 <main+0xec>)
 8000578:	4925      	ldr	r1, [pc, #148]	@ (8000610 <main+0xe8>)
 800057a:	4824      	ldr	r0, [pc, #144]	@ (800060c <main+0xe4>)
 800057c:	f000 fdd6 	bl	800112c <HAL_CAN_AddTxMessage>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d112      	bne.n	80005ac <main+0x84>

	        datacheck = 0;  // Set flag only if the message is received successfully
 8000586:	4b25      	ldr	r3, [pc, #148]	@ (800061c <main+0xf4>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED
 800058c:	2120      	movs	r1, #32
 800058e:	4824      	ldr	r0, [pc, #144]	@ (8000620 <main+0xf8>)
 8000590:	f001 fccd 	bl	8001f2e <HAL_GPIO_TogglePin>
	        HAL_Delay(1000);  // Small delay for visibility
 8000594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000598:	f000 fb84 	bl	8000ca4 <HAL_Delay>
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED back
 800059c:	2120      	movs	r1, #32
 800059e:	4820      	ldr	r0, [pc, #128]	@ (8000620 <main+0xf8>)
 80005a0:	f001 fcc5 	bl	8001f2e <HAL_GPIO_TogglePin>
	        HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a8:	f000 fb7c 	bl	8000ca4 <HAL_Delay>


	    }

	  if(datacheck){
 80005ac:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <main+0xf4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0dc      	beq.n	800056e <main+0x46>


		        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005b4:	2120      	movs	r1, #32
 80005b6:	481a      	ldr	r0, [pc, #104]	@ (8000620 <main+0xf8>)
 80005b8:	f001 fcb9 	bl	8001f2e <HAL_GPIO_TogglePin>
		        HAL_Delay(100);
 80005bc:	2064      	movs	r0, #100	@ 0x64
 80005be:	f000 fb71 	bl	8000ca4 <HAL_Delay>
		        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005c2:	2120      	movs	r1, #32
 80005c4:	4816      	ldr	r0, [pc, #88]	@ (8000620 <main+0xf8>)
 80005c6:	f001 fcb2 	bl	8001f2e <HAL_GPIO_TogglePin>
		        HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	@ 0x64
 80005cc:	f000 fb6a 	bl	8000ca4 <HAL_Delay>

	    if(	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK){
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <main+0xf0>)
 80005d2:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <main+0xec>)
 80005d4:	490e      	ldr	r1, [pc, #56]	@ (8000610 <main+0xe8>)
 80005d6:	480d      	ldr	r0, [pc, #52]	@ (800060c <main+0xe4>)
 80005d8:	f000 fda8 	bl	800112c <HAL_CAN_AddTxMessage>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1c5      	bne.n	800056e <main+0x46>

	        datacheck = 0;  // Set flag only if the message is received successfully
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <main+0xf4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED
 80005e8:	2120      	movs	r1, #32
 80005ea:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0xf8>)
 80005ec:	f001 fc9f 	bl	8001f2e <HAL_GPIO_TogglePin>
	        HAL_Delay(1000);  // Small delay for visibility
 80005f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f4:	f000 fb56 	bl	8000ca4 <HAL_Delay>
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Toggle LED back
 80005f8:	2120      	movs	r1, #32
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <main+0xf8>)
 80005fc:	f001 fc97 	bl	8001f2e <HAL_GPIO_TogglePin>
	        HAL_Delay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000604:	f000 fb4e 	bl	8000ca4 <HAL_Delay>
	  HAL_CAN_Start(&hcan1); // Start CAN
 8000608:	e7b1      	b.n	800056e <main+0x46>
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028
 8000610:	20000094 	.word	0x20000094
 8000614:	200000c8 	.word	0x200000c8
 8000618:	200000d8 	.word	0x200000d8
 800061c:	200000dc 	.word	0x200000dc
 8000620:	40020000 	.word	0x40020000

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fdb4 	bl	80031a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a25      	ldr	r2, [pc, #148]	@ (8000704 <SystemClock_Config+0xe0>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000698:	23b4      	movs	r3, #180	@ 0xb4
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f817 	bl	80026e0 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 f91a 	bl	80008f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f001 fc76 	bl	8001fac <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 f913 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fcaf 	bl	800204c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f8fc 	bl	80008f0 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	@ 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800070e:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000710:	4a26      	ldr	r2, [pc, #152]	@ (80007ac <MX_CAN1_Init+0xa4>)
 8000712:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000716:	2212      	movs	r2, #18
 8000718:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000726:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000728:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800072c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000730:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000734:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000738:	2200      	movs	r2, #0
 800073a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 800073e:	2200      	movs	r2, #0
 8000740:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000744:	2200      	movs	r2, #0
 8000746:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 800074a:	2200      	movs	r2, #0
 800074c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800074e:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000750:	2200      	movs	r2, #0
 8000752:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 8000756:	2200      	movs	r2, #0
 8000758:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800075a:	4813      	ldr	r0, [pc, #76]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 800075c:	f000 fac6 	bl	8000cec <HAL_CAN_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000766:	f000 f8c3 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank=18;
 800076e:	2312      	movs	r3, #18
 8000770:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO1;
 8000772:	2301      	movs	r3, #1
 8000774:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh=0x446<<5;
 8000776:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 800077a:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow=0;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh=0x446<<5;
 8000780:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8000784:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow=0x0000;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800078e:	2301      	movs	r3, #1
 8000790:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank=20;//doesnt matter
 8000792:	2314      	movs	r3, #20
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <MX_CAN1_Init+0xa0>)
 800079c:	f000 fba2 	bl	8000ee4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000028 	.word	0x20000028
 80007ac:	40006400 	.word	0x40006400

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f002 fa18 	bl	8002c1c <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f87d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000050 	.word	0x20000050
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a30      	ldr	r2, [pc, #192]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a29      	ldr	r2, [pc, #164]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1b      	ldr	r2, [pc, #108]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <MX_GPIO_Init+0xe4>)
 8000890:	f001 fb34 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <MX_GPIO_Init+0xe8>)
 80008ac:	f001 f992 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <MX_GPIO_Init+0xe4>)
 80008c8:	f001 f984 	bl	8001bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2028      	movs	r0, #40	@ 0x28
 80008d2:	f001 f948 	bl	8001b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	@ 0x28
 80008d8:	f001 f961 	bl	8001b9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f001 f908 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <HAL_CAN_MspInit+0xb4>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d144      	bne.n	80009f8 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <HAL_CAN_MspInit+0xb8>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <HAL_CAN_MspInit+0xb8>)
 8000978:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <HAL_CAN_MspInit+0xb8>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <HAL_CAN_MspInit+0xb8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <HAL_CAN_MspInit+0xb8>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <HAL_CAN_MspInit+0xb8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009b8:	2309      	movs	r3, #9
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <HAL_CAN_MspInit+0xbc>)
 80009c4:	f001 f906 	bl	8001bd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2013      	movs	r0, #19
 80009ce:	f001 f8ca 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80009d2:	2013      	movs	r0, #19
 80009d4:	f001 f8e3 	bl	8001b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2014      	movs	r0, #20
 80009de:	f001 f8c2 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009e2:	2014      	movs	r0, #20
 80009e4:	f001 f8db 	bl	8001b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2015      	movs	r0, #21
 80009ee:	f001 f8ba 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009f2:	2015      	movs	r0, #21
 80009f4:	f001 f8d3 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40006400 	.word	0x40006400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f001 f8a7 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 f8b7 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <CAN1_TX_IRQHandler+0x10>)
 8000b02:	f000 fd26 	bl	8001552 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000028 	.word	0x20000028

08000b10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <CAN1_RX0_IRQHandler+0x10>)
 8000b16:	f000 fd1c 	bl	8001552 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000028 	.word	0x20000028

08000b24 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <CAN1_RX1_IRQHandler+0x10>)
 8000b2a:	f000 fd12 	bl	8001552 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000028 	.word	0x20000028

08000b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b3c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b40:	f001 fa10 	bl	8001f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	@ (8000bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	@ (8000bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b96:	f7ff ffd7 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f002 fb09 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fcc3 	bl	8000528 <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb0:	08003238 	.word	0x08003238
  ldr r2, =_sbss
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb8:	200000e4 	.word	0x200000e4

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 ffb1 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe82 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 ffc9 	bl	8001bba <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 ff91 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	200000e0 	.word	0x200000e0

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000e0 	.word	0x200000e0

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0ed      	b.n	8000eda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fe1e 	bl	800094c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d20:	f7ff ffb4 	bl	8000c8c <HAL_GetTick>
 8000d24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d26:	e012      	b.n	8000d4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d28:	f7ff ffb0 	bl	8000c8c <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d90b      	bls.n	8000d4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2205      	movs	r2, #5
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0c5      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0e5      	beq.n	8000d28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0202 	bic.w	r2, r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d6c:	f7ff ff8e 	bl	8000c8c <HAL_GetTick>
 8000d70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d72:	e012      	b.n	8000d9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d74:	f7ff ff8a 	bl	8000c8c <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d90b      	bls.n	8000d9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2205      	movs	r2, #5
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e09f      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e5      	bne.n	8000d74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7e1b      	ldrb	r3, [r3, #24]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e5b      	ldrb	r3, [r3, #25]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d108      	bne.n	8000dec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e9b      	ldrb	r3, [r3, #26]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0220 	bic.w	r2, r2, #32
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7edb      	ldrb	r3, [r3, #27]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0210 	bic.w	r2, r2, #16
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0210 	orr.w	r2, r2, #16
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0208 	bic.w	r2, r2, #8
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7f5b      	ldrb	r3, [r3, #29]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000efc:	7cfb      	ldrb	r3, [r7, #19]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d003      	beq.n	8000f0a <HAL_CAN_ConfigFilter+0x26>
 8000f02:	7cfb      	ldrb	r3, [r7, #19]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	f040 80be 	bne.w	8001086 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f0a:	4b65      	ldr	r3, [pc, #404]	@ (80010a0 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f14:	f043 0201 	orr.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f24:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d123      	bne.n	8000fb4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3248      	adds	r2, #72	@ 0x48
 8000f94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000faa:	6979      	ldr	r1, [r7, #20]
 8000fac:	3348      	adds	r3, #72	@ 0x48
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	440b      	add	r3, r1
 8000fb2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d122      	bne.n	8001002 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fdc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3248      	adds	r2, #72	@ 0x48
 8000fe2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff8:	6979      	ldr	r1, [r7, #20]
 8000ffa:	3348      	adds	r3, #72	@ 0x48
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	401a      	ands	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800101c:	e007      	b.n	800102e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	431a      	orrs	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	401a      	ands	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001048:	e007      	b.n	800105a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	431a      	orrs	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001078:	f023 0201 	bic.w	r2, r3, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e006      	b.n	8001094 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
  }
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40006400 	.word	0x40006400

080010a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d12e      	bne.n	8001116 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d0:	f7ff fddc 	bl	8000c8c <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010d6:	e012      	b.n	80010fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d8:	f7ff fdd8 	bl	8000c8c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d90b      	bls.n	80010fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e012      	b.n	8001124 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e5      	bne.n	80010d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e006      	b.n	8001124 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
  }
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001140:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <HAL_CAN_AddTxMessage+0x2c>
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	2b02      	cmp	r3, #2
 8001154:	f040 80b8 	bne.w	80012c8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001168:	2b00      	cmp	r3, #0
 800116a:	d105      	bne.n	8001178 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80a0 	beq.w	80012b8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	0e1b      	lsrs	r3, r3, #24
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d907      	bls.n	8001198 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e09e      	b.n	80012d6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001198:	2201      	movs	r2, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	409a      	lsls	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	6809      	ldr	r1, [r1, #0]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3318      	adds	r3, #24
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	440b      	add	r3, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e00f      	b.n	80011e6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3318      	adds	r3, #24
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	440b      	add	r3, r1
 80011e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3318      	adds	r3, #24
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	3304      	adds	r3, #4
 80011f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	7d1b      	ldrb	r3, [r3, #20]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d111      	bne.n	8001226 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3318      	adds	r3, #24
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	6811      	ldr	r1, [r2, #0]
 8001216:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3318      	adds	r3, #24
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	440b      	add	r3, r1
 8001222:	3304      	adds	r3, #4
 8001224:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3307      	adds	r3, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	061a      	lsls	r2, r3, #24
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3306      	adds	r3, #6
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3305      	adds	r3, #5
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	4313      	orrs	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	3204      	adds	r2, #4
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	4610      	mov	r0, r2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	ea43 0200 	orr.w	r2, r3, r0
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	440b      	add	r3, r1
 8001258:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800125c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3303      	adds	r3, #3
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	061a      	lsls	r2, r3, #24
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3302      	adds	r3, #2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	4313      	orrs	r3, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4610      	mov	r0, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6811      	ldr	r1, [r2, #0]
 8001284:	ea43 0200 	orr.w	r2, r3, r0
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	440b      	add	r3, r1
 800128e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001292:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3318      	adds	r3, #24
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3318      	adds	r3, #24
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	440b      	add	r3, r1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e00e      	b.n	80012d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e006      	b.n	80012d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012e2:	b480      	push	{r7}
 80012e4:	b087      	sub	sp, #28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_GetRxMessage+0x24>
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b02      	cmp	r3, #2
 8001302:	f040 80f3 	bne.w	80014ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10e      	bne.n	800132a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0e7      	b.n	80014fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d107      	bne.n	8001348 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0d8      	b.n	80014fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	331b      	adds	r3, #27
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0204 	and.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0d5b      	lsrs	r3, r3, #21
 8001376:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00b      	b.n	8001398 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	331b      	adds	r3, #27
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	331b      	adds	r3, #27
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0202 	and.w	r2, r3, #2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	331b      	adds	r3, #27
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 020f 	and.w	r2, r3, #15
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	331b      	adds	r3, #27
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	331b      	adds	r3, #27
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	3304      	adds	r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0a1a      	lsrs	r2, r3, #8
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0c1a      	lsrs	r2, r3, #16
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3302      	adds	r3, #2
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0e1a      	lsrs	r2, r3, #24
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3303      	adds	r3, #3
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3304      	adds	r3, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0a1a      	lsrs	r2, r3, #8
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3305      	adds	r3, #5
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0c1a      	lsrs	r2, r3, #16
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3306      	adds	r3, #6
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0e1a      	lsrs	r2, r3, #24
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3307      	adds	r3, #7
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d108      	bne.n	80014d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0220 	orr.w	r2, r2, #32
 80014e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e006      	b.n	80014fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
  }
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d002      	beq.n	8001524 <HAL_CAN_ActivateNotification+0x1e>
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d109      	bne.n	8001538 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6959      	ldr	r1, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	e006      	b.n	8001546 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
  }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b08a      	sub	sp, #40	@ 0x28
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d07c      	beq.n	8001692 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d023      	beq.n	80015ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f983 	bl	80018c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80015ba:	e016      	b.n	80015ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ce:	e00c      	b.n	80015ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e2:	e002      	b.n	80015ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f989 	bl	80018fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d024      	beq.n	800163e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f963 	bl	80018d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800160e:	e016      	b.n	800163e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
 8001622:	e00c      	b.n	800163e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
 8001636:	e002      	b.n	800163e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f969 	bl	8001910 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d024      	beq.n	8001692 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001650:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f943 	bl	80018e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001662:	e016      	b.n	8001692 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
 8001676:	e00c      	b.n	8001692 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
 800168a:	e002      	b.n	8001692 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f949 	bl	8001924 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2210      	movs	r2, #16
 80016b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00b      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2208      	movs	r2, #8
 80016d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f93a 	bl	800194c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f921 	bl	8001938 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2210      	movs	r2, #16
 8001718:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2208      	movs	r2, #8
 8001734:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe fedc 	bl	80004f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f903 	bl	8001960 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2210      	movs	r2, #16
 8001774:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8fc 	bl	8001974 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2208      	movs	r2, #8
 8001796:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8f5 	bl	8001988 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d07b      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d072      	beq.n	8001898 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800180c:	2b00      	cmp	r3, #0
 800180e:	d043      	beq.n	8001898 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03e      	beq.n	8001898 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001820:	2b60      	cmp	r3, #96	@ 0x60
 8001822:	d02b      	beq.n	800187c <HAL_CAN_IRQHandler+0x32a>
 8001824:	2b60      	cmp	r3, #96	@ 0x60
 8001826:	d82e      	bhi.n	8001886 <HAL_CAN_IRQHandler+0x334>
 8001828:	2b50      	cmp	r3, #80	@ 0x50
 800182a:	d022      	beq.n	8001872 <HAL_CAN_IRQHandler+0x320>
 800182c:	2b50      	cmp	r3, #80	@ 0x50
 800182e:	d82a      	bhi.n	8001886 <HAL_CAN_IRQHandler+0x334>
 8001830:	2b40      	cmp	r3, #64	@ 0x40
 8001832:	d019      	beq.n	8001868 <HAL_CAN_IRQHandler+0x316>
 8001834:	2b40      	cmp	r3, #64	@ 0x40
 8001836:	d826      	bhi.n	8001886 <HAL_CAN_IRQHandler+0x334>
 8001838:	2b30      	cmp	r3, #48	@ 0x30
 800183a:	d010      	beq.n	800185e <HAL_CAN_IRQHandler+0x30c>
 800183c:	2b30      	cmp	r3, #48	@ 0x30
 800183e:	d822      	bhi.n	8001886 <HAL_CAN_IRQHandler+0x334>
 8001840:	2b10      	cmp	r3, #16
 8001842:	d002      	beq.n	800184a <HAL_CAN_IRQHandler+0x2f8>
 8001844:	2b20      	cmp	r3, #32
 8001846:	d005      	beq.n	8001854 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001848:	e01d      	b.n	8001886 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001852:	e019      	b.n	8001888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800185c:	e014      	b.n	8001888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001866:	e00f      	b.n	8001888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001870:	e00a      	b.n	8001888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800187a:	e005      	b.n	8001888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001884:	e000      	b.n	8001888 <HAL_CAN_IRQHandler+0x336>
            break;
 8001886:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001896:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2204      	movs	r2, #4
 800189e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f872 	bl	800199c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	@ 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	@ (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	@ 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff29 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff3e 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff31 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	@ 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e165      	b.n	8001ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8154 	bne.w	8001eb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80ae 	beq.w	8001eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_GPIO_Init+0x300>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed4 <HAL_GPIO_Init+0x300>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <HAL_GPIO_Init+0x300>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a58      	ldr	r2, [pc, #352]	@ (8001ed8 <HAL_GPIO_Init+0x304>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001edc <HAL_GPIO_Init+0x308>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d025      	beq.n	8001dee <HAL_GPIO_Init+0x21a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01f      	beq.n	8001dea <HAL_GPIO_Init+0x216>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_GPIO_Init+0x310>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x212>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_GPIO_Init+0x314>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x20e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001eec <HAL_GPIO_Init+0x318>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x20a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef0 <HAL_GPIO_Init+0x31c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x206>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a49      	ldr	r2, [pc, #292]	@ (8001ef4 <HAL_GPIO_Init+0x320>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x202>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e00c      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e00a      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dda:	2305      	movs	r3, #5
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x21c>
 8001dee:	2300      	movs	r3, #0
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	f002 0203 	and.w	r2, r2, #3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e00:	4935      	ldr	r1, [pc, #212]	@ (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e32:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb0:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <HAL_GPIO_Init+0x324>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b0f      	cmp	r3, #15
 8001ec0:	f67f ae96 	bls.w	8001bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	@ 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40021400 	.word	0x40021400
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f40:	887a      	ldrh	r2, [r7, #2]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	041a      	lsls	r2, r3, #16
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	400b      	ands	r3, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f806 	bl	8001f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <HAL_PWREx_EnableOverDrive+0x90>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800203c <HAL_PWREx_EnableOverDrive+0x90>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_PWREx_EnableOverDrive+0x90>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <HAL_PWREx_EnableOverDrive+0x94>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7fe fe58 	bl	8000c8c <HAL_GetTick>
 8001fdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fde:	e009      	b.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe0:	f7fe fe54 	bl	8000c8c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fee:	d901      	bls.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e01f      	b.n	8002034 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002000:	d1ee      	bne.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7fe fe40 	bl	8000c8c <HAL_GetTick>
 800200c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800200e:	e009      	b.n	8002024 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002010:	f7fe fe3c 	bl	8000c8c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800201e:	d901      	bls.n	8002024 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e007      	b.n	8002034 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002024:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002030:	d1ee      	bne.n	8002010 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	420e0040 	.word	0x420e0040
 8002044:	40007000 	.word	0x40007000
 8002048:	420e0044 	.word	0x420e0044

0800204c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0cc      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b68      	ldr	r3, [pc, #416]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d90c      	bls.n	8002088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d044      	beq.n	800216c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e067      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4934      	ldr	r1, [pc, #208]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7fe fda6 	bl	8000c8c <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe fda2 	bl	8000c8c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e04f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d20c      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f855 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	@ (800220c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fd06 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00
 8002208:	40023800 	.word	0x40023800
 800220c:	08003210 	.word	0x08003210
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	08003220 	.word	0x08003220

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffdc 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	@ (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08003220 	.word	0x08003220

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b0ae      	sub	sp, #184	@ 0xb8
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a6:	4bcb      	ldr	r3, [pc, #812]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	f200 8206 	bhi.w	80026c0 <HAL_RCC_GetSysClockFreq+0x440>
 80022b4:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	080026c1 	.word	0x080026c1
 80022c4:	080026c1 	.word	0x080026c1
 80022c8:	080026c1 	.word	0x080026c1
 80022cc:	080022f9 	.word	0x080022f9
 80022d0:	080026c1 	.word	0x080026c1
 80022d4:	080026c1 	.word	0x080026c1
 80022d8:	080026c1 	.word	0x080026c1
 80022dc:	08002301 	.word	0x08002301
 80022e0:	080026c1 	.word	0x080026c1
 80022e4:	080026c1 	.word	0x080026c1
 80022e8:	080026c1 	.word	0x080026c1
 80022ec:	080024f1 	.word	0x080024f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4bb9      	ldr	r3, [pc, #740]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80022f6:	e1e7      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f8:	4bb8      	ldr	r3, [pc, #736]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022fe:	e1e3      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4bb4      	ldr	r3, [pc, #720]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230c:	4bb1      	ldr	r3, [pc, #708]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d071      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002318:	4bae      	ldr	r3, [pc, #696]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	2200      	movs	r2, #0
 8002320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002324:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800232c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800233a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800233e:	4622      	mov	r2, r4
 8002340:	462b      	mov	r3, r5
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	0159      	lsls	r1, r3, #5
 800234c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002350:	0150      	lsls	r0, r2, #5
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4621      	mov	r1, r4
 8002358:	1a51      	subs	r1, r2, r1
 800235a:	6439      	str	r1, [r7, #64]	@ 0x40
 800235c:	4629      	mov	r1, r5
 800235e:	eb63 0301 	sbc.w	r3, r3, r1
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002370:	4649      	mov	r1, r9
 8002372:	018b      	lsls	r3, r1, #6
 8002374:	4641      	mov	r1, r8
 8002376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800237a:	4641      	mov	r1, r8
 800237c:	018a      	lsls	r2, r1, #6
 800237e:	4641      	mov	r1, r8
 8002380:	1a51      	subs	r1, r2, r1
 8002382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002384:	4649      	mov	r1, r9
 8002386:	eb63 0301 	sbc.w	r3, r3, r1
 800238a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002398:	4649      	mov	r1, r9
 800239a:	00cb      	lsls	r3, r1, #3
 800239c:	4641      	mov	r1, r8
 800239e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a2:	4641      	mov	r1, r8
 80023a4:	00ca      	lsls	r2, r1, #3
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	4622      	mov	r2, r4
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023b2:	462b      	mov	r3, r5
 80023b4:	460a      	mov	r2, r1
 80023b6:	eb42 0303 	adc.w	r3, r2, r3
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023c8:	4629      	mov	r1, r5
 80023ca:	024b      	lsls	r3, r1, #9
 80023cc:	4621      	mov	r1, r4
 80023ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d2:	4621      	mov	r1, r4
 80023d4:	024a      	lsls	r2, r1, #9
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023ec:	f7fd ff0a 	bl	8000204 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4613      	mov	r3, r2
 80023f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fa:	e067      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fc:	4b75      	ldr	r3, [pc, #468]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002408:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800240c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002416:	2300      	movs	r3, #0
 8002418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800241a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800241e:	4622      	mov	r2, r4
 8002420:	462b      	mov	r3, r5
 8002422:	f04f 0000 	mov.w	r0, #0
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	0159      	lsls	r1, r3, #5
 800242c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002430:	0150      	lsls	r0, r2, #5
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4621      	mov	r1, r4
 8002438:	1a51      	subs	r1, r2, r1
 800243a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800243c:	4629      	mov	r1, r5
 800243e:	eb63 0301 	sbc.w	r3, r3, r1
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002450:	4649      	mov	r1, r9
 8002452:	018b      	lsls	r3, r1, #6
 8002454:	4641      	mov	r1, r8
 8002456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245a:	4641      	mov	r1, r8
 800245c:	018a      	lsls	r2, r1, #6
 800245e:	4641      	mov	r1, r8
 8002460:	ebb2 0a01 	subs.w	sl, r2, r1
 8002464:	4649      	mov	r1, r9
 8002466:	eb63 0b01 	sbc.w	fp, r3, r1
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002476:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800247a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800247e:	4692      	mov	sl, r2
 8002480:	469b      	mov	fp, r3
 8002482:	4623      	mov	r3, r4
 8002484:	eb1a 0303 	adds.w	r3, sl, r3
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	462b      	mov	r3, r5
 800248c:	eb4b 0303 	adc.w	r3, fp, r3
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800249e:	4629      	mov	r1, r5
 80024a0:	028b      	lsls	r3, r1, #10
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a8:	4621      	mov	r1, r4
 80024aa:	028a      	lsls	r2, r1, #10
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024b4:	2200      	movs	r2, #0
 80024b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80024b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80024ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024be:	f7fd fea1 	bl	8000204 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4613      	mov	r3, r2
 80024c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024cc:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	3301      	adds	r3, #1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80024de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024ee:	e0eb      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f0:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fc:	4b35      	ldr	r3, [pc, #212]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d06b      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b32      	ldr	r3, [pc, #200]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	2200      	movs	r2, #0
 8002510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
 800251c:	2300      	movs	r3, #0
 800251e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002520:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002524:	4622      	mov	r2, r4
 8002526:	462b      	mov	r3, r5
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	0159      	lsls	r1, r3, #5
 8002532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002536:	0150      	lsls	r0, r2, #5
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4621      	mov	r1, r4
 800253e:	1a51      	subs	r1, r2, r1
 8002540:	61b9      	str	r1, [r7, #24]
 8002542:	4629      	mov	r1, r5
 8002544:	eb63 0301 	sbc.w	r3, r3, r1
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002556:	4659      	mov	r1, fp
 8002558:	018b      	lsls	r3, r1, #6
 800255a:	4651      	mov	r1, sl
 800255c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002560:	4651      	mov	r1, sl
 8002562:	018a      	lsls	r2, r1, #6
 8002564:	4651      	mov	r1, sl
 8002566:	ebb2 0801 	subs.w	r8, r2, r1
 800256a:	4659      	mov	r1, fp
 800256c:	eb63 0901 	sbc.w	r9, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002580:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002584:	4690      	mov	r8, r2
 8002586:	4699      	mov	r9, r3
 8002588:	4623      	mov	r3, r4
 800258a:	eb18 0303 	adds.w	r3, r8, r3
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	462b      	mov	r3, r5
 8002592:	eb49 0303 	adc.w	r3, r9, r3
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025a4:	4629      	mov	r1, r5
 80025a6:	024b      	lsls	r3, r1, #9
 80025a8:	4621      	mov	r1, r4
 80025aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ae:	4621      	mov	r1, r4
 80025b0:	024a      	lsls	r2, r1, #9
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ba:	2200      	movs	r2, #0
 80025bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025c4:	f7fd fe1e 	bl	8000204 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025d2:	e065      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x420>
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e0:	4b3d      	ldr	r3, [pc, #244]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	2200      	movs	r2, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	4611      	mov	r1, r2
 80025ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80025f2:	2300      	movs	r3, #0
 80025f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80025f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025fa:	4642      	mov	r2, r8
 80025fc:	464b      	mov	r3, r9
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4641      	mov	r1, r8
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	4649      	mov	r1, r9
 800261a:	eb63 0301 	sbc.w	r3, r3, r1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800262c:	4659      	mov	r1, fp
 800262e:	018b      	lsls	r3, r1, #6
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002636:	4651      	mov	r1, sl
 8002638:	018a      	lsls	r2, r1, #6
 800263a:	4651      	mov	r1, sl
 800263c:	1a54      	subs	r4, r2, r1
 800263e:	4659      	mov	r1, fp
 8002640:	eb63 0501 	sbc.w	r5, r3, r1
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002688:	2200      	movs	r2, #0
 800268a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800268c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800268e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002692:	f7fd fdb7 	bl	8000204 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4613      	mov	r3, r2
 800269c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026a0:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0f1b      	lsrs	r3, r3, #28
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80026ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026be:	e003      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80026c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	37b8      	adds	r7, #184	@ 0xb8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400

080026e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e28d      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8083 	beq.w	8002806 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002700:	4b94      	ldr	r3, [pc, #592]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d019      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800270c:	4b91      	ldr	r3, [pc, #580]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002714:	2b08      	cmp	r3, #8
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002718:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002724:	d00c      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b8b      	ldr	r3, [pc, #556]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d112      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4b84      	ldr	r3, [pc, #528]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05b      	beq.n	8002804 <HAL_RCC_OscConfig+0x124>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d157      	bne.n	8002804 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e25a      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x90>
 8002762:	4b7c      	ldr	r3, [pc, #496]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7b      	ldr	r2, [pc, #492]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0xcc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0xb4>
 800277a:	4b76      	ldr	r3, [pc, #472]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b73      	ldr	r3, [pc, #460]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a72      	ldr	r2, [pc, #456]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xcc>
 8002794:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fa6a 	bl	8000c8c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe fa66 	bl	8000c8c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e21f      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b61      	ldr	r3, [pc, #388]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xdc>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fa56 	bl	8000c8c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe fa52 	bl	8000c8c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e20b      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	4b57      	ldr	r3, [pc, #348]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x104>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06f      	beq.n	80028f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002812:	4b50      	ldr	r3, [pc, #320]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800281e:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002826:	2b08      	cmp	r3, #8
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1d3      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCC_OscConfig+0x278>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe f9ff 	bl	8000c8c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe f9fb 	bl	8000c8c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1b4      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x278>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe f9de 	bl	8000c8c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe f9da 	bl	8000c8c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e193      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_RCC_OscConfig+0x27c>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe f9be 	bl	8000c8c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe f9ba 	bl	8000c8c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e173      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x234>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_OscConfig+0x27c>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe f9a7 	bl	8000c8c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe f9a3 	bl	8000c8c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e15c      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b8a      	ldr	r3, [pc, #552]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b83      	ldr	r3, [pc, #524]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a7e      	ldr	r2, [pc, #504]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b79      	ldr	r3, [pc, #484]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b76      	ldr	r3, [pc, #472]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a75      	ldr	r2, [pc, #468]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe f963 	bl	8000c8c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe f95f 	bl	8000c8c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e118      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x31e>
 80029f0:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x358>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x340>
 8002a06:	4b61      	ldr	r3, [pc, #388]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	4a60      	ldr	r2, [pc, #384]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a12:	4b5e      	ldr	r3, [pc, #376]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5d      	ldr	r2, [pc, #372]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x358>
 8002a20:	4b5a      	ldr	r3, [pc, #360]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	4a59      	ldr	r2, [pc, #356]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2c:	4b57      	ldr	r3, [pc, #348]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a56      	ldr	r2, [pc, #344]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe f924 	bl	8000c8c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe f920 	bl	8000c8c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0d7      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x368>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe f90e 	bl	8000c8c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe f90a 	bl	8000c8c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0c1      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b40      	ldr	r3, [pc, #256]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80ad 	beq.w	8002c0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d145      	bne.n	8002b52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe f8de 	bl	8000c8c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f8da 	bl	8000c8c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e093      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	491b      	ldr	r1, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f8af 	bl	8000c8c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe f8ab 	bl	8000c8c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e064      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x452>
 8002b50:	e05c      	b.n	8002c0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe f898 	bl	8000c8c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe f894 	bl	8000c8c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e04d      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x480>
 8002b7e:	e045      	b.n	8002c0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e040      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <HAL_RCC_OscConfig+0x538>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d030      	beq.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d129      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d122      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d119      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10f      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03f      	b.n	8002cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fee2 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	@ 0x24
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f829 	bl	8002cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b0c0      	sub	sp, #256	@ 0x100
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	ea40 0301 	orr.w	r3, r0, r1
 8002ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d10:	f021 010c 	bic.w	r1, r1, #12
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d32:	6999      	ldr	r1, [r3, #24]
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	ea40 0301 	orr.w	r3, r0, r1
 8002d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4b8f      	ldr	r3, [pc, #572]	@ (8002f84 <UART_SetConfig+0x2cc>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d005      	beq.n	8002d58 <UART_SetConfig+0xa0>
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b8d      	ldr	r3, [pc, #564]	@ (8002f88 <UART_SetConfig+0x2d0>)
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d104      	bne.n	8002d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d58:	f7ff fa7e 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8002d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d60:	e003      	b.n	8002d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d62:	f7ff fa65 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002d66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d74:	f040 810c 	bne.w	8002f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	1891      	adds	r1, r2, r2
 8002d90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d92:	415b      	adcs	r3, r3
 8002d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	eb12 0801 	adds.w	r8, r2, r1
 8002da0:	4629      	mov	r1, r5
 8002da2:	eb43 0901 	adc.w	r9, r3, r1
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	eb18 0303 	adds.w	r3, r8, r3
 8002dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dc8:	462b      	mov	r3, r5
 8002dca:	eb49 0303 	adc.w	r3, r9, r3
 8002dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002de6:	460b      	mov	r3, r1
 8002de8:	18db      	adds	r3, r3, r3
 8002dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dec:	4613      	mov	r3, r2
 8002dee:	eb42 0303 	adc.w	r3, r2, r3
 8002df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dfc:	f7fd fa02 	bl	8000204 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4b61      	ldr	r3, [pc, #388]	@ (8002f8c <UART_SetConfig+0x2d4>)
 8002e06:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	011c      	lsls	r4, r3, #4
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e30:	4641      	mov	r1, r8
 8002e32:	eb12 0a01 	adds.w	sl, r2, r1
 8002e36:	4649      	mov	r1, r9
 8002e38:	eb43 0b01 	adc.w	fp, r3, r1
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e50:	4692      	mov	sl, r2
 8002e52:	469b      	mov	fp, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	eb1a 0303 	adds.w	r3, sl, r3
 8002e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb4b 0303 	adc.w	r3, fp, r3
 8002e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	18db      	adds	r3, r3, r3
 8002e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e82:	4613      	mov	r3, r2
 8002e84:	eb42 0303 	adc.w	r3, r2, r3
 8002e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e92:	f7fd f9b7 	bl	8000204 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f8c <UART_SetConfig+0x2d4>)
 8002e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2264      	movs	r2, #100	@ 0x64
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	1acb      	subs	r3, r1, r3
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002eb2:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <UART_SetConfig+0x2d4>)
 8002eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ec0:	441c      	add	r4, r3
 8002ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	1891      	adds	r1, r2, r2
 8002eda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002edc:	415b      	adcs	r3, r3
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	1851      	adds	r1, r2, r1
 8002ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002eea:	4649      	mov	r1, r9
 8002eec:	414b      	adcs	r3, r1
 8002eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002efc:	4659      	mov	r1, fp
 8002efe:	00cb      	lsls	r3, r1, #3
 8002f00:	4651      	mov	r1, sl
 8002f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f06:	4651      	mov	r1, sl
 8002f08:	00ca      	lsls	r2, r1, #3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4642      	mov	r2, r8
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f18:	464b      	mov	r3, r9
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	eb42 0303 	adc.w	r3, r2, r3
 8002f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f38:	460b      	mov	r3, r1
 8002f3a:	18db      	adds	r3, r3, r3
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f3e:	4613      	mov	r3, r2
 8002f40:	eb42 0303 	adc.w	r3, r2, r3
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f4e:	f7fd f959 	bl	8000204 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <UART_SetConfig+0x2d4>)
 8002f58:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	2164      	movs	r1, #100	@ 0x64
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3332      	adds	r3, #50	@ 0x32
 8002f6a:	4a08      	ldr	r2, [pc, #32]	@ (8002f8c <UART_SetConfig+0x2d4>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	f003 0207 	and.w	r2, r3, #7
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4422      	add	r2, r4
 8002f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f80:	e106      	b.n	8003190 <UART_SetConfig+0x4d8>
 8002f82:	bf00      	nop
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40011400 	.word	0x40011400
 8002f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fa2:	4642      	mov	r2, r8
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	1891      	adds	r1, r2, r2
 8002fa8:	6239      	str	r1, [r7, #32]
 8002faa:	415b      	adcs	r3, r3
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	1854      	adds	r4, r2, r1
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	eb43 0501 	adc.w	r5, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	00eb      	lsls	r3, r5, #3
 8002fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fca:	00e2      	lsls	r2, r4, #3
 8002fcc:	4614      	mov	r4, r2
 8002fce:	461d      	mov	r5, r3
 8002fd0:	4643      	mov	r3, r8
 8002fd2:	18e3      	adds	r3, r4, r3
 8002fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fd8:	464b      	mov	r3, r9
 8002fda:	eb45 0303 	adc.w	r3, r5, r3
 8002fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ffe:	4629      	mov	r1, r5
 8003000:	008b      	lsls	r3, r1, #2
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003008:	4621      	mov	r1, r4
 800300a:	008a      	lsls	r2, r1, #2
 800300c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003010:	f7fd f8f8 	bl	8000204 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4b60      	ldr	r3, [pc, #384]	@ (800319c <UART_SetConfig+0x4e4>)
 800301a:	fba3 2302 	umull	r2, r3, r3, r2
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	011c      	lsls	r4, r3, #4
 8003022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800302c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	61b9      	str	r1, [r7, #24]
 800303c:	415b      	adcs	r3, r3
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6139      	str	r1, [r7, #16]
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003078:	464b      	mov	r3, r9
 800307a:	460a      	mov	r2, r1
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800308e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800309c:	4649      	mov	r1, r9
 800309e:	008b      	lsls	r3, r1, #2
 80030a0:	4641      	mov	r1, r8
 80030a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a6:	4641      	mov	r1, r8
 80030a8:	008a      	lsls	r2, r1, #2
 80030aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030ae:	f7fd f8a9 	bl	8000204 <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	4b38      	ldr	r3, [pc, #224]	@ (800319c <UART_SetConfig+0x4e4>)
 80030ba:	fba3 2301 	umull	r2, r3, r3, r1
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2264      	movs	r2, #100	@ 0x64
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	1acb      	subs	r3, r1, r3
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	3332      	adds	r3, #50	@ 0x32
 80030cc:	4a33      	ldr	r2, [pc, #204]	@ (800319c <UART_SetConfig+0x4e4>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d8:	441c      	add	r4, r3
 80030da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030de:	2200      	movs	r2, #0
 80030e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80030e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80030e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	1891      	adds	r1, r2, r2
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	415b      	adcs	r3, r3
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f8:	4641      	mov	r1, r8
 80030fa:	1851      	adds	r1, r2, r1
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	4649      	mov	r1, r9
 8003100:	414b      	adcs	r3, r1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003110:	4659      	mov	r1, fp
 8003112:	00cb      	lsls	r3, r1, #3
 8003114:	4651      	mov	r1, sl
 8003116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800311a:	4651      	mov	r1, sl
 800311c:	00ca      	lsls	r2, r1, #3
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	4603      	mov	r3, r0
 8003124:	4642      	mov	r2, r8
 8003126:	189b      	adds	r3, r3, r2
 8003128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800312a:	464b      	mov	r3, r9
 800312c:	460a      	mov	r2, r1
 800312e:	eb42 0303 	adc.w	r3, r2, r3
 8003132:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	663b      	str	r3, [r7, #96]	@ 0x60
 800313e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800314c:	4649      	mov	r1, r9
 800314e:	008b      	lsls	r3, r1, #2
 8003150:	4641      	mov	r1, r8
 8003152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003156:	4641      	mov	r1, r8
 8003158:	008a      	lsls	r2, r1, #2
 800315a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800315e:	f7fd f851 	bl	8000204 <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <UART_SetConfig+0x4e4>)
 8003168:	fba3 1302 	umull	r1, r3, r3, r2
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	2164      	movs	r1, #100	@ 0x64
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	3332      	adds	r3, #50	@ 0x32
 800317a:	4a08      	ldr	r2, [pc, #32]	@ (800319c <UART_SetConfig+0x4e4>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4422      	add	r2, r4
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003196:	46bd      	mov	sp, r7
 8003198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319c:	51eb851f 	.word	0x51eb851f

080031a0 <memset>:
 80031a0:	4402      	add	r2, r0
 80031a2:	4603      	mov	r3, r0
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d100      	bne.n	80031aa <memset+0xa>
 80031a8:	4770      	bx	lr
 80031aa:	f803 1b01 	strb.w	r1, [r3], #1
 80031ae:	e7f9      	b.n	80031a4 <memset+0x4>

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4d0d      	ldr	r5, [pc, #52]	@ (80031e8 <__libc_init_array+0x38>)
 80031b4:	4c0d      	ldr	r4, [pc, #52]	@ (80031ec <__libc_init_array+0x3c>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	2600      	movs	r6, #0
 80031bc:	42a6      	cmp	r6, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	4d0b      	ldr	r5, [pc, #44]	@ (80031f0 <__libc_init_array+0x40>)
 80031c2:	4c0c      	ldr	r4, [pc, #48]	@ (80031f4 <__libc_init_array+0x44>)
 80031c4:	f000 f818 	bl	80031f8 <_init>
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	2600      	movs	r6, #0
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d8:	4798      	blx	r3
 80031da:	3601      	adds	r6, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e2:	4798      	blx	r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	08003230 	.word	0x08003230
 80031ec:	08003230 	.word	0x08003230
 80031f0:	08003230 	.word	0x08003230
 80031f4:	08003234 	.word	0x08003234

080031f8 <_init>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr

08003204 <_fini>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr
