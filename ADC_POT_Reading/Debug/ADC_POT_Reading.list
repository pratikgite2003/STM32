
ADC_POT_Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800955c  0800955c  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080095bc  080095bc  0000a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c4  080095c4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  0000a5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c8  080095c8  0000a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080095cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          000009e4  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a60  20000a60  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fa3  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e1a  00000000  00000000  0002404f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00027e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8e  00000000  00000000  00029298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a23  00000000  00000000  0002a226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4ed  00000000  00000000  0004fc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ef2  00000000  00000000  0006b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145028  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059e4  00000000  00000000  0014506c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0014aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009544 	.word	0x08009544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009544 	.word	0x08009544

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fd30 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f840 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9b8 	bl	80008f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000580:	f000 f8f8 	bl	8000774 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000584:	f000 f924 	bl	80007d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000588:	f000 f952 	bl	8000830 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800058c:	f008 f822 	bl	80085d4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000590:	f000 f89e 	bl	80006d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f982 	bl	800089c <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000598:	f008 f842 	bl	8008620 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */



    HAL_ADC_Start(&hadc1);
 800059c:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <main+0x78>)
 800059e:	f000 fdf5 	bl	800118c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,20);
 80005a2:	2114      	movs	r1, #20
 80005a4:	4810      	ldr	r0, [pc, #64]	@ (80005e8 <main+0x78>)
 80005a6:	f000 fec3 	bl	8001330 <HAL_ADC_PollForConversion>
    pot=HAL_ADC_GetValue(&hadc1);
 80005aa:	480f      	ldr	r0, [pc, #60]	@ (80005e8 <main+0x78>)
 80005ac:	f000 ff4b 	bl	8001446 <HAL_ADC_GetValue>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <main+0x7c>)
 80005b6:	801a      	strh	r2, [r3, #0]
    sprintf(msg, "Pot Value:%d \r\n",pot);
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <main+0x7c>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	490c      	ldr	r1, [pc, #48]	@ (80005f0 <main+0x80>)
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <main+0x84>)
 80005c2:	f008 fbcd 	bl	8008d60 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
 80005c6:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <main+0x84>)
 80005c8:	f7ff fe02 	bl	80001d0 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d4:	4907      	ldr	r1, [pc, #28]	@ (80005f4 <main+0x84>)
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <main+0x88>)
 80005d8:	f004 fcc4 	bl	8004f64 <HAL_UART_Transmit>
    HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e0:	f000 fd6c 	bl	80010bc <HAL_Delay>
    MX_USB_HOST_Process();
 80005e4:	bf00      	nop
 80005e6:	e7d7      	b.n	8000598 <main+0x28>
 80005e8:	20000098 	.word	0x20000098
 80005ec:	20000218 	.word	0x20000218
 80005f0:	0800955c 	.word	0x0800955c
 80005f4:	2000021c 	.word	0x2000021c
 80005f8:	200001d4 	.word	0x200001d4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fbc8 	bl	8008da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fdc0 	bl	8004208 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 fa2d 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2105      	movs	r1, #5
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f821 	bl	80046f8 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 fa16 	bl	8000aec <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	@ 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <MX_ADC1_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000712:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <MX_ADC1_Init+0xa0>)
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_ADC1_Init+0x98>)
 800071e:	2201      	movs	r2, #1
 8000720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_ADC1_Init+0x98>)
 800072c:	2201      	movs	r2, #1
 800072e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000732:	f000 fce7 	bl	8001104 <HAL_ADC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800073c:	f000 f9d6 	bl	8000aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000740:	2301      	movs	r3, #1
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000748:	2301      	movs	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_ADC1_Init+0x98>)
 8000752:	f000 fe85 	bl	8001460 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800075c:	f000 f9c6 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000098 	.word	0x20000098
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f002 ff45 	bl	8003640 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f996 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000e0 	.word	0x200000e0
 80007c8:	40005400 	.word	0x40005400
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007d6:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <MX_I2S3_Init+0x58>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <MX_I2S3_Init+0x5c>)
 80007fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_I2S3_Init+0x54>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_I2S3_Init+0x54>)
 8000810:	f003 f85a 	bl	80038c8 <HAL_I2S_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081a:	f000 f967 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000134 	.word	0x20000134
 8000828:	40003c00 	.word	0x40003c00
 800082c:	00017700 	.word	0x00017700

08000830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <MX_SPI1_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_SPI1_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000882:	f004 fa99 	bl	8004db8 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800088c:	f000 f92e 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000017c 	.word	0x2000017c
 8000898:	40013000 	.word	0x40013000

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f004 faf9 	bl	8004eca <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f905 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001d4 	.word	0x200001d4
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b72      	ldr	r3, [pc, #456]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a71      	ldr	r2, [pc, #452]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b6f      	ldr	r3, [pc, #444]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b6b      	ldr	r3, [pc, #428]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a6a      	ldr	r2, [pc, #424]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b68      	ldr	r3, [pc, #416]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b64      	ldr	r3, [pc, #400]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a63      	ldr	r2, [pc, #396]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b61      	ldr	r3, [pc, #388]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a5c      	ldr	r2, [pc, #368]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b56      	ldr	r3, [pc, #344]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a55      	ldr	r2, [pc, #340]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b53      	ldr	r3, [pc, #332]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a4e      	ldr	r2, [pc, #312]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad4 <MX_GPIO_Init+0x1e4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4849      	ldr	r0, [pc, #292]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 80009b4:	f001 fa20 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	4847      	ldr	r0, [pc, #284]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 80009be:	f001 fa1b 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009c8:	4845      	ldr	r0, [pc, #276]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 80009ca:	f001 fa15 	bl	8001df8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ce:	2308      	movs	r3, #8
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	483c      	ldr	r0, [pc, #240]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 80009e6:	f001 f86b 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4836      	ldr	r0, [pc, #216]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 8000a02:	f001 f85d 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a16:	2305      	movs	r3, #5
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	482e      	ldr	r0, [pc, #184]	@ (8000adc <MX_GPIO_Init+0x1ec>)
 8000a22:	f001 f84d 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	482a      	ldr	r0, [pc, #168]	@ (8000ae4 <MX_GPIO_Init+0x1f4>)
 8000a3c:	f001 f840 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a40:	2304      	movs	r3, #4
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4825      	ldr	r0, [pc, #148]	@ (8000ae8 <MX_GPIO_Init+0x1f8>)
 8000a54:	f001 f834 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	481c      	ldr	r0, [pc, #112]	@ (8000ae8 <MX_GPIO_Init+0x1f8>)
 8000a76:	f001 f823 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a7e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000a94:	f001 f814 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <MX_GPIO_Init+0x1f0>)
 8000aac:	f001 f808 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_GPIO_Init+0x1e8>)
 8000ac6:	f000 fffb 	bl	8001ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	@ 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 ff80 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_ADC_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d127      	bne.n	8000bba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_ADC_MspInit+0x84>)
 8000bb6:	f000 ff83 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c0e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c20:	2304      	movs	r3, #4
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2c:	f000 ff48 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	@ 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	@ 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a31      	ldr	r2, [pc, #196]	@ (8000d50 <HAL_I2S_MspInit+0xf0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d15a      	bne.n	8000d46 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c94:	23c0      	movs	r3, #192	@ 0xc0
 8000c96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 ff49 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cac:	f7ff ff1e 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a26      	ldr	r2, [pc, #152]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_I2S_MspInit+0xf4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d04:	2310      	movs	r3, #16
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d14:	2306      	movs	r3, #6
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480e      	ldr	r0, [pc, #56]	@ (8000d58 <HAL_I2S_MspInit+0xf8>)
 8000d20:	f000 fece 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d24:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d36:	2306      	movs	r3, #6
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <HAL_I2S_MspInit+0xfc>)
 8000d42:	f000 febd 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3738      	adds	r7, #56	@ 0x38
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40003c00 	.word	0x40003c00
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020800 	.word	0x40020800

08000d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_SPI_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12b      	bne.n	8000dda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_SPI_MspInit+0x88>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <HAL_SPI_MspInit+0x88>)
 8000d8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_SPI_MspInit+0x88>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_SPI_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <HAL_SPI_MspInit+0x88>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_SPI_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dba:	23e0      	movs	r3, #224	@ 0xe0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_SPI_MspInit+0x8c>)
 8000dd6:	f000 fe73 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0x84>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12b      	bne.n	8000e6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <HAL_UART_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e66:	f000 fe2b 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f8d1 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <OTG_FS_IRQHandler+0x10>)
 8000ee6:	f001 fa0b 	bl	8002300 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000614 	.word	0x20000614

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f007 ff54 	bl	8008dd0 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20020000 	.word	0x20020000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000230 	.word	0x20000230
 8000f5c:	20000a60 	.word	0x20000a60

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	@ (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	@ (8000fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fae:	f7ff ffd7 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f007 ff13 	bl	8008ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fadb 	bl	8000570 <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fc8:	080095cc 	.word	0x080095cc
  ldr r2, =_sbss
 8000fcc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fd0:	20000a60 	.word	0x20000a60

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 fd1b 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fd74 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fd33 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001058:	f000 fcfb 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	@ (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000234 	.word	0x20000234

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000234 	.word	0x20000234

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e033      	b.n	8001182 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fd10 	bl	8000b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800114a:	f023 0302 	bic.w	r3, r3, #2
 800114e:	f043 0202 	orr.w	r2, r3, #2
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 faa4 	bl	80016a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f023 0303 	bic.w	r3, r3, #3
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	@ 0x40
 8001172:	e001      	b.n	8001178 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Start+0x1a>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e0b2      	b.n	800130c <HAL_ADC_Start+0x180>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d018      	beq.n	80011ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011cc:	4b52      	ldr	r3, [pc, #328]	@ (8001318 <HAL_ADC_Start+0x18c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a52      	ldr	r2, [pc, #328]	@ (800131c <HAL_ADC_Start+0x190>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9a      	lsrs	r2, r3, #18
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011e0:	e002      	b.n	80011e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d17a      	bne.n	80012f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001226:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800123a:	d106      	bne.n	800124a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001240:	f023 0206 	bic.w	r2, r3, #6
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	645a      	str	r2, [r3, #68]	@ 0x44
 8001248:	e002      	b.n	8001250 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001258:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <HAL_ADC_Start+0x194>)
 800125a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001264:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	2b00      	cmp	r3, #0
 8001270:	d12a      	bne.n	80012c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a2b      	ldr	r2, [pc, #172]	@ (8001324 <HAL_ADC_Start+0x198>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d015      	beq.n	80012a8 <HAL_ADC_Start+0x11c>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a29      	ldr	r2, [pc, #164]	@ (8001328 <HAL_ADC_Start+0x19c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d105      	bne.n	8001292 <HAL_ADC_Start+0x106>
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_ADC_Start+0x194>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00a      	beq.n	80012a8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a25      	ldr	r2, [pc, #148]	@ (800132c <HAL_ADC_Start+0x1a0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d136      	bne.n	800130a <HAL_ADC_Start+0x17e>
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_ADC_Start+0x194>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d130      	bne.n	800130a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d129      	bne.n	800130a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	e020      	b.n	800130a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_ADC_Start+0x198>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11b      	bne.n	800130a <HAL_ADC_Start+0x17e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d114      	bne.n	800130a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	e00b      	b.n	800130a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20000000 	.word	0x20000000
 800131c:	431bde83 	.word	0x431bde83
 8001320:	40012300 	.word	0x40012300
 8001324:	40012000 	.word	0x40012000
 8001328:	40012100 	.word	0x40012100
 800132c:	40012200 	.word	0x40012200

08001330 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134c:	d113      	bne.n	8001376 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800135c:	d10b      	bne.n	8001376 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f043 0220 	orr.w	r2, r3, #32
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e063      	b.n	800143e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001376:	f7ff fe95 	bl	80010a4 <HAL_GetTick>
 800137a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800137c:	e021      	b.n	80013c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001384:	d01d      	beq.n	80013c2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <HAL_ADC_PollForConversion+0x6c>
 800138c:	f7ff fe8a 	bl	80010a4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d212      	bcs.n	80013c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d00b      	beq.n	80013c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f043 0204 	orr.w	r2, r3, #4
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e03d      	b.n	800143e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d1d6      	bne.n	800137e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f06f 0212 	mvn.w	r2, #18
 80013d8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d123      	bne.n	800143c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11f      	bne.n	800143c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001402:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1c>
 8001478:	2302      	movs	r3, #2
 800147a:	e105      	b.n	8001688 <HAL_ADC_ConfigChannel+0x228>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d925      	bls.n	80014d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	3b1e      	subs	r3, #30
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68d9      	ldr	r1, [r3, #12]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4403      	add	r3, r0
 80014ca:	3b1e      	subs	r3, #30
 80014cc:	409a      	lsls	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	e022      	b.n	800151e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6919      	ldr	r1, [r3, #16]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	2207      	movs	r2, #7
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	400a      	ands	r2, r1
 80014fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6919      	ldr	r1, [r3, #16]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d824      	bhi.n	8001570 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b05      	subs	r3, #5
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b05      	subs	r3, #5
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
 800156e:	e04c      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d824      	bhi.n	80015c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b23      	subs	r3, #35	@ 0x23
 800158a:	221f      	movs	r2, #31
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43da      	mvns	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b23      	subs	r3, #35	@ 0x23
 80015b4:	fa00 f203 	lsl.w	r2, r0, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c0:	e023      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b41      	subs	r3, #65	@ 0x41
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b41      	subs	r3, #65	@ 0x41
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_ADC_ConfigChannel+0x234>)
 800160c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a21      	ldr	r2, [pc, #132]	@ (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d109      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1cc>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b12      	cmp	r3, #18
 800161e:	d105      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	@ (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d123      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d003      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x1e6>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b11      	cmp	r3, #17
 8001644:	d11b      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b10      	cmp	r3, #16
 8001658:	d111      	bne.n	800167e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_ADC_ConfigChannel+0x23c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_ADC_ConfigChannel+0x240>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9a      	lsrs	r2, r3, #18
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40012300 	.word	0x40012300
 8001698:	40012000 	.word	0x40012000
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ac:	4b79      	ldr	r3, [pc, #484]	@ (8001894 <ADC_Init+0x1f0>)
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	021a      	lsls	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <ADC_Init+0x1f4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800174a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00f      	b.n	80017a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0202 	bic.w	r2, r2, #2
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7e1b      	ldrb	r3, [r3, #24]
 80017bc:	005a      	lsls	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	3b01      	subs	r3, #1
 80017fc:	035a      	lsls	r2, r3, #13
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	e007      	b.n	8001818 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	3b01      	subs	r3, #1
 8001834:	051a      	lsls	r2, r3, #20
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800184c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800185a:	025a      	lsls	r2, r3, #9
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	029a      	lsls	r2, r3, #10
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40012300 	.word	0x40012300
 8001898:	0f000001 	.word	0x0f000001

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	@ (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	@ (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a1c:	f7ff ff8e 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff29 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff3e 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff8e 	bl	8001990 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5d 	bl	800193c <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff31 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e16b      	b.n	8001db4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 815a 	bne.w	8001dae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80b4 	beq.w	8001dae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b60      	ldr	r3, [pc, #384]	@ (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b5d      	ldr	r3, [pc, #372]	@ (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd0 <HAL_GPIO_Init+0x310>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	@ (8001dd4 <HAL_GPIO_Init+0x314>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d02b      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	@ (8001dd8 <HAL_GPIO_Init+0x318>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	@ (8001ddc <HAL_GPIO_Init+0x31c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8001de0 <HAL_GPIO_Init+0x320>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x21a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8001de4 <HAL_GPIO_Init+0x324>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x216>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001de8 <HAL_GPIO_Init+0x328>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001dec <HAL_GPIO_Init+0x32c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001df0 <HAL_GPIO_Init+0x330>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x20a>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00e      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cca:	2308      	movs	r3, #8
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf8:	4935      	ldr	r1, [pc, #212]	@ (8001dd0 <HAL_GPIO_Init+0x310>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b3b      	ldr	r3, [pc, #236]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a32      	ldr	r2, [pc, #200]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da8:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_GPIO_Init+0x334>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	f67f ae90 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	40021c00 	.word	0x40021c00
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2c:	b08f      	sub	sp, #60	@ 0x3c
 8001e2e:	af0a      	add	r7, sp, #40	@ 0x28
 8001e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e054      	b.n	8001ee6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f006 fc1a 	bl	8008690 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fc58 	bl	8005730 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	687e      	ldr	r6, [r7, #4]
 8001e88:	466d      	mov	r5, sp
 8001e8a:	f106 0410 	add.w	r4, r6, #16
 8001e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e9e:	1d33      	adds	r3, r6, #4
 8001ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea2:	6838      	ldr	r0, [r7, #0]
 8001ea4:	f003 fbd2 	bl	800564c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fc4f 	bl	8005752 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	687e      	ldr	r6, [r7, #4]
 8001ebc:	466d      	mov	r5, sp
 8001ebe:	f106 0410 	add.w	r4, r6, #16
 8001ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ed2:	1d33      	adds	r3, r6, #4
 8001ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed6:	6838      	ldr	r0, [r7, #0]
 8001ed8:	f003 fdd8 	bl	8005a8c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b089      	sub	sp, #36	@ 0x24
 8001ef2:	af04      	add	r7, sp, #16
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	70fb      	strb	r3, [r7, #3]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70bb      	strb	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_HCD_HC_Init+0x28>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e076      	b.n	8002004 <HAL_HCD_HC_Init+0x116>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	212c      	movs	r1, #44	@ 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	333d      	adds	r3, #61	@ 0x3d
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	212c      	movs	r1, #44	@ 0x2c
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3338      	adds	r3, #56	@ 0x38
 8001f3e:	787a      	ldrb	r2, [r7, #1]
 8001f40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	212c      	movs	r1, #44	@ 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3340      	adds	r3, #64	@ 0x40
 8001f50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f52:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	212c      	movs	r1, #44	@ 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3339      	adds	r3, #57	@ 0x39
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	@ 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	333f      	adds	r3, #63	@ 0x3f
 8001f74:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001f78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	78ba      	ldrb	r2, [r7, #2]
 8001f7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f82:	b2d0      	uxtb	r0, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	212c      	movs	r1, #44	@ 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	333a      	adds	r3, #58	@ 0x3a
 8001f90:	4602      	mov	r2, r0
 8001f92:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da09      	bge.n	8001fb0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	212c      	movs	r1, #44	@ 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	333b      	adds	r3, #59	@ 0x3b
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e008      	b.n	8001fc2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	212c      	movs	r1, #44	@ 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	333b      	adds	r3, #59	@ 0x3b
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	212c      	movs	r1, #44	@ 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	333c      	adds	r3, #60	@ 0x3c
 8001fd0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fd4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	787c      	ldrb	r4, [r7, #1]
 8001fdc:	78ba      	ldrb	r2, [r7, #2]
 8001fde:	78f9      	ldrb	r1, [r7, #3]
 8001fe0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	f003 fed1 	bl	8005d98 <USB_HC_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_HCD_HC_Halt+0x1e>
 8002026:	2302      	movs	r3, #2
 8002028:	e00f      	b.n	800204a <HAL_HCD_HC_Halt+0x3e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f921 	bl	8006282 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4603      	mov	r3, r0
 8002064:	70fb      	strb	r3, [r7, #3]
 8002066:	460b      	mov	r3, r1
 8002068:	70bb      	strb	r3, [r7, #2]
 800206a:	4613      	mov	r3, r2
 800206c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	212c      	movs	r1, #44	@ 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	333b      	adds	r3, #59	@ 0x3b
 800207c:	78ba      	ldrb	r2, [r7, #2]
 800207e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	@ 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	333f      	adds	r3, #63	@ 0x3f
 800208e:	787a      	ldrb	r2, [r7, #1]
 8002090:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002092:	7c3b      	ldrb	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d112      	bne.n	80020be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	212c      	movs	r1, #44	@ 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3342      	adds	r3, #66	@ 0x42
 80020a6:	2203      	movs	r2, #3
 80020a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	212c      	movs	r1, #44	@ 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	333d      	adds	r3, #61	@ 0x3d
 80020b8:	7f3a      	ldrb	r2, [r7, #28]
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e008      	b.n	80020d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	212c      	movs	r1, #44	@ 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	3342      	adds	r3, #66	@ 0x42
 80020cc:	2202      	movs	r2, #2
 80020ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	f200 80c6 	bhi.w	8002264 <HAL_HCD_HC_SubmitRequest+0x210>
 80020d8:	a201      	add	r2, pc, #4	@ (adr r2, 80020e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	08002251 	.word	0x08002251
 80020e8:	08002155 	.word	0x08002155
 80020ec:	080021d3 	.word	0x080021d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020f0:	7c3b      	ldrb	r3, [r7, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 80b8 	bne.w	8002268 <HAL_HCD_HC_SubmitRequest+0x214>
 80020f8:	78bb      	ldrb	r3, [r7, #2]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80b4 	bne.w	8002268 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002100:	8b3b      	ldrh	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	212c      	movs	r1, #44	@ 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3355      	adds	r3, #85	@ 0x55
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	212c      	movs	r1, #44	@ 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3355      	adds	r3, #85	@ 0x55
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	212c      	movs	r1, #44	@ 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3342      	adds	r3, #66	@ 0x42
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800213e:	e093      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	212c      	movs	r1, #44	@ 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3342      	adds	r3, #66	@ 0x42
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
      break;
 8002152:	e089      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002154:	78bb      	ldrb	r3, [r7, #2]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11d      	bne.n	8002196 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	@ 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3355      	adds	r3, #85	@ 0x55
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	212c      	movs	r1, #44	@ 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3342      	adds	r3, #66	@ 0x42
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002180:	e073      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	212c      	movs	r1, #44	@ 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3342      	adds	r3, #66	@ 0x42
 8002190:	2202      	movs	r2, #2
 8002192:	701a      	strb	r2, [r3, #0]
      break;
 8002194:	e069      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	@ 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3354      	adds	r3, #84	@ 0x54
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	212c      	movs	r1, #44	@ 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3342      	adds	r3, #66	@ 0x42
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
      break;
 80021bc:	e055      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	212c      	movs	r1, #44	@ 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3342      	adds	r3, #66	@ 0x42
 80021cc:	2202      	movs	r2, #2
 80021ce:	701a      	strb	r2, [r3, #0]
      break;
 80021d0:	e04b      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021d2:	78bb      	ldrb	r3, [r7, #2]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d11d      	bne.n	8002214 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	212c      	movs	r1, #44	@ 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3355      	adds	r3, #85	@ 0x55
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	212c      	movs	r1, #44	@ 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3342      	adds	r3, #66	@ 0x42
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021fe:	e034      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	212c      	movs	r1, #44	@ 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3342      	adds	r3, #66	@ 0x42
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
      break;
 8002212:	e02a      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	212c      	movs	r1, #44	@ 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3354      	adds	r3, #84	@ 0x54
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	212c      	movs	r1, #44	@ 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3342      	adds	r3, #66	@ 0x42
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
      break;
 800223a:	e016      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	212c      	movs	r1, #44	@ 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3342      	adds	r3, #66	@ 0x42
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
      break;
 800224e:	e00c      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	@ 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3342      	adds	r3, #66	@ 0x42
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e002      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002264:	bf00      	nop
 8002266:	e000      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002268:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	212c      	movs	r1, #44	@ 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	3344      	adds	r3, #68	@ 0x44
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	8b3a      	ldrh	r2, [r7, #24]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	202c      	movs	r0, #44	@ 0x2c
 8002284:	fb00 f303 	mul.w	r3, r0, r3
 8002288:	440b      	add	r3, r1
 800228a:	334c      	adds	r3, #76	@ 0x4c
 800228c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	212c      	movs	r1, #44	@ 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3360      	adds	r3, #96	@ 0x60
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	212c      	movs	r1, #44	@ 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3350      	adds	r3, #80	@ 0x50
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	212c      	movs	r1, #44	@ 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3339      	adds	r3, #57	@ 0x39
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	212c      	movs	r1, #44	@ 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3361      	adds	r3, #97	@ 0x61
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	222c      	movs	r2, #44	@ 0x2c
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	3338      	adds	r3, #56	@ 0x38
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	18d1      	adds	r1, r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	f003 fe74 	bl	8005fdc <USB_HC_StartXfer>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop

08002300 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fb75 	bl	8005a06 <USB_GetMode>
 800231c:	4603      	mov	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	f040 80f6 	bne.w	8002510 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fb59 	bl	80059e0 <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80ec 	beq.w	800250e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f003 fb50 	bl	80059e0 <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800234a:	d104      	bne.n	8002356 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002354:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fb40 	bl	80059e0 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800236a:	d104      	bne.n	8002376 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002374:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fb30 	bl	80059e0 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002386:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800238a:	d104      	bne.n	8002396 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002394:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fb20 	bl	80059e0 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d103      	bne.n	80023b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2202      	movs	r2, #2
 80023b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fb12 	bl	80059e0 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023c6:	d11c      	bne.n	8002402 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80023d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023e2:	2110      	movs	r1, #16
 80023e4:	6938      	ldr	r0, [r7, #16]
 80023e6:	f003 fa01 	bl	80057ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023ea:	6938      	ldr	r0, [r7, #16]
 80023ec:	f003 fa32 	bl	8005854 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fc08 	bl	8005c0c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f006 f9c5 	bl	800878c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 faea 	bl	80059e0 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002416:	d102      	bne.n	800241e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f001 f89e 	bl	800355a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fadc 	bl	80059e0 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b08      	cmp	r3, #8
 8002430:	d106      	bne.n	8002440 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f006 f98e 	bl	8008754 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2208      	movs	r2, #8
 800243e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 facb 	bl	80059e0 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b10      	cmp	r3, #16
 8002452:	d101      	bne.n	8002458 <HAL_HCD_IRQHandler+0x158>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_HCD_IRQHandler+0x15a>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0210 	bic.w	r2, r2, #16
 800246c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 ffa1 	bl	80033b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0210 	orr.w	r2, r2, #16
 8002482:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 faa9 	bl	80059e0 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002498:	d13a      	bne.n	8002510 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fede 	bl	8006260 <USB_HC_ReadInterrupt>
 80024a4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e025      	b.n	80024f8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d018      	beq.n	80024f2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d6:	d106      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8ab 	bl	800263a <HCD_HC_IN_IRQHandler>
 80024e4:	e005      	b.n	80024f2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fbf9 	bl	8002ce4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3d4      	bcc.n	80024ac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	e000      	b.n	8002510 <HAL_HCD_IRQHandler+0x210>
      return;
 800250e:	bf00      	nop
    }
  }
}
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_HCD_Start+0x16>
 8002528:	2302      	movs	r3, #2
 800252a:	e013      	b.n	8002554 <HAL_HCD_Start+0x3e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fbca 	bl	8005cd4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 f8e2 	bl	800570e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_HCD_Stop+0x16>
 800256e:	2302      	movs	r3, #2
 8002570:	e00d      	b.n	800258e <HAL_HCD_Stop+0x32>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 ffb8 	bl	80064f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 fb6c 	bl	8005c80 <USB_ResetPort>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	@ 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3360      	adds	r3, #96	@ 0x60
 80025cc:	781b      	ldrb	r3, [r3, #0]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	@ 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3350      	adds	r3, #80	@ 0x50
 80025f4:	681b      	ldr	r3, [r3, #0]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fbb0 	bl	8005d74 <USB_GetCurrentFrame>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fb8b 	bl	8005d46 <USB_GetHostSpeed>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d11a      	bne.n	80026a0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002676:	461a      	mov	r2, r3
 8002678:	2304      	movs	r3, #4
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	@ 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3361      	adds	r3, #97	@ 0x61
 800268a:	2206      	movs	r2, #6
 800268c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f003 fdf2 	bl	8006282 <USB_HC_Halt>
 800269e:	e0af      	b.n	8002800 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b6:	d11b      	bne.n	80026f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	212c      	movs	r1, #44	@ 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3361      	adds	r3, #97	@ 0x61
 80026da:	2207      	movs	r2, #7
 80026dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fdca 	bl	8006282 <USB_HC_Halt>
 80026ee:	e087      	b.n	8002800 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b20      	cmp	r3, #32
 8002704:	d109      	bne.n	800271a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	2320      	movs	r3, #32
 8002716:	6093      	str	r3, [r2, #8]
 8002718:	e072      	b.n	8002800 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b08      	cmp	r3, #8
 800272e:	d11a      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273c:	461a      	mov	r2, r3
 800273e:	2308      	movs	r3, #8
 8002740:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	@ 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3361      	adds	r3, #97	@ 0x61
 8002750:	2205      	movs	r2, #5
 8002752:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fd8f 	bl	8006282 <USB_HC_Halt>
 8002764:	e04c      	b.n	8002800 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277c:	d11b      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002790:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	212c      	movs	r1, #44	@ 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3361      	adds	r3, #97	@ 0x61
 80027a0:	2208      	movs	r2, #8
 80027a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fd67 	bl	8006282 <USB_HC_Halt>
 80027b4:	e024      	b.n	8002800 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c8:	2b80      	cmp	r3, #128	@ 0x80
 80027ca:	d119      	bne.n	8002800 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d8:	461a      	mov	r2, r3
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	@ 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3361      	adds	r3, #97	@ 0x61
 80027ec:	2206      	movs	r2, #6
 80027ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fd41 	bl	8006282 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002816:	d112      	bne.n	800283e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fd2d 	bl	8006282 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002834:	461a      	mov	r2, r3
 8002836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800283a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800283c:	e24e      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 80df 	bne.w	8002a14 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d019      	beq.n	8002892 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	212c      	movs	r1, #44	@ 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3348      	adds	r3, #72	@ 0x48
 800286c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0159      	lsls	r1, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	440b      	add	r3, r1
 8002876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002880:	1ad2      	subs	r2, r2, r3
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	202c      	movs	r0, #44	@ 0x2c
 8002888:	fb00 f303 	mul.w	r3, r0, r3
 800288c:	440b      	add	r3, r1
 800288e:	3350      	adds	r3, #80	@ 0x50
 8002890:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	@ 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3361      	adds	r3, #97	@ 0x61
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	@ 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	335c      	adds	r3, #92	@ 0x5c
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	212c      	movs	r1, #44	@ 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	333f      	adds	r3, #63	@ 0x3f
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	212c      	movs	r1, #44	@ 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	333f      	adds	r3, #63	@ 0x3f
 80028ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d111      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fcc1 	bl	8006282 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	2310      	movs	r3, #16
 8002910:	6093      	str	r3, [r2, #8]
 8002912:	e03a      	b.n	800298a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	212c      	movs	r1, #44	@ 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	333f      	adds	r3, #63	@ 0x3f
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d009      	beq.n	800293c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	@ 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	333f      	adds	r3, #63	@ 0x3f
 8002936:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002938:	2b01      	cmp	r3, #1
 800293a:	d126      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	0151      	lsls	r1, r2, #5
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	440a      	add	r2, r1
 8002952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002956:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800295a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	@ 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3360      	adds	r3, #96	@ 0x60
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	b2d9      	uxtb	r1, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	202c      	movs	r0, #44	@ 0x2c
 8002978:	fb00 f303 	mul.w	r3, r0, r3
 800297c:	4413      	add	r3, r2
 800297e:	3360      	adds	r3, #96	@ 0x60
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f005 ff0f 	bl	80087a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d12b      	bne.n	80029ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	212c      	movs	r1, #44	@ 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3348      	adds	r3, #72	@ 0x48
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	202c      	movs	r0, #44	@ 0x2c
 80029a8:	fb00 f202 	mul.w	r2, r0, r2
 80029ac:	440a      	add	r2, r1
 80029ae:	3240      	adds	r2, #64	@ 0x40
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 818e 	beq.w	8002cdc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	212c      	movs	r1, #44	@ 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3354      	adds	r3, #84	@ 0x54
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2d8      	uxtb	r0, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	212c      	movs	r1, #44	@ 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3354      	adds	r3, #84	@ 0x54
 80029e4:	4602      	mov	r2, r0
 80029e6:	701a      	strb	r2, [r3, #0]
}
 80029e8:	e178      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	@ 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3354      	adds	r3, #84	@ 0x54
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2d8      	uxtb	r0, r3
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	212c      	movs	r1, #44	@ 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3354      	adds	r3, #84	@ 0x54
 8002a0e:	4602      	mov	r2, r0
 8002a10:	701a      	strb	r2, [r3, #0]
}
 8002a12:	e163      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	f040 80f6 	bne.w	8002c18 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	@ 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	@ 0x61
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d109      	bne.n	8002a54 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	212c      	movs	r1, #44	@ 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3360      	adds	r3, #96	@ 0x60
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e0c9      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	@ 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	@ 0x61
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d109      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	@ 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3360      	adds	r3, #96	@ 0x60
 8002a76:	2205      	movs	r2, #5
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e0b5      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	@ 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3361      	adds	r3, #97	@ 0x61
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d009      	beq.n	8002aa4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	212c      	movs	r1, #44	@ 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	@ 0x61
 8002a9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d150      	bne.n	8002b46 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	@ 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	335c      	adds	r3, #92	@ 0x5c
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	202c      	movs	r0, #44	@ 0x2c
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	335c      	adds	r3, #92	@ 0x5c
 8002ac4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	212c      	movs	r1, #44	@ 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	335c      	adds	r3, #92	@ 0x5c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d912      	bls.n	8002b00 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	212c      	movs	r1, #44	@ 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	335c      	adds	r3, #92	@ 0x5c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	@ 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	@ 0x60
 8002afa:	2204      	movs	r2, #4
 8002afc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002afe:	e073      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	212c      	movs	r1, #44	@ 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3360      	adds	r3, #96	@ 0x60
 8002b0e:	2202      	movs	r2, #2
 8002b10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b28:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b30:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b44:	e050      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	212c      	movs	r1, #44	@ 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	@ 0x61
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d122      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	212c      	movs	r1, #44	@ 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3360      	adds	r3, #96	@ 0x60
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e023      	b.n	8002be8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	212c      	movs	r1, #44	@ 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3361      	adds	r3, #97	@ 0x61
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d119      	bne.n	8002be8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212c      	movs	r1, #44	@ 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	335c      	adds	r3, #92	@ 0x5c
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	202c      	movs	r0, #44	@ 0x2c
 8002bcc:	fb00 f303 	mul.w	r3, r0, r3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	335c      	adds	r3, #92	@ 0x5c
 8002bd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	@ 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3360      	adds	r3, #96	@ 0x60
 8002be4:	2204      	movs	r2, #4
 8002be6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	b2d9      	uxtb	r1, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	202c      	movs	r0, #44	@ 0x2c
 8002c04:	fb00 f303 	mul.w	r3, r0, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3360      	adds	r3, #96	@ 0x60
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f005 fdc9 	bl	80087a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c16:	e061      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d156      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	@ 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	333f      	adds	r3, #63	@ 0x3f
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d111      	bne.n	8002c66 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	@ 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	335c      	adds	r3, #92	@ 0x5c
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fb0f 	bl	8006282 <USB_HC_Halt>
 8002c64:	e031      	b.n	8002cca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	212c      	movs	r1, #44	@ 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	333f      	adds	r3, #63	@ 0x3f
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	212c      	movs	r1, #44	@ 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	333f      	adds	r3, #63	@ 0x3f
 8002c88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d11d      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	212c      	movs	r1, #44	@ 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	335c      	adds	r3, #92	@ 0x5c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d110      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	@ 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	@ 0x61
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fadc 	bl	8006282 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2310      	movs	r3, #16
 8002cda:	6093      	str	r3, [r2, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11a      	bne.n	8002d4a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d20:	461a      	mov	r2, r3
 8002d22:	2304      	movs	r3, #4
 8002d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	@ 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3361      	adds	r3, #97	@ 0x61
 8002d34:	2206      	movs	r2, #6
 8002d36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 fa9d 	bl	8006282 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d48:	e331      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d12e      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2320      	movs	r3, #32
 8002d70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	@ 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	333d      	adds	r3, #61	@ 0x3d
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	f040 8313 	bne.w	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	@ 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	333d      	adds	r3, #61	@ 0x3d
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	212c      	movs	r1, #44	@ 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3360      	adds	r3, #96	@ 0x60
 8002da8:	2202      	movs	r2, #2
 8002daa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fa63 	bl	8006282 <USB_HC_Halt>
}
 8002dbc:	e2f7      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd4:	d112      	bne.n	8002dfc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002de8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fa44 	bl	8006282 <USB_HC_Halt>
}
 8002dfa:	e2d8      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d140      	bne.n	8002e94 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	212c      	movs	r1, #44	@ 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	335c      	adds	r3, #92	@ 0x5c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d111      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	@ 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333d      	adds	r3, #61	@ 0x3d
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2340      	movs	r3, #64	@ 0x40
 8002e5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	212c      	movs	r1, #44	@ 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3361      	adds	r3, #97	@ 0x61
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f9f8 	bl	8006282 <USB_HC_Halt>
}
 8002e92:	e28c      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	d12c      	bne.n	8002f04 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	@ 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	@ 0x61
 8002eb8:	2204      	movs	r2, #4
 8002eba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	212c      	movs	r1, #44	@ 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	333d      	adds	r3, #61	@ 0x3d
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	@ 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	@ 0x5c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 f9c9 	bl	8006282 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2340      	movs	r3, #64	@ 0x40
 8002f00:	6093      	str	r3, [r2, #8]
}
 8002f02:	e254      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11a      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	2308      	movs	r3, #8
 8002f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	212c      	movs	r1, #44	@ 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	@ 0x61
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 f99a 	bl	8006282 <USB_HC_Halt>
}
 8002f4e:	e22e      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d140      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	@ 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	335c      	adds	r3, #92	@ 0x5c
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	@ 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3361      	adds	r3, #97	@ 0x61
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	@ 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	333d      	adds	r3, #61	@ 0x3d
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d112      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	@ 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	333c      	adds	r3, #60	@ 0x3c
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	212c      	movs	r1, #44	@ 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	333d      	adds	r3, #61	@ 0x3d
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 f957 	bl	8006282 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	6093      	str	r3, [r2, #8]
}
 8002fe6:	e1e2      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b80      	cmp	r3, #128	@ 0x80
 8002ffc:	d164      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d111      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	212c      	movs	r1, #44	@ 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3361      	adds	r3, #97	@ 0x61
 8003014:	2206      	movs	r2, #6
 8003016:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f003 f92d 	bl	8006282 <USB_HC_Halt>
 8003028:	e044      	b.n	80030b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	212c      	movs	r1, #44	@ 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	335c      	adds	r3, #92	@ 0x5c
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	202c      	movs	r0, #44	@ 0x2c
 8003042:	fb00 f303 	mul.w	r3, r0, r3
 8003046:	440b      	add	r3, r1
 8003048:	335c      	adds	r3, #92	@ 0x5c
 800304a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	212c      	movs	r1, #44	@ 0x2c
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	335c      	adds	r3, #92	@ 0x5c
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d920      	bls.n	80030a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	212c      	movs	r1, #44	@ 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	335c      	adds	r3, #92	@ 0x5c
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	@ 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	@ 0x60
 8003080:	2204      	movs	r2, #4
 8003082:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	b2d9      	uxtb	r1, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	202c      	movs	r0, #44	@ 0x2c
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	4413      	add	r3, r2
 8003094:	3360      	adds	r3, #96	@ 0x60
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f005 fb84 	bl	80087a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030a0:	e008      	b.n	80030b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	@ 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3360      	adds	r3, #96	@ 0x60
 80030b0:	2202      	movs	r2, #2
 80030b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	6093      	str	r3, [r2, #8]
}
 80030c6:	e172      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030de:	d11b      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	@ 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	@ 0x61
 80030ee:	2208      	movs	r2, #8
 80030f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 f8c0 	bl	8006282 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003114:	6093      	str	r3, [r2, #8]
}
 8003116:	e14a      	b.n	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	f040 813f 	bne.w	80033ae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	212c      	movs	r1, #44	@ 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3361      	adds	r3, #97	@ 0x61
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d17d      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	212c      	movs	r1, #44	@ 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3360      	adds	r3, #96	@ 0x60
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	@ 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	333f      	adds	r3, #63	@ 0x3f
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d00a      	beq.n	8003180 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	@ 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	333f      	adds	r3, #63	@ 0x3f
 8003178:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	f040 8100 	bne.w	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d113      	bne.n	80031b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	212c      	movs	r1, #44	@ 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3355      	adds	r3, #85	@ 0x55
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2d8      	uxtb	r0, r3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	@ 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3355      	adds	r3, #85	@ 0x55
 80031ac:	4602      	mov	r2, r0
 80031ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f040 80e3 	bne.w	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	@ 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	334c      	adds	r3, #76	@ 0x4c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80d8 	beq.w	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	@ 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	334c      	adds	r3, #76	@ 0x4c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	202c      	movs	r0, #44	@ 0x2c
 80031e6:	fb00 f202 	mul.w	r2, r0, r2
 80031ea:	440a      	add	r2, r1
 80031ec:	3240      	adds	r2, #64	@ 0x40
 80031ee:	8812      	ldrh	r2, [r2, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	202c      	movs	r0, #44	@ 0x2c
 80031fa:	fb00 f202 	mul.w	r2, r0, r2
 80031fe:	440a      	add	r2, r1
 8003200:	3240      	adds	r2, #64	@ 0x40
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	fbb3 f3f2 	udiv	r3, r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80b5 	beq.w	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	@ 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3355      	adds	r3, #85	@ 0x55
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	@ 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3355      	adds	r3, #85	@ 0x55
 800323a:	4602      	mov	r2, r0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e09f      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	212c      	movs	r1, #44	@ 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3361      	adds	r3, #97	@ 0x61
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d109      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	212c      	movs	r1, #44	@ 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3360      	adds	r3, #96	@ 0x60
 8003262:	2202      	movs	r2, #2
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e08b      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	@ 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3361      	adds	r3, #97	@ 0x61
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d109      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	@ 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3360      	adds	r3, #96	@ 0x60
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e077      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	@ 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	@ 0x61
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d109      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	@ 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3360      	adds	r3, #96	@ 0x60
 80032b2:	2205      	movs	r2, #5
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e063      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	212c      	movs	r1, #44	@ 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3361      	adds	r3, #97	@ 0x61
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d009      	beq.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	@ 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3361      	adds	r3, #97	@ 0x61
 80032da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d14f      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	212c      	movs	r1, #44	@ 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	335c      	adds	r3, #92	@ 0x5c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	202c      	movs	r0, #44	@ 0x2c
 80032f8:	fb00 f303 	mul.w	r3, r0, r3
 80032fc:	440b      	add	r3, r1
 80032fe:	335c      	adds	r3, #92	@ 0x5c
 8003300:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	212c      	movs	r1, #44	@ 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	335c      	adds	r3, #92	@ 0x5c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d912      	bls.n	800333c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	212c      	movs	r1, #44	@ 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	335c      	adds	r3, #92	@ 0x5c
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	@ 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3360      	adds	r3, #96	@ 0x60
 8003336:	2204      	movs	r2, #4
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e021      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	@ 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3360      	adds	r3, #96	@ 0x60
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003364:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800336c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337a:	461a      	mov	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338c:	461a      	mov	r2, r3
 800338e:	2302      	movs	r3, #2
 8003390:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	b2d9      	uxtb	r1, r3
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	202c      	movs	r0, #44	@ 0x2c
 800339c:	fb00 f303 	mul.w	r3, r0, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3360      	adds	r3, #96	@ 0x60
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f005 f9fd 	bl	80087a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033ae:	bf00      	nop
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b08a      	sub	sp, #40	@ 0x28
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	0c5b      	lsrs	r3, r3, #17
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d004      	beq.n	80033fc <HCD_RXQLVL_IRQHandler+0x46>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	f000 80a9 	beq.w	800354c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033fa:	e0aa      	b.n	8003552 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a6 	beq.w	8003550 <HCD_RXQLVL_IRQHandler+0x19a>
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	212c      	movs	r1, #44	@ 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3344      	adds	r3, #68	@ 0x44
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 809b 	beq.w	8003550 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	212c      	movs	r1, #44	@ 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3350      	adds	r3, #80	@ 0x50
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	441a      	add	r2, r3
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	202c      	movs	r0, #44	@ 0x2c
 8003434:	fb00 f303 	mul.w	r3, r0, r3
 8003438:	440b      	add	r3, r1
 800343a:	334c      	adds	r3, #76	@ 0x4c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d87a      	bhi.n	8003538 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	212c      	movs	r1, #44	@ 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3344      	adds	r3, #68	@ 0x44
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	b292      	uxth	r2, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f002 fa68 	bl	8005930 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	212c      	movs	r1, #44	@ 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3344      	adds	r3, #68	@ 0x44
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	441a      	add	r2, r3
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	202c      	movs	r0, #44	@ 0x2c
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	440b      	add	r3, r1
 8003480:	3344      	adds	r3, #68	@ 0x44
 8003482:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	212c      	movs	r1, #44	@ 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3350      	adds	r3, #80	@ 0x50
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	441a      	add	r2, r3
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	202c      	movs	r0, #44	@ 0x2c
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	440b      	add	r3, r1
 80034a4:	3350      	adds	r3, #80	@ 0x50
 80034a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	0cdb      	lsrs	r3, r3, #19
 80034b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	212c      	movs	r1, #44	@ 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3340      	adds	r3, #64	@ 0x40
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d13c      	bne.n	8003550 <HCD_RXQLVL_IRQHandler+0x19a>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d039      	beq.n	8003550 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	212c      	movs	r1, #44	@ 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3354      	adds	r3, #84	@ 0x54
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	f083 0301 	eor.w	r3, r3, #1
 8003522:	b2d8      	uxtb	r0, r3
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	212c      	movs	r1, #44	@ 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3354      	adds	r3, #84	@ 0x54
 8003532:	4602      	mov	r2, r0
 8003534:	701a      	strb	r2, [r3, #0]
      break;
 8003536:	e00b      	b.n	8003550 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	212c      	movs	r1, #44	@ 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3360      	adds	r3, #96	@ 0x60
 8003546:	2204      	movs	r2, #4
 8003548:	701a      	strb	r2, [r3, #0]
      break;
 800354a:	e001      	b.n	8003550 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003550:	bf00      	nop
  }
}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003586:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d10b      	bne.n	80035aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d102      	bne.n	80035a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f005 f8e7 	bl	8008770 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d132      	bne.n	800361a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d126      	bne.n	8003614 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d113      	bne.n	80035f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035d8:	d106      	bne.n	80035e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fb13 	bl	8005c0c <USB_InitFSLSPClkSel>
 80035e6:	e011      	b.n	800360c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fb0c 	bl	8005c0c <USB_InitFSLSPClkSel>
 80035f4:	e00a      	b.n	800360c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d106      	bne.n	800360c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003604:	461a      	mov	r2, r3
 8003606:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800360a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f005 f8d9 	bl	80087c4 <HAL_HCD_PortEnabled_Callback>
 8003612:	e002      	b.n	800361a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f005 f8e3 	bl	80087e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d103      	bne.n	800362c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f043 0320 	orr.w	r3, r3, #32
 800362a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003632:	461a      	mov	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e12b      	b.n	80038aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fab2 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a4:	f001 fa20 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 80036a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a81      	ldr	r2, [pc, #516]	@ (80038b4 <HAL_I2C_Init+0x274>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d807      	bhi.n	80036c4 <HAL_I2C_Init+0x84>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a80      	ldr	r2, [pc, #512]	@ (80038b8 <HAL_I2C_Init+0x278>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e006      	b.n	80036d2 <HAL_I2C_Init+0x92>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a7d      	ldr	r2, [pc, #500]	@ (80038bc <HAL_I2C_Init+0x27c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	bf94      	ite	ls
 80036cc:	2301      	movls	r3, #1
 80036ce:	2300      	movhi	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0e7      	b.n	80038aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a78      	ldr	r2, [pc, #480]	@ (80038c0 <HAL_I2C_Init+0x280>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0c9b      	lsrs	r3, r3, #18
 80036e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a6a      	ldr	r2, [pc, #424]	@ (80038b4 <HAL_I2C_Init+0x274>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d802      	bhi.n	8003714 <HAL_I2C_Init+0xd4>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	e009      	b.n	8003728 <HAL_I2C_Init+0xe8>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a69      	ldr	r2, [pc, #420]	@ (80038c4 <HAL_I2C_Init+0x284>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	3301      	adds	r3, #1
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	430b      	orrs	r3, r1
 800372e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800373a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	495c      	ldr	r1, [pc, #368]	@ (80038b4 <HAL_I2C_Init+0x274>)
 8003744:	428b      	cmp	r3, r1
 8003746:	d819      	bhi.n	800377c <HAL_I2C_Init+0x13c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e59      	subs	r1, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fbb1 f3f3 	udiv	r3, r1, r3
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800375c:	400b      	ands	r3, r1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_I2C_Init+0x138>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1e59      	subs	r1, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	e051      	b.n	800381c <HAL_I2C_Init+0x1dc>
 8003778:	2304      	movs	r3, #4
 800377a:	e04f      	b.n	800381c <HAL_I2C_Init+0x1dc>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d111      	bne.n	80037a8 <HAL_I2C_Init+0x168>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e012      	b.n	80037ce <HAL_I2C_Init+0x18e>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e58      	subs	r0, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	0099      	lsls	r1, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Init+0x196>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_I2C_Init+0x1dc>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10e      	bne.n	80037fc <HAL_I2C_Init+0x1bc>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e58      	subs	r0, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	440b      	add	r3, r1
 80037ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fa:	e00f      	b.n	800381c <HAL_I2C_Init+0x1dc>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	6809      	ldr	r1, [r1, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800384a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6911      	ldr	r1, [r2, #16]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68d2      	ldr	r2, [r2, #12]
 8003856:	4311      	orrs	r1, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	430b      	orrs	r3, r1
 800385e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	000186a0 	.word	0x000186a0
 80038b8:	001e847f 	.word	0x001e847f
 80038bc:	003d08ff 	.word	0x003d08ff
 80038c0:	431bde83 	.word	0x431bde83
 80038c4:	10624dd3 	.word	0x10624dd3

080038c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e128      	b.n	8003b2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a90      	ldr	r2, [pc, #576]	@ (8003b34 <HAL_I2S_Init+0x26c>)
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd f9b3 	bl	8000c60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2202      	movs	r2, #2
 800391c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d060      	beq.n	80039e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800392e:	2310      	movs	r3, #16
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e001      	b.n	8003938 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b20      	cmp	r3, #32
 800393e:	d802      	bhi.n	8003946 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003946:	2001      	movs	r0, #1
 8003948:	f001 f9d8 	bl	8004cfc <HAL_RCCEx_GetPeriphCLKFreq>
 800394c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	d125      	bne.n	80039a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	fbb2 f2f3 	udiv	r2, r2, r3
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	3305      	adds	r3, #5
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e01f      	b.n	80039c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	fbb2 f2f3 	udiv	r2, r2, r3
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	461a      	mov	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	3305      	adds	r3, #5
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e00e      	b.n	80039c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	3305      	adds	r3, #5
 80039c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003b38 <HAL_I2S_Init+0x270>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e003      	b.n	80039f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039e8:	2302      	movs	r3, #2
 80039ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d902      	bls.n	80039fc <HAL_I2S_Init+0x134>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2bff      	cmp	r3, #255	@ 0xff
 80039fa:	d907      	bls.n	8003a0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	f043 0210 	orr.w	r2, r3, #16
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e08f      	b.n	8003b2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	ea42 0103 	orr.w	r1, r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a2a:	f023 030f 	bic.w	r3, r3, #15
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6851      	ldr	r1, [r2, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68d2      	ldr	r2, [r2, #12]
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6992      	ldr	r2, [r2, #24]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d161      	bne.n	8003b1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a38      	ldr	r2, [pc, #224]	@ (8003b3c <HAL_I2S_Init+0x274>)
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a37      	ldr	r2, [pc, #220]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_I2S_Init+0x1a4>
 8003a68:	4b36      	ldr	r3, [pc, #216]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003a6a:	e001      	b.n	8003a70 <HAL_I2S_Init+0x1a8>
 8003a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	4932      	ldr	r1, [pc, #200]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2S_Init+0x1b8>
 8003a7c:	4a31      	ldr	r2, [pc, #196]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x1bc>
 8003a80:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a84:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a88:	f023 030f 	bic.w	r3, r3, #15
 8003a8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_I2S_Init+0x1d4>
 8003a98:	4b2a      	ldr	r3, [pc, #168]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003a9a:	e001      	b.n	8003aa0 <HAL_I2S_Init+0x1d8>
 8003a9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2S_Init+0x1ea>
 8003aae:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003ab0:	e001      	b.n	8003ab6 <HAL_I2S_Init+0x1ee>
 8003ab2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac2:	d003      	beq.n	8003acc <HAL_I2S_Init+0x204>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e001      	b.n	8003ad8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aec:	4313      	orrs	r3, r2
 8003aee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_I2S_Init+0x278>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2S_Init+0x24c>
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_I2S_Init+0x27c>)
 8003b12:	e001      	b.n	8003b18 <HAL_I2S_Init+0x250>
 8003b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b18:	897a      	ldrh	r2, [r7, #10]
 8003b1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	08003c3f 	.word	0x08003c3f
 8003b38:	cccccccd 	.word	0xcccccccd
 8003b3c:	08003d55 	.word	0x08003d55
 8003b40:	40003800 	.word	0x40003800
 8003b44:	40003400 	.word	0x40003400

08003b48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ffb8 	bl	8003b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10e      	bne.n	8003c36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff93 	bl	8003b5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d13a      	bne.n	8003cd0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d109      	bne.n	8003c78 <I2S_IRQHandler+0x3a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d102      	bne.n	8003c78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffb4 	bl	8003be0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d126      	bne.n	8003cd0 <I2S_IRQHandler+0x92>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d11f      	bne.n	8003cd0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ff50 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d136      	bne.n	8003d4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d109      	bne.n	8003cfa <I2S_IRQHandler+0xbc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	2b80      	cmp	r3, #128	@ 0x80
 8003cf2:	d102      	bne.n	8003cfa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff45 	bl	8003b84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d122      	bne.n	8003d4a <I2S_IRQHandler+0x10c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d11b      	bne.n	8003d4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff13 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a92      	ldr	r2, [pc, #584]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d6e:	4b92      	ldr	r3, [pc, #584]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d70:	e001      	b.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a8b      	ldr	r2, [pc, #556]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d8e:	e001      	b.n	8003d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da0:	d004      	beq.n	8003dac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 8099 	bne.w	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f925 	bl	8004010 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d107      	bne.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9c8 	bl	8004170 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d13a      	bne.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d035      	beq.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e00:	e001      	b.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4969      	ldr	r1, [pc, #420]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0e:	428b      	cmp	r3, r1
 8003e10:	d101      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e12:	4b69      	ldr	r3, [pc, #420]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e14:	e001      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fe88 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	f040 80c3 	bne.w	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80bd 	beq.w	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a49      	ldr	r2, [pc, #292]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e92:	4b49      	ldr	r3, [pc, #292]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e94:	e001      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4944      	ldr	r1, [pc, #272]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ea6:	4b44      	ldr	r3, [pc, #272]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea8:	e001      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fe4a 	bl	8003b70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003edc:	e089      	b.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d107      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8be 	bl	8004074 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f8fd 	bl	800410c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d12f      	bne.n	8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02a      	beq.n	8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f42:	e001      	b.n	8003f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4919      	ldr	r1, [pc, #100]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f50:	428b      	cmp	r3, r1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f54:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f56:	e001      	b.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0202 	orr.w	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fdfa 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d136      	bne.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d031      	beq.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a07      	ldr	r2, [pc, #28]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9c:	e001      	b.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4902      	ldr	r1, [pc, #8]	@ (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003faa:	428b      	cmp	r3, r1
 8003fac:	d106      	bne.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fae:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb0:	e006      	b.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fb2:	bf00      	nop
 8003fb4:	40003800 	.word	0x40003800
 8003fb8:	40003400 	.word	0x40003400
 8003fbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fdc0 	bl	8003b70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff0:	e000      	b.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff2:	bf00      	nop
}
 8003ff4:	bf00      	nop
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	1c99      	adds	r1, r3, #2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6251      	str	r1, [r2, #36]	@ 0x24
 8004022:	881a      	ldrh	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d113      	bne.n	800406a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004050:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffc9 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c99      	adds	r1, r3, #2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6251      	str	r1, [r2, #36]	@ 0x24
 8004086:	8819      	ldrh	r1, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1d      	ldr	r2, [pc, #116]	@ (8004104 <I2SEx_TxISR_I2SExt+0x90>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <I2SEx_TxISR_I2SExt+0x22>
 8004092:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <I2SEx_TxISR_I2SExt+0x94>)
 8004094:	e001      	b.n	800409a <I2SEx_TxISR_I2SExt+0x26>
 8004096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409a:	460a      	mov	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d121      	bne.n	80040fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <I2SEx_TxISR_I2SExt+0x90>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <I2SEx_TxISR_I2SExt+0x50>
 80040c0:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <I2SEx_TxISR_I2SExt+0x94>)
 80040c2:	e001      	b.n	80040c8 <I2SEx_TxISR_I2SExt+0x54>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	490d      	ldr	r1, [pc, #52]	@ (8004104 <I2SEx_TxISR_I2SExt+0x90>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d101      	bne.n	80040d8 <I2SEx_TxISR_I2SExt+0x64>
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <I2SEx_TxISR_I2SExt+0x94>)
 80040d6:	e001      	b.n	80040dc <I2SEx_TxISR_I2SExt+0x68>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff81 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40003800 	.word	0x40003800
 8004108:	40003400 	.word	0x40003400

0800410c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68d8      	ldr	r0, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	1c99      	adds	r1, r3, #2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004124:	b282      	uxth	r2, r0
 8004126:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d113      	bne.n	8004168 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800414e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff4a 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <I2SEx_RxISR_I2SExt+0x90>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <I2SEx_RxISR_I2SExt+0x16>
 8004182:	4b20      	ldr	r3, [pc, #128]	@ (8004204 <I2SEx_RxISR_I2SExt+0x94>)
 8004184:	e001      	b.n	800418a <I2SEx_RxISR_I2SExt+0x1a>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418a:	68d8      	ldr	r0, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	1c99      	adds	r1, r3, #2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004196:	b282      	uxth	r2, r0
 8004198:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d121      	bne.n	80041f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <I2SEx_RxISR_I2SExt+0x90>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <I2SEx_RxISR_I2SExt+0x50>
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <I2SEx_RxISR_I2SExt+0x94>)
 80041be:	e001      	b.n	80041c4 <I2SEx_RxISR_I2SExt+0x54>
 80041c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	490d      	ldr	r1, [pc, #52]	@ (8004200 <I2SEx_RxISR_I2SExt+0x90>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d101      	bne.n	80041d4 <I2SEx_RxISR_I2SExt+0x64>
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <I2SEx_RxISR_I2SExt+0x94>)
 80041d2:	e001      	b.n	80041d8 <I2SEx_RxISR_I2SExt+0x68>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff03 	bl	8003ffc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40003800 	.word	0x40003800
 8004204:	40003400 	.word	0x40003400

08004208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e267      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d075      	beq.n	8004312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00c      	beq.n	800424c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423a:	2b08      	cmp	r3, #8
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423e:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424a:	d10b      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	4b7e      	ldr	r3, [pc, #504]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d05b      	beq.n	8004310 <HAL_RCC_OscConfig+0x108>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d157      	bne.n	8004310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e242      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x74>
 800426e:	4b76      	ldr	r3, [pc, #472]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a75      	ldr	r2, [pc, #468]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x98>
 8004286:	4b70      	ldr	r3, [pc, #448]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6f      	ldr	r2, [pc, #444]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6d      	ldr	r3, [pc, #436]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6c      	ldr	r2, [pc, #432]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xb0>
 80042a0:	4b69      	ldr	r3, [pc, #420]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b66      	ldr	r3, [pc, #408]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a65      	ldr	r2, [pc, #404]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fc fef0 	bl	80010a4 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fc feec 	bl	80010a4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e207      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xc0>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fc fedc 	bl	80010a4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fc fed8 	bl	80010a4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1f3      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b51      	ldr	r3, [pc, #324]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0xe8>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431e:	4b4a      	ldr	r3, [pc, #296]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b44      	ldr	r3, [pc, #272]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c7      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4937      	ldr	r1, [pc, #220]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fc fe91 	bl	80010a4 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004386:	f7fc fe8d 	bl	80010a4 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a8      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2b      	ldr	r3, [pc, #172]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b28      	ldr	r3, [pc, #160]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4925      	ldr	r1, [pc, #148]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCC_OscConfig+0x244>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fc fe70 	bl	80010a4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fc fe6c 	bl	80010a4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e187      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d036      	beq.n	8004460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fc fe50 	bl	80010a4 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004408:	f7fc fe4c 	bl	80010a4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e167      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <HAL_RCC_OscConfig+0x240>)
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x200>
 8004426:	e01b      	b.n	8004460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <HAL_RCC_OscConfig+0x248>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fc fe39 	bl	80010a4 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	e00e      	b.n	8004454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004436:	f7fc fe35 	bl	80010a4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d907      	bls.n	8004454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e150      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	4b88      	ldr	r3, [pc, #544]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ea      	bne.n	8004436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8097 	beq.w	800459c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b81      	ldr	r3, [pc, #516]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b7d      	ldr	r3, [pc, #500]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a7c      	ldr	r2, [pc, #496]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b7a      	ldr	r3, [pc, #488]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b77      	ldr	r3, [pc, #476]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fc fdf5 	bl	80010a4 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fc fdf1 	bl	80010a4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e10c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b6a      	ldr	r3, [pc, #424]	@ (800467c <HAL_RCC_OscConfig+0x474>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
 80044e4:	4b64      	ldr	r3, [pc, #400]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a63      	ldr	r2, [pc, #396]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x30c>
 80044fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a5b      	ldr	r2, [pc, #364]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x324>
 8004514:	4b58      	ldr	r3, [pc, #352]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a57      	ldr	r2, [pc, #348]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004520:	4b55      	ldr	r3, [pc, #340]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a54      	ldr	r2, [pc, #336]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 0304 	bic.w	r3, r3, #4
 800452a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fc fdb6 	bl	80010a4 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fc fdb2 	bl	80010a4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0cb      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	4b49      	ldr	r3, [pc, #292]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ee      	beq.n	800453c <HAL_RCC_OscConfig+0x334>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fc fda0 	bl	80010a4 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fc fd9c 	bl	80010a4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0b5      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457e:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ee      	bne.n	8004568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	4a38      	ldr	r2, [pc, #224]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a1 	beq.w	80046e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d05c      	beq.n	800466c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d141      	bne.n	800463e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fc fd70 	bl	80010a4 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fc fd6c 	bl	80010a4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e087      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	019b      	lsls	r3, r3, #6
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	491b      	ldr	r1, [pc, #108]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fc fd45 	bl	80010a4 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461e:	f7fc fd41 	bl	80010a4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e05c      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	4b11      	ldr	r3, [pc, #68]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x416>
 800463c:	e054      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fc fd2e 	bl	80010a4 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fc fd2a 	bl	80010a4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e045      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x444>
 800466a:	e03d      	b.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e038      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
 8004680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x4ec>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d121      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	4293      	cmp	r3, r2
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	3b01      	subs	r3, #1
 80046ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0cc      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b68      	ldr	r3, [pc, #416]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d90c      	bls.n	8004734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b65      	ldr	r3, [pc, #404]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0b8      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474c:	4b59      	ldr	r3, [pc, #356]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a58      	ldr	r2, [pc, #352]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a52      	ldr	r2, [pc, #328]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800476e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b50      	ldr	r3, [pc, #320]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	494d      	ldr	r1, [pc, #308]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d044      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d119      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e07f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e067      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b37      	ldr	r3, [pc, #220]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4934      	ldr	r1, [pc, #208]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fc fc5c 	bl	80010a4 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fc fc58 	bl	80010a4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e04f      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d20c      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e032      	b.n	80048a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4916      	ldr	r1, [pc, #88]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	490e      	ldr	r1, [pc, #56]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800487e:	f000 f821 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004882:	4602      	mov	r2, r0
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490a      	ldr	r1, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a09      	ldr	r2, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fc fbbc 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	08009570 	.word	0x08009570
 80048bc:	20000000 	.word	0x20000000
 80048c0:	20000004 	.word	0x20000004

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b094      	sub	sp, #80	@ 0x50
 80048ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d0:	2300      	movs	r3, #0
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	2300      	movs	r3, #0
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00d      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x40>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	f200 80e1 	bhi.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x34>
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x3a>
 80048f6:	e0db      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b73      	ldr	r3, [pc, #460]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048fc:	e0db      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048fe:	4b73      	ldr	r3, [pc, #460]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x208>)
 8004900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004902:	e0d8      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	2200      	movs	r2, #0
 8004922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4621      	mov	r1, r4
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	6139      	str	r1, [r7, #16]
 8004954:	4629      	mov	r1, r5
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	ebb2 0801 	subs.w	r8, r2, r1
 800497c:	4659      	mov	r1, fp
 800497e:	eb63 0901 	sbc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	462b      	mov	r3, r5
 80049a4:	eb49 0303 	adc.w	r3, r9, r3
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049b6:	4629      	mov	r1, r5
 80049b8:	024b      	lsls	r3, r1, #9
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c0:	4621      	mov	r1, r4
 80049c2:	024a      	lsls	r2, r1, #9
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049d4:	f7fb fc54 	bl	8000280 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e058      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	2200      	movs	r2, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	4611      	mov	r1, r2
 80049ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	2300      	movs	r3, #0
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0159      	lsls	r1, r3, #5
 8004a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0e:	0150      	lsls	r0, r2, #5
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4641      	mov	r1, r8
 8004a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a34:	ebb2 040a 	subs.w	r4, r2, sl
 8004a38:	eb63 050b 	sbc.w	r5, r3, fp
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	00eb      	lsls	r3, r5, #3
 8004a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4a:	00e2      	lsls	r2, r4, #3
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	461d      	mov	r5, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	028b      	lsls	r3, r1, #10
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a74:	4621      	mov	r1, r4
 8004a76:	028a      	lsls	r2, r1, #10
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	61fa      	str	r2, [r7, #28]
 8004a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a88:	f7fb fbfa 	bl	8000280 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3750      	adds	r7, #80	@ 0x50
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000000 	.word	0x20000000

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08009580 	.word	0x08009580

08004b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b14:	f7ff ffdc 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	08009580 	.word	0x08009580

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d035      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b60:	4b62      	ldr	r3, [pc, #392]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b66:	f7fc fa9d 	bl	80010a4 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b6e:	f7fc fa99 	bl	80010a4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0b0      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b80:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	019a      	lsls	r2, r3, #6
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	071b      	lsls	r3, r3, #28
 8004b98:	4955      	ldr	r1, [pc, #340]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba0:	4b52      	ldr	r3, [pc, #328]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba6:	f7fc fa7d 	bl	80010a4 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bae:	f7fc fa79 	bl	80010a4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e090      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8083 	beq.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	4b44      	ldr	r3, [pc, #272]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	4a43      	ldr	r2, [pc, #268]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bea:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c02:	f7fc fa4f 	bl	80010a4 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c0a:	f7fc fa4b 	bl	80010a4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e062      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1c:	4b35      	ldr	r3, [pc, #212]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c28:	4b31      	ldr	r3, [pc, #196]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02f      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d028      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c46:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c56:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c5c:	4a24      	ldr	r2, [pc, #144]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c62:	4b23      	ldr	r3, [pc, #140]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d114      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fc fa19 	bl	80010a4 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fc fa15 	bl	80010a4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e02a      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	4b18      	ldr	r3, [pc, #96]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ee      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ca6:	4b12      	ldr	r3, [pc, #72]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cba:	490d      	ldr	r1, [pc, #52]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	e005      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ccc:	6093      	str	r3, [r2, #8]
 8004cce:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	4905      	ldr	r1, [pc, #20]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	42470068 	.word	0x42470068
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	42470e40 	.word	0x42470e40

08004cfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d13e      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d1a:	4b23      	ldr	r3, [pc, #140]	@ (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d12f      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d30:	4b1e      	ldr	r3, [pc, #120]	@ (8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d32:	617b      	str	r3, [r7, #20]
          break;
 8004d34:	e02f      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d36:	4b1c      	ldr	r3, [pc, #112]	@ (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d42:	d108      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d44:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d4c:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e007      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d56:	4b14      	ldr	r3, [pc, #80]	@ (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d5e:	4a15      	ldr	r2, [pc, #84]	@ (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d66:	4b10      	ldr	r3, [pc, #64]	@ (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d80:	0f1b      	lsrs	r3, r3, #28
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
          break;
 8004d8e:	e002      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
          break;
 8004d94:	bf00      	nop
        }
      }
      break;
 8004d96:	bf00      	nop
    }
  }
  return frequency;
 8004d98:	697b      	ldr	r3, [r7, #20]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800
 8004dac:	00bb8000 	.word	0x00bb8000
 8004db0:	007a1200 	.word	0x007a1200
 8004db4:	00f42400 	.word	0x00f42400

08004db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07b      	b.n	8004ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d108      	bne.n	8004de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dda:	d009      	beq.n	8004df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	61da      	str	r2, [r3, #28]
 8004de2:	e005      	b.n	8004df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fb ffa8 	bl	8000d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	ea42 0103 	orr.w	r1, r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0104 	and.w	r1, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	f003 0210 	and.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e03f      	b.n	8004f5c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fb ff7d 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2224      	movs	r2, #36	@ 0x24
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f928 	bl	8005164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	@ 0x28
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d17c      	bne.n	800507e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Transmit+0x2c>
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e075      	b.n	8005080 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Transmit+0x3e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e06e      	b.n	8005080 <HAL_UART_Transmit+0x11c>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2221      	movs	r2, #33	@ 0x21
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fb8:	f7fc f874 	bl	80010a4 <HAL_GetTick>
 8004fbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fd2:	d108      	bne.n	8004fe6 <HAL_UART_Transmit+0x82>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e003      	b.n	8004fee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004ff6:	e02a      	b.n	800504e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2200      	movs	r2, #0
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f840 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e036      	b.n	8005080 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005026:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	3302      	adds	r3, #2
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e007      	b.n	8005040 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3301      	adds	r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1cf      	bne.n	8004ff8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	2140      	movs	r1, #64	@ 0x40
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f810 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	@ 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	e050      	b.n	800513c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050a0:	d04c      	beq.n	800513c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a8:	f7fb fffc 	bl	80010a4 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d241      	bcs.n	800513c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80050da:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80050e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	613b      	str	r3, [r7, #16]
   return(result);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800510c:	623a      	str	r2, [r7, #32]
 800510e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	69f9      	ldr	r1, [r7, #28]
 8005112:	6a3a      	ldr	r2, [r7, #32]
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	61bb      	str	r3, [r7, #24]
   return(result);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e00f      	b.n	800515c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4013      	ands	r3, r2
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	429a      	cmp	r2, r3
 8005158:	d09f      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3740      	adds	r7, #64	@ 0x40
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005168:	b0c0      	sub	sp, #256	@ 0x100
 800516a:	af00      	add	r7, sp, #0
 800516c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	ea40 0301 	orr.w	r3, r0, r1
 800518c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	431a      	orrs	r2, r3
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051bc:	f021 010c 	bic.w	r1, r1, #12
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ca:	430b      	orrs	r3, r1
 80051cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051de:	6999      	ldr	r1, [r3, #24]
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	ea40 0301 	orr.w	r3, r0, r1
 80051ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005430 <UART_SetConfig+0x2cc>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d005      	beq.n	8005204 <UART_SetConfig+0xa0>
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005434 <UART_SetConfig+0x2d0>)
 8005200:	429a      	cmp	r2, r3
 8005202:	d104      	bne.n	800520e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7ff fc84 	bl	8004b10 <HAL_RCC_GetPCLK2Freq>
 8005208:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800520c:	e003      	b.n	8005216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800520e:	f7ff fc6b 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8005212:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005220:	f040 810c 	bne.w	800543c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005228:	2200      	movs	r2, #0
 800522a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800522e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	1891      	adds	r1, r2, r2
 800523c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800523e:	415b      	adcs	r3, r3
 8005240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005246:	4621      	mov	r1, r4
 8005248:	eb12 0801 	adds.w	r8, r2, r1
 800524c:	4629      	mov	r1, r5
 800524e:	eb43 0901 	adc.w	r9, r3, r1
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800525e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005266:	4690      	mov	r8, r2
 8005268:	4699      	mov	r9, r3
 800526a:	4623      	mov	r3, r4
 800526c:	eb18 0303 	adds.w	r3, r8, r3
 8005270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005274:	462b      	mov	r3, r5
 8005276:	eb49 0303 	adc.w	r3, r9, r3
 800527a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800528a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800528e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005292:	460b      	mov	r3, r1
 8005294:	18db      	adds	r3, r3, r3
 8005296:	653b      	str	r3, [r7, #80]	@ 0x50
 8005298:	4613      	mov	r3, r2
 800529a:	eb42 0303 	adc.w	r3, r2, r3
 800529e:	657b      	str	r3, [r7, #84]	@ 0x54
 80052a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052a8:	f7fa ffea 	bl	8000280 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4b61      	ldr	r3, [pc, #388]	@ (8005438 <UART_SetConfig+0x2d4>)
 80052b2:	fba3 2302 	umull	r2, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	011c      	lsls	r4, r3, #4
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052d4:	415b      	adcs	r3, r3
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052dc:	4641      	mov	r1, r8
 80052de:	eb12 0a01 	adds.w	sl, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb43 0b01 	adc.w	fp, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052fc:	4692      	mov	sl, r2
 80052fe:	469b      	mov	fp, r3
 8005300:	4643      	mov	r3, r8
 8005302:	eb1a 0303 	adds.w	r3, sl, r3
 8005306:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800530a:	464b      	mov	r3, r9
 800530c:	eb4b 0303 	adc.w	r3, fp, r3
 8005310:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005320:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005328:	460b      	mov	r3, r1
 800532a:	18db      	adds	r3, r3, r3
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
 800532e:	4613      	mov	r3, r2
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	647b      	str	r3, [r7, #68]	@ 0x44
 8005336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800533a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800533e:	f7fa ff9f 	bl	8000280 <__aeabi_uldivmod>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4611      	mov	r1, r2
 8005348:	4b3b      	ldr	r3, [pc, #236]	@ (8005438 <UART_SetConfig+0x2d4>)
 800534a:	fba3 2301 	umull	r2, r3, r3, r1
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2264      	movs	r2, #100	@ 0x64
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	1acb      	subs	r3, r1, r3
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800535e:	4b36      	ldr	r3, [pc, #216]	@ (8005438 <UART_SetConfig+0x2d4>)
 8005360:	fba3 2302 	umull	r2, r3, r3, r2
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800536c:	441c      	add	r4, r3
 800536e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005378:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800537c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005388:	415b      	adcs	r3, r3
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800538c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005390:	4641      	mov	r1, r8
 8005392:	1851      	adds	r1, r2, r1
 8005394:	6339      	str	r1, [r7, #48]	@ 0x30
 8005396:	4649      	mov	r1, r9
 8005398:	414b      	adcs	r3, r1
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053a8:	4659      	mov	r1, fp
 80053aa:	00cb      	lsls	r3, r1, #3
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b2:	4651      	mov	r1, sl
 80053b4:	00ca      	lsls	r2, r1, #3
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	4642      	mov	r2, r8
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053c4:	464b      	mov	r3, r9
 80053c6:	460a      	mov	r2, r1
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053e4:	460b      	mov	r3, r1
 80053e6:	18db      	adds	r3, r3, r3
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ea:	4613      	mov	r3, r2
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053fa:	f7fa ff41 	bl	8000280 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4b0d      	ldr	r3, [pc, #52]	@ (8005438 <UART_SetConfig+0x2d4>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	@ 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	3332      	adds	r3, #50	@ 0x32
 8005416:	4a08      	ldr	r2, [pc, #32]	@ (8005438 <UART_SetConfig+0x2d4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 0207 	and.w	r2, r3, #7
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4422      	add	r2, r4
 800542a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800542c:	e106      	b.n	800563c <UART_SetConfig+0x4d8>
 800542e:	bf00      	nop
 8005430:	40011000 	.word	0x40011000
 8005434:	40011400 	.word	0x40011400
 8005438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800543c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005446:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800544a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800544e:	4642      	mov	r2, r8
 8005450:	464b      	mov	r3, r9
 8005452:	1891      	adds	r1, r2, r2
 8005454:	6239      	str	r1, [r7, #32]
 8005456:	415b      	adcs	r3, r3
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
 800545a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800545e:	4641      	mov	r1, r8
 8005460:	1854      	adds	r4, r2, r1
 8005462:	4649      	mov	r1, r9
 8005464:	eb43 0501 	adc.w	r5, r3, r1
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	00eb      	lsls	r3, r5, #3
 8005472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005476:	00e2      	lsls	r2, r4, #3
 8005478:	4614      	mov	r4, r2
 800547a:	461d      	mov	r5, r3
 800547c:	4643      	mov	r3, r8
 800547e:	18e3      	adds	r3, r4, r3
 8005480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005484:	464b      	mov	r3, r9
 8005486:	eb45 0303 	adc.w	r3, r5, r3
 800548a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800549a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054aa:	4629      	mov	r1, r5
 80054ac:	008b      	lsls	r3, r1, #2
 80054ae:	4621      	mov	r1, r4
 80054b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b4:	4621      	mov	r1, r4
 80054b6:	008a      	lsls	r2, r1, #2
 80054b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054bc:	f7fa fee0 	bl	8000280 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4b60      	ldr	r3, [pc, #384]	@ (8005648 <UART_SetConfig+0x4e4>)
 80054c6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	011c      	lsls	r4, r3, #4
 80054ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	61b9      	str	r1, [r7, #24]
 80054e8:	415b      	adcs	r3, r3
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f0:	4641      	mov	r1, r8
 80054f2:	1851      	adds	r1, r2, r1
 80054f4:	6139      	str	r1, [r7, #16]
 80054f6:	4649      	mov	r1, r9
 80054f8:	414b      	adcs	r3, r1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005508:	4659      	mov	r1, fp
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005512:	4651      	mov	r1, sl
 8005514:	00ca      	lsls	r2, r1, #3
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4642      	mov	r2, r8
 800551e:	189b      	adds	r3, r3, r2
 8005520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005524:	464b      	mov	r3, r9
 8005526:	460a      	mov	r2, r1
 8005528:	eb42 0303 	adc.w	r3, r2, r3
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	67bb      	str	r3, [r7, #120]	@ 0x78
 800553a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005548:	4649      	mov	r1, r9
 800554a:	008b      	lsls	r3, r1, #2
 800554c:	4641      	mov	r1, r8
 800554e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005552:	4641      	mov	r1, r8
 8005554:	008a      	lsls	r2, r1, #2
 8005556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800555a:	f7fa fe91 	bl	8000280 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4611      	mov	r1, r2
 8005564:	4b38      	ldr	r3, [pc, #224]	@ (8005648 <UART_SetConfig+0x4e4>)
 8005566:	fba3 2301 	umull	r2, r3, r3, r1
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2264      	movs	r2, #100	@ 0x64
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	1acb      	subs	r3, r1, r3
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	3332      	adds	r3, #50	@ 0x32
 8005578:	4a33      	ldr	r2, [pc, #204]	@ (8005648 <UART_SetConfig+0x4e4>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005584:	441c      	add	r4, r3
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	673b      	str	r3, [r7, #112]	@ 0x70
 800558e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005590:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	1891      	adds	r1, r2, r2
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	415b      	adcs	r3, r3
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a4:	4641      	mov	r1, r8
 80055a6:	1851      	adds	r1, r2, r1
 80055a8:	6039      	str	r1, [r7, #0]
 80055aa:	4649      	mov	r1, r9
 80055ac:	414b      	adcs	r3, r1
 80055ae:	607b      	str	r3, [r7, #4]
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055bc:	4659      	mov	r1, fp
 80055be:	00cb      	lsls	r3, r1, #3
 80055c0:	4651      	mov	r1, sl
 80055c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055c6:	4651      	mov	r1, sl
 80055c8:	00ca      	lsls	r2, r1, #3
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	4642      	mov	r2, r8
 80055d2:	189b      	adds	r3, r3, r2
 80055d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055d6:	464b      	mov	r3, r9
 80055d8:	460a      	mov	r2, r1
 80055da:	eb42 0303 	adc.w	r3, r2, r3
 80055de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055f8:	4649      	mov	r1, r9
 80055fa:	008b      	lsls	r3, r1, #2
 80055fc:	4641      	mov	r1, r8
 80055fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005602:	4641      	mov	r1, r8
 8005604:	008a      	lsls	r2, r1, #2
 8005606:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800560a:	f7fa fe39 	bl	8000280 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <UART_SetConfig+0x4e4>)
 8005614:	fba3 1302 	umull	r1, r3, r3, r2
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	2164      	movs	r1, #100	@ 0x64
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	3332      	adds	r3, #50	@ 0x32
 8005626:	4a08      	ldr	r2, [pc, #32]	@ (8005648 <UART_SetConfig+0x4e4>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	f003 020f 	and.w	r2, r3, #15
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4422      	add	r2, r4
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005642:	46bd      	mov	sp, r7
 8005644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005648:	51eb851f 	.word	0x51eb851f

0800564c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800564c:	b084      	sub	sp, #16
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	f107 001c 	add.w	r0, r7, #28
 800565a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	2b01      	cmp	r3, #1
 8005662:	d122      	bne.n	80056aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800568c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d105      	bne.n	800569e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9c0 	bl	8005a24 <USB_CoreReset>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
 80056a8:	e01a      	b.n	80056e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9b4 	bl	8005a24 <USB_CoreReset>
 80056bc:	4603      	mov	r3, r0
 80056be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80056d2:	e005      	b.n	80056e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10b      	bne.n	80056fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f043 0206 	orr.w	r2, r3, #6
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800570a:	b004      	add	sp, #16
 800570c:	4770      	bx	lr

0800570e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f023 0201 	bic.w	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d115      	bne.n	80057a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005780:	2001      	movs	r0, #1
 8005782:	f7fb fc9b 	bl	80010bc <HAL_Delay>
      ms++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f93a 	bl	8005a06 <USB_GetMode>
 8005792:	4603      	mov	r3, r0
 8005794:	2b01      	cmp	r3, #1
 8005796:	d01e      	beq.n	80057d6 <USB_SetCurrentMode+0x84>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b31      	cmp	r3, #49	@ 0x31
 800579c:	d9f0      	bls.n	8005780 <USB_SetCurrentMode+0x2e>
 800579e:	e01a      	b.n	80057d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d115      	bne.n	80057d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7fb fc82 	bl	80010bc <HAL_Delay>
      ms++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f921 	bl	8005a06 <USB_GetMode>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <USB_SetCurrentMode+0x84>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b31      	cmp	r3, #49	@ 0x31
 80057ce:	d9f0      	bls.n	80057b2 <USB_SetCurrentMode+0x60>
 80057d0:	e001      	b.n	80057d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e005      	b.n	80057e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b32      	cmp	r3, #50	@ 0x32
 80057da:	d101      	bne.n	80057e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a13      	ldr	r2, [pc, #76]	@ (8005850 <USB_FlushTxFifo+0x64>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d901      	bls.n	800580c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e01b      	b.n	8005844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	daf2      	bge.n	80057fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	019b      	lsls	r3, r3, #6
 800581c:	f043 0220 	orr.w	r2, r3, #32
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <USB_FlushTxFifo+0x64>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e006      	b.n	8005844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b20      	cmp	r3, #32
 8005840:	d0f0      	beq.n	8005824 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	00030d40 	.word	0x00030d40

08005854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a11      	ldr	r2, [pc, #68]	@ (80058b0 <USB_FlushRxFifo+0x5c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e018      	b.n	80058a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	daf2      	bge.n	8005860 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2210      	movs	r2, #16
 8005882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <USB_FlushRxFifo+0x5c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e006      	b.n	80058a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d0f0      	beq.n	8005884 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	00030d40 	.word	0x00030d40

080058b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	@ 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4611      	mov	r1, r2
 80058c0:	461a      	mov	r2, r3
 80058c2:	460b      	mov	r3, r1
 80058c4:	71fb      	strb	r3, [r7, #7]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d123      	bne.n	8005922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058da:	88bb      	ldrh	r3, [r7, #4]
 80058dc:	3303      	adds	r3, #3
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e018      	b.n	800591a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	031a      	lsls	r2, r3, #12
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f4:	461a      	mov	r2, r3
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	3301      	adds	r3, #1
 8005900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3301      	adds	r3, #1
 8005912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3301      	adds	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3e2      	bcc.n	80058e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3724      	adds	r7, #36	@ 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005930:	b480      	push	{r7}
 8005932:	b08b      	sub	sp, #44	@ 0x2c
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	b29b      	uxth	r3, r3
 800594c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005956:	2300      	movs	r3, #0
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	e014      	b.n	8005986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	601a      	str	r2, [r3, #0]
    pDest++;
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	3301      	adds	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	3301      	adds	r3, #1
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	3301      	adds	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	3301      	adds	r3, #1
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	3301      	adds	r3, #1
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	429a      	cmp	r2, r3
 800598c:	d3e6      	bcc.n	800595c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800598e:	8bfb      	ldrh	r3, [r7, #30]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01e      	beq.n	80059d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800599e:	461a      	mov	r2, r3
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	701a      	strb	r2, [r3, #0]
      i++;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	3301      	adds	r3, #1
 80059be:	623b      	str	r3, [r7, #32]
      pDest++;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	3301      	adds	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80059c6:	8bfb      	ldrh	r3, [r7, #30]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059cc:	8bfb      	ldrh	r3, [r7, #30]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ea      	bne.n	80059a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	372c      	adds	r7, #44	@ 0x2c
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4013      	ands	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0301 	and.w	r3, r3, #1
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a13      	ldr	r2, [pc, #76]	@ (8005a88 <USB_CoreReset+0x64>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e01b      	b.n	8005a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	daf2      	bge.n	8005a30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <USB_CoreReset+0x64>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e006      	b.n	8005a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d0f0      	beq.n	8005a5a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	00030d40 	.word	0x00030d40

08005a8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d10a      	bne.n	8005afe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e014      	b.n	8005b28 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e009      	b.n	8005b28 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b22:	f023 0304 	bic.w	r3, r3, #4
 8005b26:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b28:	2110      	movs	r1, #16
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fe5e 	bl	80057ec <USB_FlushTxFifo>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fe8a 	bl	8005854 <USB_FlushRxFifo>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	e015      	b.n	8005b7c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d3e5      	bcc.n	8005b50 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b90:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a13      	ldr	r2, [pc, #76]	@ (8005bf8 <USB_HostInit+0x16c>)
 8005baa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a13      	ldr	r2, [pc, #76]	@ (8005bfc <USB_HostInit+0x170>)
 8005bb0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005bb4:	e009      	b.n	8005bca <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2280      	movs	r2, #128	@ 0x80
 8005bba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a10      	ldr	r2, [pc, #64]	@ (8005c00 <USB_HostInit+0x174>)
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c04 <USB_HostInit+0x178>)
 8005bc6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f043 0210 	orr.w	r2, r3, #16
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	4b09      	ldr	r3, [pc, #36]	@ (8005c08 <USB_HostInit+0x17c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bf4:	b004      	add	sp, #16
 8005bf6:	4770      	bx	lr
 8005bf8:	01000200 	.word	0x01000200
 8005bfc:	00e00300 	.word	0x00e00300
 8005c00:	00600080 	.word	0x00600080
 8005c04:	004000e0 	.word	0x004000e0
 8005c08:	a3200008 	.word	0xa3200008

08005c0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d107      	bne.n	8005c5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c54:	461a      	mov	r2, r3
 8005c56:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005c5a:	6053      	str	r3, [r2, #4]
 8005c5c:	e009      	b.n	8005c72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d106      	bne.n	8005c72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005c70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ca0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cb0:	2064      	movs	r0, #100	@ 0x64
 8005cb2:	f7fb fa03 	bl	80010bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005cc4:	200a      	movs	r0, #10
 8005cc6:	f7fb f9f9 	bl	80010bc <HAL_Delay>

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005cf8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <USB_DriveVbus+0x44>
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d106      	bne.n	8005d18 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d16:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d22:	d109      	bne.n	8005d38 <USB_DriveVbus+0x64>
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d36:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	0c5b      	lsrs	r3, r3, #17
 8005d64:	f003 0303 	and.w	r3, r3, #3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	b29b      	uxth	r3, r3
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	70fb      	strb	r3, [r7, #3]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70bb      	strb	r3, [r7, #2]
 8005dae:	4613      	mov	r3, r2
 8005db0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dcc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005dce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d87e      	bhi.n	8005ed4 <USB_HC_Init+0x13c>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <USB_HC_Init+0x44>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005e97 	.word	0x08005e97
 8005de4:	08005ded 	.word	0x08005ded
 8005de8:	08005e59 	.word	0x08005e59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005dfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da10      	bge.n	8005e2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e26:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e28:	e057      	b.n	8005eda <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d051      	beq.n	8005eda <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e54:	60d3      	str	r3, [r2, #12]
      break;
 8005e56:	e040      	b.n	8005eda <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005e6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da34      	bge.n	8005ede <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e92:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e94:	e023      	b.n	8005ede <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f240 2325 	movw	r3, #549	@ 0x225
 8005ea8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005eaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da17      	bge.n	8005ee2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ecc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ed0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ed2:	e006      	b.n	8005ee2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ed8:	e004      	b.n	8005ee4 <USB_HC_Init+0x14c>
      break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <USB_HC_Init+0x14c>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <USB_HC_Init+0x14c>
      break;
 8005ee2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efe:	f043 0302 	orr.w	r3, r3, #2
 8005f02:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	2101      	movs	r1, #1
 8005f14:	fa01 f303 	lsl.w	r3, r1, r3
 8005f18:	6939      	ldr	r1, [r7, #16]
 8005f1a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da03      	bge.n	8005f3e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e001      	b.n	8005f42 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff feff 	bl	8005d46 <USB_GetHostSpeed>
 8005f48:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d106      	bne.n	8005f60 <USB_HC_Init+0x1c8>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d003      	beq.n	8005f60 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e001      	b.n	8005f64 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f64:	787b      	ldrb	r3, [r7, #1]
 8005f66:	059b      	lsls	r3, r3, #22
 8005f68:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f6c:	78bb      	ldrb	r3, [r7, #2]
 8005f6e:	02db      	lsls	r3, r3, #11
 8005f70:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f74:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f7a:	049b      	lsls	r3, r3, #18
 8005f7c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f82:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	0159      	lsls	r1, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	440b      	add	r3, r1
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fa0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005fa2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d003      	beq.n	8005fb2 <USB_HC_Init+0x21a>
 8005faa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d10f      	bne.n	8005fd2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fd0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08c      	sub	sp, #48	@ 0x30
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ff8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d02d      	beq.n	8006062 <USB_HC_StartXfer+0x86>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d129      	bne.n	8006062 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d117      	bne.n	8006044 <USB_HC_StartXfer+0x68>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	79db      	ldrb	r3, [r3, #7]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <USB_HC_StartXfer+0x48>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	79db      	ldrb	r3, [r3, #7]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d10f      	bne.n	8006044 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	4413      	add	r3, r2
 800602c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	6a3a      	ldr	r2, [r7, #32]
 8006038:	440a      	add	r2, r1
 800603a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800603e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006042:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <USB_HC_StartXfer+0x86>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	795b      	ldrb	r3, [r3, #5]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d107      	bne.n	8006062 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	4619      	mov	r1, r3
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fa0f 	bl	800647c <USB_DoPing>
      return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e0f8      	b.n	8006254 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	8912      	ldrh	r2, [r2, #8]
 8006072:	4413      	add	r3, r2
 8006074:	3b01      	subs	r3, #1
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	8912      	ldrh	r2, [r2, #8]
 800607a:	fbb3 f3f2 	udiv	r3, r3, r2
 800607e:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8006080:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006082:	8b7b      	ldrh	r3, [r7, #26]
 8006084:	429a      	cmp	r2, r3
 8006086:	d90b      	bls.n	80060a0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006088:	8b7b      	ldrh	r3, [r7, #26]
 800608a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800608c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	8912      	ldrh	r2, [r2, #8]
 8006092:	fb03 f202 	mul.w	r2, r3, r2
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	611a      	str	r2, [r3, #16]
 800609a:	e001      	b.n	80060a0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800609c:	2301      	movs	r3, #1
 800609e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	78db      	ldrb	r3, [r3, #3]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d007      	beq.n	80060b8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	8912      	ldrh	r2, [r2, #8]
 80060ae:	fb03 f202 	mul.w	r2, r3, r2
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	611a      	str	r2, [r3, #16]
 80060b6:	e003      	b.n	80060c0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060ca:	04d9      	lsls	r1, r3, #19
 80060cc:	4b63      	ldr	r3, [pc, #396]	@ (800625c <USB_HC_StartXfer+0x280>)
 80060ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	7a9b      	ldrb	r3, [r3, #10]
 80060d6:	075b      	lsls	r3, r3, #29
 80060d8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	0148      	lsls	r0, r1, #5
 80060e0:	6a39      	ldr	r1, [r7, #32]
 80060e2:	4401      	add	r1, r0
 80060e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	68d9      	ldr	r1, [r3, #12]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006102:	460a      	mov	r2, r1
 8006104:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	6a3a      	ldr	r2, [r7, #32]
 8006132:	440a      	add	r2, r1
 8006134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006138:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800613c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	7e7b      	ldrb	r3, [r7, #25]
 800614e:	075b      	lsls	r3, r3, #29
 8006150:	69f9      	ldr	r1, [r7, #28]
 8006152:	0148      	lsls	r0, r1, #5
 8006154:	6a39      	ldr	r1, [r7, #32]
 8006156:	4401      	add	r1, r0
 8006158:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006176:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	78db      	ldrb	r3, [r3, #3]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	e003      	b.n	8006192 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006190:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006198:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a6:	461a      	mov	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e04e      	b.n	8006254 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	78db      	ldrb	r3, [r3, #3]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d149      	bne.n	8006252 <USB_HC_StartXfer+0x276>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d045      	beq.n	8006252 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	79db      	ldrb	r3, [r3, #7]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d830      	bhi.n	8006230 <USB_HC_StartXfer+0x254>
 80061ce:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <USB_HC_StartXfer+0x1f8>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	08006209 	.word	0x08006209
 80061dc:	080061e5 	.word	0x080061e5
 80061e0:	08006209 	.word	0x08006209
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	3303      	adds	r3, #3
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061ee:	8afa      	ldrh	r2, [r7, #22]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d91c      	bls.n	8006234 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f043 0220 	orr.w	r2, r3, #32
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	619a      	str	r2, [r3, #24]
        }
        break;
 8006206:	e015      	b.n	8006234 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	3303      	adds	r3, #3
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006212:	8afa      	ldrh	r2, [r7, #22]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	b29b      	uxth	r3, r3
 800621e:	429a      	cmp	r2, r3
 8006220:	d90a      	bls.n	8006238 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	619a      	str	r2, [r3, #24]
        }
        break;
 800622e:	e003      	b.n	8006238 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006230:	bf00      	nop
 8006232:	e002      	b.n	800623a <USB_HC_StartXfer+0x25e>
        break;
 8006234:	bf00      	nop
 8006236:	e000      	b.n	800623a <USB_HC_StartXfer+0x25e>
        break;
 8006238:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	68d9      	ldr	r1, [r3, #12]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	785a      	ldrb	r2, [r3, #1]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	b29b      	uxth	r3, r3
 8006248:	2000      	movs	r0, #0
 800624a:	9000      	str	r0, [sp, #0]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fb31 	bl	80058b4 <USB_WritePacket>
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3728      	adds	r7, #40	@ 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	1ff80000 	.word	0x1ff80000

08006260 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	b29b      	uxth	r3, r3
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006282:	b480      	push	{r7}
 8006284:	b089      	sub	sp, #36	@ 0x24
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	0c9b      	lsrs	r3, r3, #18
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	0fdb      	lsrs	r3, r3, #31
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d104      	bne.n	80062dc <USB_HC_Halt+0x5a>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	e0c8      	b.n	800646e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <USB_HC_Halt+0x66>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d163      	bne.n	80063b0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006302:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006306:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 80ab 	bne.w	800646c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d133      	bne.n	800638a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	440a      	add	r2, r1
 8006338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006340:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800635c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006360:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800636e:	d81d      	bhi.n	80063ac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006386:	d0ec      	beq.n	8006362 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006388:	e070      	b.n	800646c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063aa:	e05f      	b.n	800646c <USB_HC_Halt+0x1ea>
            break;
 80063ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063ae:	e05d      	b.n	800646c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d133      	bne.n	8006448 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800641a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800641e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800642c:	d81d      	bhi.n	800646a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006444:	d0ec      	beq.n	8006420 <USB_HC_Halt+0x19e>
 8006446:	e011      	b.n	800646c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006462:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	e000      	b.n	800646c <USB_HC_Halt+0x1ea>
          break;
 800646a:	bf00      	nop
    }
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3724      	adds	r7, #36	@ 0x24
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006490:	2301      	movs	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	04da      	lsls	r2, r3, #19
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <USB_DoPing+0x74>)
 800649a:	4013      	ands	r3, r2
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064da:	461a      	mov	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	1ff80000 	.word	0x1ff80000

080064f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff f911 	bl	8005730 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800650e:	2110      	movs	r1, #16
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff f96b 	bl	80057ec <USB_FlushTxFifo>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff f997 	bl	8005854 <USB_FlushRxFifo>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e01f      	b.n	8006576 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800654c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006554:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800655c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656a:	461a      	mov	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	3301      	adds	r3, #1
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d9dc      	bls.n	8006536 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	e034      	b.n	80065ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006598:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b6:	461a      	mov	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065c8:	d80c      	bhi.n	80065e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e0:	d0ec      	beq.n	80065bc <USB_StopHost+0xc8>
 80065e2:	e000      	b.n	80065e6 <USB_StopHost+0xf2>
        break;
 80065e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d9c7      	bls.n	8006582 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f8:	461a      	mov	r2, r3
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006606:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff f880 	bl	800570e <USB_EnableGlobalInt>

  return ret;
 800660e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b089      	sub	sp, #36	@ 0x24
 800661c:	af04      	add	r7, sp, #16
 800661e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006620:	2301      	movs	r3, #1
 8006622:	2202      	movs	r2, #2
 8006624:	2102      	movs	r1, #2
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fc66 	bl	8006ef8 <USBH_FindInterface>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2bff      	cmp	r3, #255	@ 0xff
 8006634:	d002      	beq.n	800663c <USBH_CDC_InterfaceInit+0x24>
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d901      	bls.n	8006640 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800663c:	2302      	movs	r3, #2
 800663e:	e13d      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc3b 	bl	8006ec0 <USBH_SelectInterface>
 800664a:	4603      	mov	r3, r0
 800664c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006654:	2302      	movs	r3, #2
 8006656:	e131      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800665e:	2050      	movs	r0, #80	@ 0x50
 8006660:	f002 fac0 	bl	8008be4 <malloc>
 8006664:	4603      	mov	r3, r0
 8006666:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006678:	2302      	movs	r3, #2
 800667a:	e11f      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800667c:	2250      	movs	r2, #80	@ 0x50
 800667e:	2100      	movs	r1, #0
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f002 fb8d 	bl	8008da0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	211a      	movs	r1, #26
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	4413      	add	r3, r2
 8006692:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b25b      	sxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	da15      	bge.n	80066ca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	211a      	movs	r1, #26
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	211a      	movs	r1, #26
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	4413      	add	r3, r2
 80066c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 ff1c 	bl	800850e <USBH_AllocPipe>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	7858      	ldrb	r0, [r3, #1]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	8952      	ldrh	r2, [r2, #10]
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	2203      	movs	r2, #3
 80066fa:	9201      	str	r2, [sp, #4]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4623      	mov	r3, r4
 8006700:	4602      	mov	r2, r0
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fed4 	bl	80084b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 f9e3 	bl	8008adc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	210a      	movs	r1, #10
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fbeb 	bl	8006ef8 <USBH_FindInterface>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2bff      	cmp	r3, #255	@ 0xff
 800672a:	d002      	beq.n	8006732 <USBH_CDC_InterfaceInit+0x11a>
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d901      	bls.n	8006736 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006732:	2302      	movs	r3, #2
 8006734:	e0c2      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	211a      	movs	r1, #26
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b25b      	sxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	da16      	bge.n	800677c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	211a      	movs	r1, #26
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	211a      	movs	r1, #26
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	835a      	strh	r2, [r3, #26]
 800677a:	e015      	b.n	80067a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	211a      	movs	r1, #26
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	211a      	movs	r1, #26
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80067a2:	881a      	ldrh	r2, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	211a      	movs	r1, #26
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	b25b      	sxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da16      	bge.n	80067ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	211a      	movs	r1, #26
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	211a      	movs	r1, #26
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80067e6:	881a      	ldrh	r2, [r3, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	835a      	strh	r2, [r3, #26]
 80067ec:	e015      	b.n	800681a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	211a      	movs	r1, #26
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	211a      	movs	r1, #26
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	7b9b      	ldrb	r3, [r3, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fe74 	bl	800850e <USBH_AllocPipe>
 8006826:	4603      	mov	r3, r0
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7bdb      	ldrb	r3, [r3, #15]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fe6a 	bl	800850e <USBH_AllocPipe>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	7b59      	ldrb	r1, [r3, #13]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	7b98      	ldrb	r0, [r3, #14]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	8b12      	ldrh	r2, [r2, #24]
 800685a:	9202      	str	r2, [sp, #8]
 800685c:	2202      	movs	r2, #2
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	4623      	mov	r3, r4
 8006864:	4602      	mov	r2, r0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fe22 	bl	80084b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	7b19      	ldrb	r1, [r3, #12]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	7bd8      	ldrb	r0, [r3, #15]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	8b52      	ldrh	r2, [r2, #26]
 8006884:	9202      	str	r2, [sp, #8]
 8006886:	2202      	movs	r2, #2
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4623      	mov	r3, r4
 800688e:	4602      	mov	r2, r0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 fe0d 	bl	80084b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	7b5b      	ldrb	r3, [r3, #13]
 80068a2:	2200      	movs	r2, #0
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f002 f918 	bl	8008adc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 f911 	bl	8008adc <USBH_LL_SetToggle>

  return USBH_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd90      	pop	{r4, r7, pc}

080068c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00e      	beq.n	80068fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fe02 	bl	80084ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fe2d 	bl	8008550 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	7b1b      	ldrb	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	7b1b      	ldrb	r3, [r3, #12]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fdef 	bl	80084ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	7b1b      	ldrb	r3, [r3, #12]
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fe1a 	bl	8008550 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	7b5b      	ldrb	r3, [r3, #13]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	7b5b      	ldrb	r3, [r3, #13]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fddc 	bl	80084ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	7b5b      	ldrb	r3, [r3, #13]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fe07 	bl	8008550 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	4618      	mov	r0, r3
 800695e:	f002 f949 	bl	8008bf4 <free>
    phost->pActiveClass->pData = 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006968:	2200      	movs	r2, #0
 800696a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3340      	adds	r3, #64	@ 0x40
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f8b1 	bl	8006af6 <GetLineCoding>
 8006994:	4603      	mov	r3, r0
 8006996:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80069a4:	2102      	movs	r1, #2
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80069aa:	7afb      	ldrb	r3, [r7, #11]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d877      	bhi.n	8006ac8 <USBH_CDC_Process+0x114>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <USBH_CDC_Process+0x2c>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	080069fb 	.word	0x080069fb
 80069e8:	08006a2b 	.word	0x08006a2b
 80069ec:	08006a9f 	.word	0x08006a9f
 80069f0:	08006aad 	.word	0x08006aad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
      break;
 80069f8:	e06d      	b.n	8006ad6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f897 	bl	8006b34 <SetLineCoding>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a18:	e058      	b.n	8006acc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d055      	beq.n	8006acc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2204      	movs	r2, #4
 8006a24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a28:	e050      	b.n	8006acc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	3340      	adds	r3, #64	@ 0x40
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f860 	bl	8006af6 <GetLineCoding>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d126      	bne.n	8006a8e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d13b      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a62:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d133      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a72:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d12b      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a80:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d124      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f958 	bl	8006d3c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a8c:	e020      	b.n	8006ad0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d01d      	beq.n	8006ad0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2204      	movs	r2, #4
 8006a98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a9c:	e018      	b.n	8006ad0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f867 	bl	8006b72 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8da 	bl	8006c5e <CDC_ProcessReception>
      break;
 8006aaa:	e014      	b.n	8006ad6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006aac:	2100      	movs	r1, #0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 ffe7 	bl	8007a82 <USBH_ClrFeature>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006ac6:	e005      	b.n	8006ad4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ac8:	bf00      	nop
 8006aca:	e004      	b.n	8006ad6 <USBH_CDC_Process+0x122>
      break;
 8006acc:	bf00      	nop
 8006ace:	e002      	b.n	8006ad6 <USBH_CDC_Process+0x122>
      break;
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <USBH_CDC_Process+0x122>
      break;
 8006ad4:	bf00      	nop

  }

  return status;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	22a1      	movs	r2, #161	@ 0xa1
 8006b04:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2221      	movs	r2, #33	@ 0x21
 8006b0a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 fa72 	bl	800800e <USBH_CtlReq>
 8006b2a:	4603      	mov	r3, r0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2221      	movs	r2, #33	@ 0x21
 8006b42:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2207      	movs	r2, #7
 8006b5a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2207      	movs	r2, #7
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fa53 	bl	800800e <USBH_CtlReq>
 8006b68:	4603      	mov	r3, r0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af02      	add	r7, sp, #8
 8006b78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d002      	beq.n	8006b98 <CDC_ProcessTransmission+0x26>
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d023      	beq.n	8006bde <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b96:	e05e      	b.n	8006c56 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	8b12      	ldrh	r2, [r2, #24]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d90b      	bls.n	8006bbc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	69d9      	ldr	r1, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8b1a      	ldrh	r2, [r3, #24]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	7b5b      	ldrb	r3, [r3, #13]
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	9000      	str	r0, [sp, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fc38 	bl	800842a <USBH_BulkSendData>
 8006bba:	e00b      	b.n	8006bd4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7b5b      	ldrb	r3, [r3, #13]
 8006bca:	2001      	movs	r0, #1
 8006bcc:	9000      	str	r0, [sp, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fc2b 	bl	800842a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006bdc:	e03b      	b.n	8006c56 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	7b5b      	ldrb	r3, [r3, #13]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 ff4f 	bl	8008a88 <USBH_LL_GetURBState>
 8006bea:	4603      	mov	r3, r0
 8006bec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d128      	bne.n	8006c46 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	8b12      	ldrh	r2, [r2, #24]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d90e      	bls.n	8006c1e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	8b12      	ldrh	r2, [r2, #24]
 8006c08:	1a9a      	subs	r2, r3, r2
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	8b12      	ldrh	r2, [r2, #24]
 8006c16:	441a      	add	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	61da      	str	r2, [r3, #28]
 8006c1c:	e002      	b.n	8006c24 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006c34:	e00e      	b.n	8006c54 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f868 	bl	8006d14 <USBH_CDC_TransmitCallback>
      break;
 8006c44:	e006      	b.n	8006c54 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d103      	bne.n	8006c54 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006c54:	bf00      	nop
  }
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d002      	beq.n	8006c84 <CDC_ProcessReception+0x26>
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d00e      	beq.n	8006ca0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c82:	e043      	b.n	8006d0c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6a19      	ldr	r1, [r3, #32]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	8b5a      	ldrh	r2, [r3, #26]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fbef 	bl	8008474 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2204      	movs	r2, #4
 8006c9a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006c9e:	e035      	b.n	8006d0c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	7b1b      	ldrb	r3, [r3, #12]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 feee 	bl	8008a88 <USBH_LL_GetURBState>
 8006cac:	4603      	mov	r3, r0
 8006cae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006cb0:	7cfb      	ldrb	r3, [r7, #19]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d129      	bne.n	8006d0a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	7b1b      	ldrb	r3, [r3, #12]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fe51 	bl	8008964 <USBH_LL_GetLastXferSize>
 8006cc2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d016      	beq.n	8006cfc <CDC_ProcessReception+0x9e>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	8b5b      	ldrh	r3, [r3, #26]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d910      	bls.n	8006cfc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6a1a      	ldr	r2, [r3, #32]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	441a      	add	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006cfa:	e006      	b.n	8006d0a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f80f 	bl	8006d28 <USBH_CDC_ReceiveCallback>
      break;
 8006d0a:	bf00      	nop
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e029      	b.n	8006dbc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	79fa      	ldrb	r2, [r7, #7]
 8006d6c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f81f 	bl	8006dc4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f001 fd21 	bl	80087fc <USBH_LL_Init>

  return USBH_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e009      	b.n	8006dea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	33e0      	adds	r3, #224	@ 0xe0
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	2200      	movs	r2, #0
 8006de2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b0f      	cmp	r3, #15
 8006dee:	d9f2      	bls.n	8006dd6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e009      	b.n	8006e0a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e10:	d3f1      	bcc.n	8006df6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2240      	movs	r2, #64	@ 0x40
 8006e36:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10e      	bne.n	8006ea8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	33de      	adds	r3, #222	@ 0xde
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	e004      	b.n	8006eb2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e001      	b.n	8006eb2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d204      	bcs.n	8006ee6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006ee4:	e001      	b.n	8006eea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	70fb      	strb	r3, [r7, #3]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70bb      	strb	r3, [r7, #2]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006f20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f22:	e025      	b.n	8006f70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	221a      	movs	r2, #26
 8006f28:	fb02 f303 	mul.w	r3, r2, r3
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	3302      	adds	r3, #2
 8006f34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	795b      	ldrb	r3, [r3, #5]
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <USBH_FindInterface+0x4e>
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	2bff      	cmp	r3, #255	@ 0xff
 8006f44:	d111      	bne.n	8006f6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f4a:	78ba      	ldrb	r2, [r7, #2]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f50:	78bb      	ldrb	r3, [r7, #2]
 8006f52:	2bff      	cmp	r3, #255	@ 0xff
 8006f54:	d109      	bne.n	8006f6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f5a:	787a      	ldrb	r2, [r7, #1]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f60:	787b      	ldrb	r3, [r7, #1]
 8006f62:	2bff      	cmp	r3, #255	@ 0xff
 8006f64:	d101      	bne.n	8006f6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	e006      	b.n	8006f78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d9d6      	bls.n	8006f24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f76:	23ff      	movs	r3, #255	@ 0xff
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fc71 	bl	8008874 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f92:	2101      	movs	r1, #1
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fd8a 	bl	8008aae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fac:	2302      	movs	r3, #2
 8006fae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d102      	bne.n	8006fc6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b0b      	cmp	r3, #11
 8006fce:	f200 81bb 	bhi.w	8007348 <USBH_Process+0x3a4>
 8006fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <USBH_Process+0x34>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	0800703b 	.word	0x0800703b
 8006fe0:	080070a3 	.word	0x080070a3
 8006fe4:	080072e3 	.word	0x080072e3
 8006fe8:	08007349 	.word	0x08007349
 8006fec:	08007143 	.word	0x08007143
 8006ff0:	08007289 	.word	0x08007289
 8006ff4:	08007179 	.word	0x08007179
 8006ff8:	08007199 	.word	0x08007199
 8006ffc:	080071b7 	.word	0x080071b7
 8007000:	080071fb 	.word	0x080071fb
 8007004:	080072cb 	.word	0x080072cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 819b 	beq.w	800734c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800701c:	20c8      	movs	r0, #200	@ 0xc8
 800701e:	f001 fd8d 	bl	8008b3c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fc83 	bl	800892e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007038:	e188      	b.n	800734c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007040:	2b01      	cmp	r3, #1
 8007042:	d107      	bne.n	8007054 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007052:	e18a      	b.n	800736a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800705a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800705e:	d914      	bls.n	800708a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007066:	3301      	adds	r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007076:	2b03      	cmp	r3, #3
 8007078:	d903      	bls.n	8007082 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220d      	movs	r2, #13
 800707e:	701a      	strb	r2, [r3, #0]
      break;
 8007080:	e173      	b.n	800736a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
      break;
 8007088:	e16f      	b.n	800736a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007090:	f103 020a 	add.w	r2, r3, #10
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800709a:	200a      	movs	r0, #10
 800709c:	f001 fd4e 	bl	8008b3c <USBH_Delay>
      break;
 80070a0:	e163      	b.n	800736a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070b2:	2104      	movs	r1, #4
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070b8:	2064      	movs	r0, #100	@ 0x64
 80070ba:	f001 fd3f 	bl	8008b3c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fc0e 	bl	80088e0 <USBH_LL_GetSpeed>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2205      	movs	r2, #5
 80070d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fa19 	bl	800850e <USBH_AllocPipe>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070e4:	2180      	movs	r1, #128	@ 0x80
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fa11 	bl	800850e <USBH_AllocPipe>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7919      	ldrb	r1, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007108:	9202      	str	r2, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	9201      	str	r2, [sp, #4]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4603      	mov	r3, r0
 8007112:	2280      	movs	r2, #128	@ 0x80
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f9cb 	bl	80084b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7959      	ldrb	r1, [r3, #5]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800712e:	9202      	str	r2, [sp, #8]
 8007130:	2200      	movs	r2, #0
 8007132:	9201      	str	r2, [sp, #4]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	4603      	mov	r3, r0
 8007138:	2200      	movs	r2, #0
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 f9b8 	bl	80084b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007140:	e113      	b.n	800736a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f916 	bl	8007374 <USBH_HandleEnum>
 8007148:	4603      	mov	r3, r0
 800714a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	f040 80fd 	bne.w	8007350 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007164:	2b01      	cmp	r3, #1
 8007166:	d103      	bne.n	8007170 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2208      	movs	r2, #8
 800716c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800716e:	e0ef      	b.n	8007350 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2207      	movs	r2, #7
 8007174:	701a      	strb	r2, [r3, #0]
      break;
 8007176:	e0eb      	b.n	8007350 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80e8 	beq.w	8007354 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2208      	movs	r2, #8
 8007194:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007196:	e0dd      	b.n	8007354 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc27 	bl	80079f4 <USBH_SetCfg>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f040 80d5 	bne.w	8007358 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2209      	movs	r2, #9
 80071b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071b4:	e0d0      	b.n	8007358 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d016      	beq.n	80071f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80071c4:	2101      	movs	r1, #1
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fc37 	bl	8007a3a <USBH_SetFeature>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220a      	movs	r2, #10
 80071dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071de:	e0bd      	b.n	800735c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	f040 80b9 	bne.w	800735c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220a      	movs	r2, #10
 80071ee:	701a      	strb	r2, [r3, #0]
      break;
 80071f0:	e0b4      	b.n	800735c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	220a      	movs	r2, #10
 80071f6:	701a      	strb	r2, [r3, #0]
      break;
 80071f8:	e0b0      	b.n	800735c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80ad 	beq.w	8007360 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
 8007212:	e016      	b.n	8007242 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007214:	7bfa      	ldrb	r2, [r7, #15]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	32de      	adds	r2, #222	@ 0xde
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	791a      	ldrb	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007226:	429a      	cmp	r2, r3
 8007228:	d108      	bne.n	800723c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800722a:	7bfa      	ldrb	r2, [r7, #15]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	32de      	adds	r2, #222	@ 0xde
 8007230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800723a:	e005      	b.n	8007248 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	3301      	adds	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0e5      	beq.n	8007214 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2206      	movs	r2, #6
 8007268:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007270:	2103      	movs	r1, #3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007276:	e073      	b.n	8007360 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e06f      	b.n	8007360 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e06b      	b.n	8007360 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220b      	movs	r2, #11
 80072ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072b0:	e058      	b.n	8007364 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d154      	bne.n	8007364 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220d      	movs	r2, #13
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e050      	b.n	8007364 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e04c      	b.n	8007364 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d049      	beq.n	8007368 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      }
      break;
 80072e0:	e042      	b.n	8007368 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fd6a 	bl	8006dc4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800731e:	2105      	movs	r1, #5
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d107      	bne.n	8007340 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff fe23 	bl	8006f84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733e:	e014      	b.n	800736a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fa97 	bl	8008874 <USBH_LL_Start>
      break;
 8007346:	e010      	b.n	800736a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007348:	bf00      	nop
 800734a:	e00e      	b.n	800736a <USBH_Process+0x3c6>
      break;
 800734c:	bf00      	nop
 800734e:	e00c      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007350:	bf00      	nop
 8007352:	e00a      	b.n	800736a <USBH_Process+0x3c6>
    break;
 8007354:	bf00      	nop
 8007356:	e008      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007358:	bf00      	nop
 800735a:	e006      	b.n	800736a <USBH_Process+0x3c6>
      break;
 800735c:	bf00      	nop
 800735e:	e004      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <USBH_Process+0x3c6>
      break;
 8007368:	bf00      	nop
  }
  return USBH_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af04      	add	r7, sp, #16
 800737a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007380:	2301      	movs	r3, #1
 8007382:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b07      	cmp	r3, #7
 800738a:	f200 81bd 	bhi.w	8007708 <USBH_HandleEnum+0x394>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <USBH_HandleEnum+0x20>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073b5 	.word	0x080073b5
 8007398:	0800746f 	.word	0x0800746f
 800739c:	080074d9 	.word	0x080074d9
 80073a0:	08007563 	.word	0x08007563
 80073a4:	080075cd 	.word	0x080075cd
 80073a8:	0800763d 	.word	0x0800763d
 80073ac:	08007683 	.word	0x08007683
 80073b0:	080076c9 	.word	0x080076c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073b4:	2108      	movs	r1, #8
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa4c 	bl	8007854 <USBH_Get_DevDesc>
 80073bc:	4603      	mov	r3, r0
 80073be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d12e      	bne.n	8007424 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7919      	ldrb	r1, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073ea:	9202      	str	r2, [sp, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	9201      	str	r2, [sp, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4603      	mov	r3, r0
 80073f4:	2280      	movs	r2, #128	@ 0x80
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 f85a 	bl	80084b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7959      	ldrb	r1, [r3, #5]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007410:	9202      	str	r2, [sp, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	9201      	str	r2, [sp, #4]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4603      	mov	r3, r0
 800741a:	2200      	movs	r2, #0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f847 	bl	80084b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007422:	e173      	b.n	800770c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b03      	cmp	r3, #3
 8007428:	f040 8170 	bne.w	800770c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007432:	3301      	adds	r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007442:	2b03      	cmp	r3, #3
 8007444:	d903      	bls.n	800744e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220d      	movs	r2, #13
 800744a:	701a      	strb	r2, [r3, #0]
      break;
 800744c:	e15e      	b.n	800770c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f87b 	bl	8008550 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 f875 	bl	8008550 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
      break;
 800746c:	e14e      	b.n	800770c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800746e:	2112      	movs	r1, #18
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9ef 	bl	8007854 <USBH_Get_DevDesc>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007486:	e143      	b.n	8007710 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b03      	cmp	r3, #3
 800748c:	f040 8140 	bne.w	8007710 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007496:	3301      	adds	r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d903      	bls.n	80074b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	220d      	movs	r2, #13
 80074ae:	701a      	strb	r2, [r3, #0]
      break;
 80074b0:	e12e      	b.n	8007710 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f849 	bl	8008550 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	791b      	ldrb	r3, [r3, #4]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f843 	bl	8008550 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
      break;
 80074d6:	e11b      	b.n	8007710 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074d8:	2101      	movs	r1, #1
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa66 	bl	80079ac <USBH_SetAddress>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d130      	bne.n	800754c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80074ea:	2002      	movs	r0, #2
 80074ec:	f001 fb26 	bl	8008b3c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2203      	movs	r2, #3
 80074fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7919      	ldrb	r1, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	4603      	mov	r3, r0
 800751c:	2280      	movs	r2, #128	@ 0x80
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 ffc6 	bl	80084b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7959      	ldrb	r1, [r3, #5]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007538:	9202      	str	r2, [sp, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	9201      	str	r2, [sp, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	2200      	movs	r2, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 ffb3 	bl	80084b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800754a:	e0e3      	b.n	8007714 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b03      	cmp	r3, #3
 8007550:	f040 80e0 	bne.w	8007714 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	220d      	movs	r2, #13
 8007558:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	705a      	strb	r2, [r3, #1]
      break;
 8007560:	e0d8      	b.n	8007714 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007562:	2109      	movs	r1, #9
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f99d 	bl	80078a4 <USBH_Get_CfgDesc>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800757a:	e0cd      	b.n	8007718 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b03      	cmp	r3, #3
 8007580:	f040 80ca 	bne.w	8007718 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800758a:	3301      	adds	r3, #1
 800758c:	b2da      	uxtb	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800759a:	2b03      	cmp	r3, #3
 800759c:	d903      	bls.n	80075a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	220d      	movs	r2, #13
 80075a2:	701a      	strb	r2, [r3, #0]
      break;
 80075a4:	e0b8      	b.n	8007718 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	795b      	ldrb	r3, [r3, #5]
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 ffcf 	bl	8008550 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	791b      	ldrb	r3, [r3, #4]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ffc9 	bl	8008550 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
      break;
 80075ca:	e0a5      	b.n	8007718 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f965 	bl	80078a4 <USBH_Get_CfgDesc>
 80075da:	4603      	mov	r3, r0
 80075dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2205      	movs	r2, #5
 80075e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ea:	e097      	b.n	800771c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f040 8094 	bne.w	800771c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800760a:	2b03      	cmp	r3, #3
 800760c:	d903      	bls.n	8007616 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220d      	movs	r2, #13
 8007612:	701a      	strb	r2, [r3, #0]
      break;
 8007614:	e082      	b.n	800771c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 ff97 	bl	8008550 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 ff91 	bl	8008550 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
      break;
 800763a:	e06f      	b.n	800771c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007642:	2b00      	cmp	r3, #0
 8007644:	d019      	beq.n	800767a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007652:	23ff      	movs	r3, #255	@ 0xff
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f949 	bl	80078ec <USBH_Get_StringDesc>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2206      	movs	r2, #6
 8007668:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800766a:	e059      	b.n	8007720 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d156      	bne.n	8007720 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2206      	movs	r2, #6
 8007676:	705a      	strb	r2, [r3, #1]
      break;
 8007678:	e052      	b.n	8007720 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2206      	movs	r2, #6
 800767e:	705a      	strb	r2, [r3, #1]
      break;
 8007680:	e04e      	b.n	8007720 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007688:	2b00      	cmp	r3, #0
 800768a:	d019      	beq.n	80076c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007698:	23ff      	movs	r3, #255	@ 0xff
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f926 	bl	80078ec <USBH_Get_StringDesc>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2207      	movs	r2, #7
 80076ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076b0:	e038      	b.n	8007724 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d135      	bne.n	8007724 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2207      	movs	r2, #7
 80076bc:	705a      	strb	r2, [r3, #1]
      break;
 80076be:	e031      	b.n	8007724 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2207      	movs	r2, #7
 80076c4:	705a      	strb	r2, [r3, #1]
      break;
 80076c6:	e02d      	b.n	8007724 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076de:	23ff      	movs	r3, #255	@ 0xff
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f903 	bl	80078ec <USBH_Get_StringDesc>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076f4:	e018      	b.n	8007728 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d115      	bne.n	8007728 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007700:	e012      	b.n	8007728 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
      break;
 8007706:	e00f      	b.n	8007728 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007708:	bf00      	nop
 800770a:	e00e      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <USBH_HandleEnum+0x3b6>
      break;
 8007728:	bf00      	nop
  }
  return Status;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f804 	bl	8007776 <USBH_HandleSof>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b0b      	cmp	r3, #11
 8007786:	d10a      	bne.n	800779e <USBH_HandleSof+0x28>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
  }
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80077b6:	bf00      	nop
}
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80077d2:	bf00      	nop
}
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f83c 	bl	80088aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fe89 	bl	8008550 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	795b      	ldrb	r3, [r3, #5]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fe83 	bl	8008550 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	b29b      	uxth	r3, r3
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007872:	2100      	movs	r1, #0
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f864 	bl	8007942 <USBH_GetDescriptor>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	b292      	uxth	r2, r2
 8007894:	4619      	mov	r1, r3
 8007896:	f000 f919 	bl	8007acc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	331c      	adds	r3, #28
 80078b4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078c0:	2100      	movs	r1, #0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f83d 	bl	8007942 <USBH_GetDescriptor>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d107      	bne.n	80078e2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80078d2:	887b      	ldrh	r3, [r7, #2]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f985 	bl	8007be8 <USBH_ParseCfgDesc>
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	461a      	mov	r2, r3
 80078f8:	460b      	mov	r3, r1
 80078fa:	72fb      	strb	r3, [r7, #11]
 80078fc:	4613      	mov	r3, r2
 80078fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007908:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	460b      	mov	r3, r1
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f812 	bl	8007942 <USBH_GetDescriptor>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d107      	bne.n	8007938 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800792e:	893a      	ldrh	r2, [r7, #8]
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fb1e 	bl	8007f74 <USBH_ParseStringDesc>
  }

  return status;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	72fb      	strb	r3, [r7, #11]
 8007950:	4613      	mov	r3, r2
 8007952:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	789b      	ldrb	r3, [r3, #2]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d11c      	bne.n	8007996 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2206      	movs	r2, #6
 800796c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	893a      	ldrh	r2, [r7, #8]
 8007972:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007974:	893b      	ldrh	r3, [r7, #8]
 8007976:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800797a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800797e:	d104      	bne.n	800798a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f240 4209 	movw	r2, #1033	@ 0x409
 8007986:	829a      	strh	r2, [r3, #20]
 8007988:	e002      	b.n	8007990 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8b3a      	ldrh	r2, [r7, #24]
 8007994:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007996:	8b3b      	ldrh	r3, [r7, #24]
 8007998:	461a      	mov	r2, r3
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fb36 	bl	800800e <USBH_CtlReq>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	789b      	ldrb	r3, [r3, #2]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10f      	bne.n	80079e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2205      	movs	r2, #5
 80079ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fb12 	bl	800800e <USBH_CtlReq>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	789b      	ldrb	r3, [r3, #2]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d10e      	bne.n	8007a26 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2209      	movs	r2, #9
 8007a12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	887a      	ldrh	r2, [r7, #2]
 8007a18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 faef 	bl	800800e <USBH_CtlReq>
 8007a30:	4603      	mov	r3, r0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	789b      	ldrb	r3, [r3, #2]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d10f      	bne.n	8007a6e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2203      	movs	r2, #3
 8007a58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2100      	movs	r1, #0
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 facb 	bl	800800e <USBH_CtlReq>
 8007a78:	4603      	mov	r3, r0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	789b      	ldrb	r3, [r3, #2]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10f      	bne.n	8007ab6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 faa7 	bl	800800e <USBH_CtlReq>
 8007ac0:	4603      	mov	r3, r0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	785a      	ldrb	r2, [r3, #1]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3302      	adds	r3, #2
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	3303      	adds	r3, #3
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	791a      	ldrb	r2, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	795a      	ldrb	r2, [r3, #5]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	799a      	ldrb	r2, [r3, #6]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	79da      	ldrb	r2, [r3, #7]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	79db      	ldrb	r3, [r3, #7]
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	dc0f      	bgt.n	8007b4c <USBH_ParseDevDesc+0x80>
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	db14      	blt.n	8007b5a <USBH_ParseDevDesc+0x8e>
 8007b30:	3b08      	subs	r3, #8
 8007b32:	4a2c      	ldr	r2, [pc, #176]	@ (8007be4 <USBH_ParseDevDesc+0x118>)
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bf14      	ite	ne
 8007b40:	2301      	movne	r3, #1
 8007b42:	2300      	moveq	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <USBH_ParseDevDesc+0x84>
 8007b4a:	e006      	b.n	8007b5a <USBH_ParseDevDesc+0x8e>
 8007b4c:	2b40      	cmp	r3, #64	@ 0x40
 8007b4e:	d104      	bne.n	8007b5a <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	79da      	ldrb	r2, [r3, #7]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	71da      	strb	r2, [r3, #7]
      break;
 8007b58:	e003      	b.n	8007b62 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2240      	movs	r2, #64	@ 0x40
 8007b5e:	71da      	strb	r2, [r3, #7]
      break;
 8007b60:	bf00      	nop
  }

  if (length > 8U)
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d936      	bls.n	8007bd6 <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3309      	adds	r3, #9
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	330a      	adds	r3, #10
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	330b      	adds	r3, #11
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	330d      	adds	r3, #13
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	7b9a      	ldrb	r2, [r3, #14]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	7bda      	ldrb	r2, [r3, #15]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	7c1a      	ldrb	r2, [r3, #16]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	7c5a      	ldrb	r2, [r3, #17]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	745a      	strb	r2, [r3, #17]
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	01000101 	.word	0x01000101

08007be8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08c      	sub	sp, #48	@ 0x30
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007bfc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	785a      	ldrb	r2, [r3, #1]
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3303      	adds	r3, #3
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c42:	bf28      	it	cs
 8007c44:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	791a      	ldrb	r2, [r3, #4]
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	795a      	ldrb	r2, [r3, #5]
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	799a      	ldrb	r2, [r3, #6]
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	79da      	ldrb	r2, [r3, #7]
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	7a1a      	ldrb	r2, [r3, #8]
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b09      	cmp	r3, #9
 8007c7c:	d002      	beq.n	8007c84 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	2209      	movs	r2, #9
 8007c82:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	2b09      	cmp	r3, #9
 8007c88:	f240 809d 	bls.w	8007dc6 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c94:	e081      	b.n	8007d9a <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c96:	f107 0316 	add.w	r3, r7, #22
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c9e:	f000 f99c 	bl	8007fda <USBH_GetNextDesc>
 8007ca2:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d176      	bne.n	8007d9a <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b09      	cmp	r3, #9
 8007cb2:	d002      	beq.n	8007cba <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb6:	2209      	movs	r2, #9
 8007cb8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cbe:	221a      	movs	r2, #26
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	6a3a      	ldr	r2, [r7, #32]
 8007cc8:	4413      	add	r3, r2
 8007cca:	3302      	adds	r3, #2
 8007ccc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007cce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cd0:	69f8      	ldr	r0, [r7, #28]
 8007cd2:	f000 f87e 	bl	8007dd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ce0:	e043      	b.n	8007d6a <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ce2:	f107 0316 	add.w	r3, r7, #22
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cea:	f000 f976 	bl	8007fda <USBH_GetNextDesc>
 8007cee:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d138      	bne.n	8007d6a <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	795b      	ldrb	r3, [r3, #5]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10f      	bne.n	8007d20 <USBH_ParseCfgDesc+0x138>
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	799b      	ldrb	r3, [r3, #6]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d10b      	bne.n	8007d20 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	79db      	ldrb	r3, [r3, #7]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10f      	bne.n	8007d30 <USBH_ParseCfgDesc+0x148>
 8007d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	d00b      	beq.n	8007d30 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8007d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1a:	2209      	movs	r2, #9
 8007d1c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d1e:	e007      	b.n	8007d30 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b07      	cmp	r3, #7
 8007d26:	d004      	beq.n	8007d32 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	2207      	movs	r2, #7
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e000      	b.n	8007d32 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d30:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d36:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007d3a:	3201      	adds	r2, #1
 8007d3c:	00d2      	lsls	r2, r2, #3
 8007d3e:	211a      	movs	r1, #26
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	4413      	add	r3, r2
 8007d46:	3308      	adds	r3, #8
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d52:	69b9      	ldr	r1, [r7, #24]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f86b 	bl	8007e30 <USBH_ParseEPDesc>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007d60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d64:	3301      	adds	r3, #1
 8007d66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d204      	bcs.n	8007d80 <USBH_ParseCfgDesc+0x198>
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	885a      	ldrh	r2, [r3, #2]
 8007d7a:	8afb      	ldrh	r3, [r7, #22]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d8b0      	bhi.n	8007ce2 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	791b      	ldrb	r3, [r3, #4]
 8007d84:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d201      	bcs.n	8007d90 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e01c      	b.n	8007dca <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8007d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d94:	3301      	adds	r3, #1
 8007d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d805      	bhi.n	8007dae <USBH_ParseCfgDesc+0x1c6>
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	885a      	ldrh	r2, [r3, #2]
 8007da6:	8afb      	ldrh	r3, [r7, #22]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	f63f af74 	bhi.w	8007c96 <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	bf28      	it	cs
 8007db6:	2302      	movcs	r3, #2
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d201      	bcs.n	8007dc6 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e001      	b.n	8007dca <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8007dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3730      	adds	r7, #48	@ 0x30
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	785a      	ldrb	r2, [r3, #1]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	789a      	ldrb	r2, [r3, #2]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	78da      	ldrb	r2, [r3, #3]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	791a      	ldrb	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	795a      	ldrb	r2, [r3, #5]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	799a      	ldrb	r2, [r3, #6]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	79da      	ldrb	r2, [r3, #7]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	7a1a      	ldrb	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	721a      	strb	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	785a      	ldrb	r2, [r3, #1]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	789a      	ldrb	r2, [r3, #2]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	78da      	ldrb	r2, [r3, #3]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3305      	adds	r3, #5
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	799a      	ldrb	r2, [r3, #6]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	889b      	ldrh	r3, [r3, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	75fb      	strb	r3, [r7, #23]
 8007e8e:	e031      	b.n	8007ef4 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	889b      	ldrh	r3, [r3, #4]
 8007e94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e98:	f023 0307 	bic.w	r3, r3, #7
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	889b      	ldrh	r3, [r3, #4]
 8007ea6:	b21a      	sxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3305      	adds	r3, #5
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10f      	bne.n	8007ee6 <USBH_ParseEPDesc+0xb6>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3305      	adds	r3, #5
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	b21b      	sxth	r3, r3
 8007ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ee2:	b21b      	sxth	r3, r3
 8007ee4:	e001      	b.n	8007eea <USBH_ParseEPDesc+0xba>
 8007ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eea:	4313      	orrs	r3, r2
 8007eec:	b21b      	sxth	r3, r3
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d116      	bne.n	8007f2c <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	78db      	ldrb	r3, [r3, #3]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d005      	beq.n	8007f16 <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	78db      	ldrb	r3, [r3, #3]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d127      	bne.n	8007f66 <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	799b      	ldrb	r3, [r3, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <USBH_ParseEPDesc+0xf6>
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	799b      	ldrb	r3, [r3, #6]
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d91f      	bls.n	8007f66 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007f26:	2303      	movs	r3, #3
 8007f28:	75fb      	strb	r3, [r7, #23]
 8007f2a:	e01c      	b.n	8007f66 <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	78db      	ldrb	r3, [r3, #3]
 8007f30:	f003 0303 	and.w	r3, r3, #3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10a      	bne.n	8007f4e <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	799b      	ldrb	r3, [r3, #6]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <USBH_ParseEPDesc+0x118>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	799b      	ldrb	r3, [r3, #6]
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d90e      	bls.n	8007f66 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	e00b      	b.n	8007f66 <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	78db      	ldrb	r3, [r3, #3]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d105      	bne.n	8007f66 <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	799b      	ldrb	r3, [r3, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3301      	adds	r3, #1
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d120      	bne.n	8007fce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	1e9a      	subs	r2, r3, #2
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	bf28      	it	cs
 8007f98:	4613      	movcs	r3, r2
 8007f9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	82fb      	strh	r3, [r7, #22]
 8007fa6:	e00b      	b.n	8007fc0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fa8:	8afb      	ldrh	r3, [r7, #22]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	781a      	ldrb	r2, [r3, #0]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007fba:	8afb      	ldrh	r3, [r7, #22]
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	82fb      	strh	r3, [r7, #22]
 8007fc0:	8afa      	ldrh	r2, [r7, #22]
 8007fc2:	8abb      	ldrh	r3, [r7, #20]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d3ef      	bcc.n	8007fa8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
  }
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	4413      	add	r3, r2
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008000:	68fb      	ldr	r3, [r7, #12]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b086      	sub	sp, #24
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	4613      	mov	r3, r2
 800801a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800801c:	2301      	movs	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	789b      	ldrb	r3, [r3, #2]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d002      	beq.n	800802e <USBH_CtlReq+0x20>
 8008028:	2b02      	cmp	r3, #2
 800802a:	d00f      	beq.n	800804c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800802c:	e027      	b.n	800807e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	88fa      	ldrh	r2, [r7, #6]
 8008038:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2202      	movs	r2, #2
 8008044:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008046:	2301      	movs	r3, #1
 8008048:	75fb      	strb	r3, [r7, #23]
      break;
 800804a:	e018      	b.n	800807e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f81b 	bl	8008088 <USBH_HandleControl>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <USBH_CtlReq+0x54>
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d106      	bne.n	8008070 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	761a      	strb	r2, [r3, #24]
      break;
 800806e:	e005      	b.n	800807c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d102      	bne.n	800807c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	709a      	strb	r2, [r3, #2]
      break;
 800807c:	bf00      	nop
  }
  return status;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008094:	2300      	movs	r3, #0
 8008096:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7e1b      	ldrb	r3, [r3, #24]
 800809c:	3b01      	subs	r3, #1
 800809e:	2b0a      	cmp	r3, #10
 80080a0:	f200 8156 	bhi.w	8008350 <USBH_HandleControl+0x2c8>
 80080a4:	a201      	add	r2, pc, #4	@ (adr r2, 80080ac <USBH_HandleControl+0x24>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	080080f3 	.word	0x080080f3
 80080b4:	0800815d 	.word	0x0800815d
 80080b8:	08008183 	.word	0x08008183
 80080bc:	080081bb 	.word	0x080081bb
 80080c0:	080081e5 	.word	0x080081e5
 80080c4:	08008237 	.word	0x08008237
 80080c8:	08008259 	.word	0x08008259
 80080cc:	08008295 	.word	0x08008295
 80080d0:	080082bb 	.word	0x080082bb
 80080d4:	080082f9 	.word	0x080082f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f103 0110 	add.w	r1, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	795b      	ldrb	r3, [r3, #5]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f943 	bl	8008370 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	761a      	strb	r2, [r3, #24]
      break;
 80080f0:	e139      	b.n	8008366 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	795b      	ldrb	r3, [r3, #5]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fcc5 	bl	8008a88 <USBH_LL_GetURBState>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d11e      	bne.n	8008146 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7c1b      	ldrb	r3, [r3, #16]
 800810c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008110:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	8adb      	ldrh	r3, [r3, #22]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800811a:	7b7b      	ldrb	r3, [r7, #13]
 800811c:	2b80      	cmp	r3, #128	@ 0x80
 800811e:	d103      	bne.n	8008128 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2203      	movs	r2, #3
 8008124:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008126:	e115      	b.n	8008354 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2205      	movs	r2, #5
 800812c:	761a      	strb	r2, [r3, #24]
      break;
 800812e:	e111      	b.n	8008354 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008130:	7b7b      	ldrb	r3, [r7, #13]
 8008132:	2b80      	cmp	r3, #128	@ 0x80
 8008134:	d103      	bne.n	800813e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2209      	movs	r2, #9
 800813a:	761a      	strb	r2, [r3, #24]
      break;
 800813c:	e10a      	b.n	8008354 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2207      	movs	r2, #7
 8008142:	761a      	strb	r2, [r3, #24]
      break;
 8008144:	e106      	b.n	8008354 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d003      	beq.n	8008154 <USBH_HandleControl+0xcc>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b02      	cmp	r3, #2
 8008150:	f040 8100 	bne.w	8008354 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	220b      	movs	r2, #11
 8008158:	761a      	strb	r2, [r3, #24]
      break;
 800815a:	e0fb      	b.n	8008354 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008162:	b29a      	uxth	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6899      	ldr	r1, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	899a      	ldrh	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	791b      	ldrb	r3, [r3, #4]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f93a 	bl	80083ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2204      	movs	r2, #4
 800817e:	761a      	strb	r2, [r3, #24]
      break;
 8008180:	e0f1      	b.n	8008366 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	791b      	ldrb	r3, [r3, #4]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fc7d 	bl	8008a88 <USBH_LL_GetURBState>
 800818e:	4603      	mov	r3, r0
 8008190:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d102      	bne.n	800819e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2209      	movs	r2, #9
 800819c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d102      	bne.n	80081aa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081a4:	2303      	movs	r3, #3
 80081a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081a8:	e0d6      	b.n	8008358 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	f040 80d3 	bne.w	8008358 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	220b      	movs	r2, #11
 80081b6:	761a      	strb	r2, [r3, #24]
      break;
 80081b8:	e0ce      	b.n	8008358 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6899      	ldr	r1, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	899a      	ldrh	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	795b      	ldrb	r3, [r3, #5]
 80081c6:	2001      	movs	r0, #1
 80081c8:	9000      	str	r0, [sp, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f8ea 	bl	80083a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2206      	movs	r2, #6
 80081e0:	761a      	strb	r2, [r3, #24]
      break;
 80081e2:	e0c0      	b.n	8008366 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	795b      	ldrb	r3, [r3, #5]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fc4c 	bl	8008a88 <USBH_LL_GetURBState>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d103      	bne.n	8008202 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2207      	movs	r2, #7
 80081fe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008200:	e0ac      	b.n	800835c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b05      	cmp	r3, #5
 8008206:	d105      	bne.n	8008214 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	220c      	movs	r2, #12
 800820c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800820e:	2303      	movs	r3, #3
 8008210:	73fb      	strb	r3, [r7, #15]
      break;
 8008212:	e0a3      	b.n	800835c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b02      	cmp	r3, #2
 8008218:	d103      	bne.n	8008222 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2205      	movs	r2, #5
 800821e:	761a      	strb	r2, [r3, #24]
      break;
 8008220:	e09c      	b.n	800835c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b04      	cmp	r3, #4
 8008226:	f040 8099 	bne.w	800835c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	220b      	movs	r2, #11
 800822e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008230:	2302      	movs	r3, #2
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	e092      	b.n	800835c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8d5 	bl	80083ee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2208      	movs	r2, #8
 8008254:	761a      	strb	r2, [r3, #24]

      break;
 8008256:	e086      	b.n	8008366 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fc12 	bl	8008a88 <USBH_LL_GetURBState>
 8008264:	4603      	mov	r3, r0
 8008266:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d105      	bne.n	800827a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	220d      	movs	r2, #13
 8008272:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008278:	e072      	b.n	8008360 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	2b04      	cmp	r3, #4
 800827e:	d103      	bne.n	8008288 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	220b      	movs	r2, #11
 8008284:	761a      	strb	r2, [r3, #24]
      break;
 8008286:	e06b      	b.n	8008360 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b05      	cmp	r3, #5
 800828c:	d168      	bne.n	8008360 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
      break;
 8008292:	e065      	b.n	8008360 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	795b      	ldrb	r3, [r3, #5]
 8008298:	2201      	movs	r2, #1
 800829a:	9200      	str	r2, [sp, #0]
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f87f 	bl	80083a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	220a      	movs	r2, #10
 80082b6:	761a      	strb	r2, [r3, #24]
      break;
 80082b8:	e055      	b.n	8008366 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	795b      	ldrb	r3, [r3, #5]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbe1 	bl	8008a88 <USBH_LL_GetURBState>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d105      	bne.n	80082dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220d      	movs	r2, #13
 80082d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082da:	e043      	b.n	8008364 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d103      	bne.n	80082ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2209      	movs	r2, #9
 80082e6:	761a      	strb	r2, [r3, #24]
      break;
 80082e8:	e03c      	b.n	8008364 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d139      	bne.n	8008364 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	220b      	movs	r2, #11
 80082f4:	761a      	strb	r2, [r3, #24]
      break;
 80082f6:	e035      	b.n	8008364 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7e5b      	ldrb	r3, [r3, #25]
 80082fc:	3301      	adds	r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	765a      	strb	r2, [r3, #25]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7e5b      	ldrb	r3, [r3, #25]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d806      	bhi.n	800831a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008318:	e025      	b.n	8008366 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008320:	2106      	movs	r1, #6
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	795b      	ldrb	r3, [r3, #5]
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f90c 	bl	8008550 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	791b      	ldrb	r3, [r3, #4]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f906 	bl	8008550 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800834a:	2302      	movs	r3, #2
 800834c:	73fb      	strb	r3, [r7, #15]
      break;
 800834e:	e00a      	b.n	8008366 <USBH_HandleControl+0x2de>

    default:
      break;
 8008350:	bf00      	nop
 8008352:	e008      	b.n	8008366 <USBH_HandleControl+0x2de>
      break;
 8008354:	bf00      	nop
 8008356:	e006      	b.n	8008366 <USBH_HandleControl+0x2de>
      break;
 8008358:	bf00      	nop
 800835a:	e004      	b.n	8008366 <USBH_HandleControl+0x2de>
      break;
 800835c:	bf00      	nop
 800835e:	e002      	b.n	8008366 <USBH_HandleControl+0x2de>
      break;
 8008360:	bf00      	nop
 8008362:	e000      	b.n	8008366 <USBH_HandleControl+0x2de>
      break;
 8008364:	bf00      	nop
  }

  return status;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af04      	add	r7, sp, #16
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800837e:	79f9      	ldrb	r1, [r7, #7]
 8008380:	2300      	movs	r3, #0
 8008382:	9303      	str	r3, [sp, #12]
 8008384:	2308      	movs	r3, #8
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	2300      	movs	r3, #0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2300      	movs	r3, #0
 8008392:	2200      	movs	r2, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fb46 	bl	8008a26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4611      	mov	r1, r2
 80083b0:	461a      	mov	r2, r3
 80083b2:	460b      	mov	r3, r1
 80083b4:	80fb      	strh	r3, [r7, #6]
 80083b6:	4613      	mov	r3, r2
 80083b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083c8:	7979      	ldrb	r1, [r7, #5]
 80083ca:	7e3b      	ldrb	r3, [r7, #24]
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	9302      	str	r3, [sp, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	2301      	movs	r3, #1
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	2200      	movs	r2, #0
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 fb21 	bl	8008a26 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b088      	sub	sp, #32
 80083f2:	af04      	add	r7, sp, #16
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	4611      	mov	r1, r2
 80083fa:	461a      	mov	r2, r3
 80083fc:	460b      	mov	r3, r1
 80083fe:	80fb      	strh	r3, [r7, #6]
 8008400:	4613      	mov	r3, r2
 8008402:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008404:	7979      	ldrb	r1, [r7, #5]
 8008406:	2300      	movs	r3, #0
 8008408:	9303      	str	r3, [sp, #12]
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	9302      	str	r3, [sp, #8]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	2301      	movs	r3, #1
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	2300      	movs	r3, #0
 8008418:	2201      	movs	r2, #1
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fb03 	bl	8008a26 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008420:	2300      	movs	r3, #0

}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b088      	sub	sp, #32
 800842e:	af04      	add	r7, sp, #16
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	4611      	mov	r1, r2
 8008436:	461a      	mov	r2, r3
 8008438:	460b      	mov	r3, r1
 800843a:	80fb      	strh	r3, [r7, #6]
 800843c:	4613      	mov	r3, r2
 800843e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800844e:	7979      	ldrb	r1, [r7, #5]
 8008450:	7e3b      	ldrb	r3, [r7, #24]
 8008452:	9303      	str	r3, [sp, #12]
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	9302      	str	r3, [sp, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	2301      	movs	r3, #1
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	2302      	movs	r3, #2
 8008462:	2200      	movs	r2, #0
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 fade 	bl	8008a26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af04      	add	r7, sp, #16
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4611      	mov	r1, r2
 8008480:	461a      	mov	r2, r3
 8008482:	460b      	mov	r3, r1
 8008484:	80fb      	strh	r3, [r7, #6]
 8008486:	4613      	mov	r3, r2
 8008488:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800848a:	7979      	ldrb	r1, [r7, #5]
 800848c:	2300      	movs	r3, #0
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	9302      	str	r3, [sp, #8]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	2301      	movs	r3, #1
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2302      	movs	r3, #2
 800849e:	2201      	movs	r2, #1
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fac0 	bl	8008a26 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af04      	add	r7, sp, #16
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	4603      	mov	r3, r0
 80084c0:	70fb      	strb	r3, [r7, #3]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70bb      	strb	r3, [r7, #2]
 80084c6:	4613      	mov	r3, r2
 80084c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084ca:	7878      	ldrb	r0, [r7, #1]
 80084cc:	78ba      	ldrb	r2, [r7, #2]
 80084ce:	78f9      	ldrb	r1, [r7, #3]
 80084d0:	8b3b      	ldrh	r3, [r7, #24]
 80084d2:	9302      	str	r3, [sp, #8]
 80084d4:	7d3b      	ldrb	r3, [r7, #20]
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	7c3b      	ldrb	r3, [r7, #16]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa53 	bl	800898a <USBH_LL_OpenPipe>

  return USBH_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa72 	bl	80089e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f836 	bl	800858c <USBH_GetFreePipe>
 8008520:	4603      	mov	r3, r0
 8008522:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008524:	89fb      	ldrh	r3, [r7, #14]
 8008526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800852a:	4293      	cmp	r3, r2
 800852c:	d00a      	beq.n	8008544 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	89fb      	ldrh	r3, [r7, #14]
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	33e0      	adds	r3, #224	@ 0xe0
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008544:	89fb      	ldrh	r3, [r7, #14]
 8008546:	b2db      	uxtb	r3, r3
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d80d      	bhi.n	800857e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	33e0      	adds	r3, #224	@ 0xe0
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	33e0      	adds	r3, #224	@ 0xe0
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
 800859c:	e00f      	b.n	80085be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	33e0      	adds	r3, #224	@ 0xe0
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d102      	bne.n	80085b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	e007      	b.n	80085c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	3301      	adds	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b0f      	cmp	r3, #15
 80085c2:	d9ec      	bls.n	800859e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085d8:	2201      	movs	r2, #1
 80085da:	490e      	ldr	r1, [pc, #56]	@ (8008614 <MX_USB_HOST_Init+0x40>)
 80085dc:	480e      	ldr	r0, [pc, #56]	@ (8008618 <MX_USB_HOST_Init+0x44>)
 80085de:	f7fe fbb7 	bl	8006d50 <USBH_Init>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085e8:	f7f8 fa80 	bl	8000aec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085ec:	490b      	ldr	r1, [pc, #44]	@ (800861c <MX_USB_HOST_Init+0x48>)
 80085ee:	480a      	ldr	r0, [pc, #40]	@ (8008618 <MX_USB_HOST_Init+0x44>)
 80085f0:	f7fe fc3c 	bl	8006e6c <USBH_RegisterClass>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085fa:	f7f8 fa77 	bl	8000aec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085fe:	4806      	ldr	r0, [pc, #24]	@ (8008618 <MX_USB_HOST_Init+0x44>)
 8008600:	f7fe fcc0 	bl	8006f84 <USBH_Start>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800860a:	f7f8 fa6f 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800860e:	bf00      	nop
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	08008635 	.word	0x08008635
 8008618:	20000238 	.word	0x20000238
 800861c:	2000000c 	.word	0x2000000c

08008620 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008624:	4802      	ldr	r0, [pc, #8]	@ (8008630 <MX_USB_HOST_Process+0x10>)
 8008626:	f7fe fcbd 	bl	8006fa4 <USBH_Process>
}
 800862a:	bf00      	nop
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000238 	.word	0x20000238

08008634 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	3b01      	subs	r3, #1
 8008644:	2b04      	cmp	r3, #4
 8008646:	d819      	bhi.n	800867c <USBH_UserProcess+0x48>
 8008648:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <USBH_UserProcess+0x1c>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	0800867d 	.word	0x0800867d
 8008654:	0800866d 	.word	0x0800866d
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008675 	.word	0x08008675
 8008660:	08008665 	.word	0x08008665
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008664:	4b09      	ldr	r3, [pc, #36]	@ (800868c <USBH_UserProcess+0x58>)
 8008666:	2203      	movs	r2, #3
 8008668:	701a      	strb	r2, [r3, #0]
  break;
 800866a:	e008      	b.n	800867e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <USBH_UserProcess+0x58>)
 800866e:	2202      	movs	r2, #2
 8008670:	701a      	strb	r2, [r3, #0]
  break;
 8008672:	e004      	b.n	800867e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008674:	4b05      	ldr	r3, [pc, #20]	@ (800868c <USBH_UserProcess+0x58>)
 8008676:	2201      	movs	r2, #1
 8008678:	701a      	strb	r2, [r3, #0]
  break;
 800867a:	e000      	b.n	800867e <USBH_UserProcess+0x4a>

  default:
  break;
 800867c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000610 	.word	0x20000610

08008690 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	@ 0x28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	609a      	str	r2, [r3, #8]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086b0:	d147      	bne.n	8008742 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b2:	2300      	movs	r3, #0
 80086b4:	613b      	str	r3, [r7, #16]
 80086b6:	4b25      	ldr	r3, [pc, #148]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ba:	4a24      	ldr	r2, [pc, #144]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 80086bc:	f043 0301 	orr.w	r3, r3, #1
 80086c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80086c2:	4b22      	ldr	r3, [pc, #136]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	613b      	str	r3, [r7, #16]
 80086cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	4619      	mov	r1, r3
 80086e2:	481b      	ldr	r0, [pc, #108]	@ (8008750 <HAL_HCD_MspInit+0xc0>)
 80086e4:	f7f9 f9ec 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80086ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ee:	2302      	movs	r3, #2
 80086f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f6:	2300      	movs	r3, #0
 80086f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086fa:	230a      	movs	r3, #10
 80086fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4619      	mov	r1, r3
 8008704:	4812      	ldr	r0, [pc, #72]	@ (8008750 <HAL_HCD_MspInit+0xc0>)
 8008706:	f7f9 f9db 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800870a:	4b10      	ldr	r3, [pc, #64]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 800870c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800870e:	4a0f      	ldr	r2, [pc, #60]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 8008710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008714:	6353      	str	r3, [r2, #52]	@ 0x34
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	4b0c      	ldr	r3, [pc, #48]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 800871c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871e:	4a0b      	ldr	r2, [pc, #44]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 8008720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008724:	6453      	str	r3, [r2, #68]	@ 0x44
 8008726:	4b09      	ldr	r3, [pc, #36]	@ (800874c <HAL_HCD_MspInit+0xbc>)
 8008728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008732:	2200      	movs	r2, #0
 8008734:	2100      	movs	r1, #0
 8008736:	2043      	movs	r0, #67	@ 0x43
 8008738:	f7f9 f98b 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800873c:	2043      	movs	r0, #67	@ 0x43
 800873e:	f7f9 f9a4 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008742:	bf00      	nop
 8008744:	3728      	adds	r7, #40	@ 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	40023800 	.word	0x40023800
 8008750:	40020000 	.word	0x40020000

08008754 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fff5 	bl	8007752 <USBH_LL_IncTimer>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff f82d 	bl	80077de <USBH_LL_Connect>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff f836 	bl	800780c <USBH_LL_Disconnect>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
 80087b4:	4613      	mov	r3, r2
 80087b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe ffe7 	bl	80077a6 <USBH_LL_PortEnabled>
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe ffe7 	bl	80077c2 <USBH_LL_PortDisabled>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800880a:	2b01      	cmp	r3, #1
 800880c:	d12a      	bne.n	8008864 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800880e:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <USBH_LL_Init+0x74>)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a15      	ldr	r2, [pc, #84]	@ (8008870 <USBH_LL_Init+0x74>)
 800881a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800881e:	4b14      	ldr	r3, [pc, #80]	@ (8008870 <USBH_LL_Init+0x74>)
 8008820:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008824:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008826:	4b12      	ldr	r3, [pc, #72]	@ (8008870 <USBH_LL_Init+0x74>)
 8008828:	2208      	movs	r2, #8
 800882a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800882c:	4b10      	ldr	r3, [pc, #64]	@ (8008870 <USBH_LL_Init+0x74>)
 800882e:	2201      	movs	r2, #1
 8008830:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008832:	4b0f      	ldr	r3, [pc, #60]	@ (8008870 <USBH_LL_Init+0x74>)
 8008834:	2200      	movs	r2, #0
 8008836:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008838:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <USBH_LL_Init+0x74>)
 800883a:	2202      	movs	r2, #2
 800883c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800883e:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <USBH_LL_Init+0x74>)
 8008840:	2200      	movs	r2, #0
 8008842:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008844:	480a      	ldr	r0, [pc, #40]	@ (8008870 <USBH_LL_Init+0x74>)
 8008846:	f7f9 faf0 	bl	8001e2a <HAL_HCD_Init>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008850:	f7f8 f94c 	bl	8000aec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008854:	4806      	ldr	r0, [pc, #24]	@ (8008870 <USBH_LL_Init+0x74>)
 8008856:	f7f9 fed4 	bl	8002602 <HAL_HCD_GetCurrentFrame>
 800885a:	4603      	mov	r3, r0
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fe ff68 	bl	8007734 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000614 	.word	0x20000614

08008874 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800888a:	4618      	mov	r0, r3
 800888c:	f7f9 fe43 	bl	8002516 <HAL_HCD_Start>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 f95c 	bl	8008b54 <USBH_Get_USB_Status>
 800889c:	4603      	mov	r3, r0
 800889e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7f9 fe4b 	bl	800255c <HAL_HCD_Stop>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 f941 	bl	8008b54 <USBH_Get_USB_Status>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088e8:	2301      	movs	r3, #1
 80088ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f9 fe93 	bl	800261e <HAL_HCD_GetCurrentSpeed>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d00c      	beq.n	8008918 <USBH_LL_GetSpeed+0x38>
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d80d      	bhi.n	800891e <USBH_LL_GetSpeed+0x3e>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <USBH_LL_GetSpeed+0x2c>
 8008906:	2b01      	cmp	r3, #1
 8008908:	d003      	beq.n	8008912 <USBH_LL_GetSpeed+0x32>
 800890a:	e008      	b.n	800891e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]
    break;
 8008910:	e008      	b.n	8008924 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008912:	2301      	movs	r3, #1
 8008914:	73fb      	strb	r3, [r7, #15]
    break;
 8008916:	e005      	b.n	8008924 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008918:	2302      	movs	r3, #2
 800891a:	73fb      	strb	r3, [r7, #15]
    break;
 800891c:	e002      	b.n	8008924 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
    break;
 8008922:	bf00      	nop
  }
  return  speed;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008944:	4618      	mov	r0, r3
 8008946:	f7f9 fe26 	bl	8002596 <HAL_HCD_ResetPort>
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f8ff 	bl	8008b54 <USBH_Get_USB_Status>
 8008956:	4603      	mov	r3, r0
 8008958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895a:	7bbb      	ldrb	r3, [r7, #14]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7f9 fe2d 	bl	80025da <HAL_HCD_HC_GetXferCount>
 8008980:	4603      	mov	r3, r0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800898a:	b590      	push	{r4, r7, lr}
 800898c:	b089      	sub	sp, #36	@ 0x24
 800898e:	af04      	add	r7, sp, #16
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	461a      	mov	r2, r3
 8008998:	4603      	mov	r3, r0
 800899a:	70fb      	strb	r3, [r7, #3]
 800899c:	460b      	mov	r3, r1
 800899e:	70bb      	strb	r3, [r7, #2]
 80089a0:	4613      	mov	r3, r2
 80089a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80089b2:	787c      	ldrb	r4, [r7, #1]
 80089b4:	78ba      	ldrb	r2, [r7, #2]
 80089b6:	78f9      	ldrb	r1, [r7, #3]
 80089b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	4623      	mov	r3, r4
 80089ca:	f7f9 fa90 	bl	8001eee <HAL_HCD_HC_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f8bd 	bl	8008b54 <USBH_Get_USB_Status>
 80089da:	4603      	mov	r3, r0
 80089dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089de:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd90      	pop	{r4, r7, pc}

080089e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7f9 fb00 	bl	800200c <HAL_HCD_HC_Halt>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f89e 	bl	8008b54 <USBH_Get_USB_Status>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a26:	b590      	push	{r4, r7, lr}
 8008a28:	b089      	sub	sp, #36	@ 0x24
 8008a2a:	af04      	add	r7, sp, #16
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	4608      	mov	r0, r1
 8008a30:	4611      	mov	r1, r2
 8008a32:	461a      	mov	r2, r3
 8008a34:	4603      	mov	r3, r0
 8008a36:	70fb      	strb	r3, [r7, #3]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70bb      	strb	r3, [r7, #2]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008a4e:	787c      	ldrb	r4, [r7, #1]
 8008a50:	78ba      	ldrb	r2, [r7, #2]
 8008a52:	78f9      	ldrb	r1, [r7, #3]
 8008a54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a58:	9303      	str	r3, [sp, #12]
 8008a5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a5c:	9302      	str	r3, [sp, #8]
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4623      	mov	r3, r4
 8008a6a:	f7f9 faf3 	bl	8002054 <HAL_HCD_HC_SubmitRequest>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f86d 	bl	8008b54 <USBH_Get_USB_Status>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd90      	pop	{r4, r7, pc}

08008a88 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7f9 fd87 	bl	80025b2 <HAL_HCD_HC_GetURBState>
 8008aa4:	4603      	mov	r3, r0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d103      	bne.n	8008acc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f870 	bl	8008bac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008acc:	20c8      	movs	r0, #200	@ 0xc8
 8008ace:	f7f8 faf5 	bl	80010bc <HAL_Delay>
  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008af2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	212c      	movs	r1, #44	@ 0x2c
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	333b      	adds	r3, #59	@ 0x3b
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d009      	beq.n	8008b1c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	212c      	movs	r1, #44	@ 0x2c
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4413      	add	r3, r2
 8008b14:	3354      	adds	r3, #84	@ 0x54
 8008b16:	78ba      	ldrb	r2, [r7, #2]
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	e008      	b.n	8008b2e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	212c      	movs	r1, #44	@ 0x2c
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	4413      	add	r3, r2
 8008b28:	3355      	adds	r3, #85	@ 0x55
 8008b2a:	78ba      	ldrb	r2, [r7, #2]
 8008b2c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7f8 fab9 	bl	80010bc <HAL_Delay>
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d817      	bhi.n	8008b98 <USBH_Get_USB_Status+0x44>
 8008b68:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <USBH_Get_USB_Status+0x1c>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b87 	.word	0x08008b87
 8008b78:	08008b8d 	.word	0x08008b8d
 8008b7c:	08008b93 	.word	0x08008b93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e00b      	b.n	8008b9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b86:	2302      	movs	r3, #2
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e008      	b.n	8008b9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	e005      	b.n	8008b9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b92:	2302      	movs	r3, #2
 8008b94:	73fb      	strb	r3, [r7, #15]
    break;
 8008b96:	e002      	b.n	8008b9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9c:	bf00      	nop
  }
  return usb_status;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d102      	bne.n	8008bc6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e001      	b.n	8008bca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4803      	ldr	r0, [pc, #12]	@ (8008be0 <MX_DriverVbusFS+0x34>)
 8008bd2:	f7f9 f911 	bl	8001df8 <HAL_GPIO_WritePin>
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40020800 	.word	0x40020800

08008be4 <malloc>:
 8008be4:	4b02      	ldr	r3, [pc, #8]	@ (8008bf0 <malloc+0xc>)
 8008be6:	4601      	mov	r1, r0
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	f000 b82d 	b.w	8008c48 <_malloc_r>
 8008bee:	bf00      	nop
 8008bf0:	2000002c 	.word	0x2000002c

08008bf4 <free>:
 8008bf4:	4b02      	ldr	r3, [pc, #8]	@ (8008c00 <free+0xc>)
 8008bf6:	4601      	mov	r1, r0
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	f000 b915 	b.w	8008e28 <_free_r>
 8008bfe:	bf00      	nop
 8008c00:	2000002c 	.word	0x2000002c

08008c04 <sbrk_aligned>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4e0f      	ldr	r6, [pc, #60]	@ (8008c44 <sbrk_aligned+0x40>)
 8008c08:	460c      	mov	r4, r1
 8008c0a:	6831      	ldr	r1, [r6, #0]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	b911      	cbnz	r1, 8008c16 <sbrk_aligned+0x12>
 8008c10:	f000 f8ce 	bl	8008db0 <_sbrk_r>
 8008c14:	6030      	str	r0, [r6, #0]
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 f8c9 	bl	8008db0 <_sbrk_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d103      	bne.n	8008c2a <sbrk_aligned+0x26>
 8008c22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008c26:	4620      	mov	r0, r4
 8008c28:	bd70      	pop	{r4, r5, r6, pc}
 8008c2a:	1cc4      	adds	r4, r0, #3
 8008c2c:	f024 0403 	bic.w	r4, r4, #3
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d0f8      	beq.n	8008c26 <sbrk_aligned+0x22>
 8008c34:	1a21      	subs	r1, r4, r0
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 f8ba 	bl	8008db0 <_sbrk_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d1f2      	bne.n	8008c26 <sbrk_aligned+0x22>
 8008c40:	e7ef      	b.n	8008c22 <sbrk_aligned+0x1e>
 8008c42:	bf00      	nop
 8008c44:	20000918 	.word	0x20000918

08008c48 <_malloc_r>:
 8008c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	1ccd      	adds	r5, r1, #3
 8008c4e:	f025 0503 	bic.w	r5, r5, #3
 8008c52:	3508      	adds	r5, #8
 8008c54:	2d0c      	cmp	r5, #12
 8008c56:	bf38      	it	cc
 8008c58:	250c      	movcc	r5, #12
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	db01      	blt.n	8008c64 <_malloc_r+0x1c>
 8008c60:	42a9      	cmp	r1, r5
 8008c62:	d904      	bls.n	8008c6e <_malloc_r+0x26>
 8008c64:	230c      	movs	r3, #12
 8008c66:	6033      	str	r3, [r6, #0]
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d44 <_malloc_r+0xfc>
 8008c72:	f000 f869 	bl	8008d48 <__malloc_lock>
 8008c76:	f8d8 3000 	ldr.w	r3, [r8]
 8008c7a:	461c      	mov	r4, r3
 8008c7c:	bb44      	cbnz	r4, 8008cd0 <_malloc_r+0x88>
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff ffbf 	bl	8008c04 <sbrk_aligned>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	4604      	mov	r4, r0
 8008c8a:	d158      	bne.n	8008d3e <_malloc_r+0xf6>
 8008c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c90:	4627      	mov	r7, r4
 8008c92:	2f00      	cmp	r7, #0
 8008c94:	d143      	bne.n	8008d1e <_malloc_r+0xd6>
 8008c96:	2c00      	cmp	r4, #0
 8008c98:	d04b      	beq.n	8008d32 <_malloc_r+0xea>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	eb04 0903 	add.w	r9, r4, r3
 8008ca4:	f000 f884 	bl	8008db0 <_sbrk_r>
 8008ca8:	4581      	cmp	r9, r0
 8008caa:	d142      	bne.n	8008d32 <_malloc_r+0xea>
 8008cac:	6821      	ldr	r1, [r4, #0]
 8008cae:	1a6d      	subs	r5, r5, r1
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ffa6 	bl	8008c04 <sbrk_aligned>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d03a      	beq.n	8008d32 <_malloc_r+0xea>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	442b      	add	r3, r5
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	bb62      	cbnz	r2, 8008d24 <_malloc_r+0xdc>
 8008cca:	f8c8 7000 	str.w	r7, [r8]
 8008cce:	e00f      	b.n	8008cf0 <_malloc_r+0xa8>
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	1b52      	subs	r2, r2, r5
 8008cd4:	d420      	bmi.n	8008d18 <_malloc_r+0xd0>
 8008cd6:	2a0b      	cmp	r2, #11
 8008cd8:	d917      	bls.n	8008d0a <_malloc_r+0xc2>
 8008cda:	1961      	adds	r1, r4, r5
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	6025      	str	r5, [r4, #0]
 8008ce0:	bf18      	it	ne
 8008ce2:	6059      	strne	r1, [r3, #4]
 8008ce4:	6863      	ldr	r3, [r4, #4]
 8008ce6:	bf08      	it	eq
 8008ce8:	f8c8 1000 	streq.w	r1, [r8]
 8008cec:	5162      	str	r2, [r4, r5]
 8008cee:	604b      	str	r3, [r1, #4]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 f82f 	bl	8008d54 <__malloc_unlock>
 8008cf6:	f104 000b 	add.w	r0, r4, #11
 8008cfa:	1d23      	adds	r3, r4, #4
 8008cfc:	f020 0007 	bic.w	r0, r0, #7
 8008d00:	1ac2      	subs	r2, r0, r3
 8008d02:	bf1c      	itt	ne
 8008d04:	1a1b      	subne	r3, r3, r0
 8008d06:	50a3      	strne	r3, [r4, r2]
 8008d08:	e7af      	b.n	8008c6a <_malloc_r+0x22>
 8008d0a:	6862      	ldr	r2, [r4, #4]
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	bf0c      	ite	eq
 8008d10:	f8c8 2000 	streq.w	r2, [r8]
 8008d14:	605a      	strne	r2, [r3, #4]
 8008d16:	e7eb      	b.n	8008cf0 <_malloc_r+0xa8>
 8008d18:	4623      	mov	r3, r4
 8008d1a:	6864      	ldr	r4, [r4, #4]
 8008d1c:	e7ae      	b.n	8008c7c <_malloc_r+0x34>
 8008d1e:	463c      	mov	r4, r7
 8008d20:	687f      	ldr	r7, [r7, #4]
 8008d22:	e7b6      	b.n	8008c92 <_malloc_r+0x4a>
 8008d24:	461a      	mov	r2, r3
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d1fb      	bne.n	8008d24 <_malloc_r+0xdc>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	6053      	str	r3, [r2, #4]
 8008d30:	e7de      	b.n	8008cf0 <_malloc_r+0xa8>
 8008d32:	230c      	movs	r3, #12
 8008d34:	6033      	str	r3, [r6, #0]
 8008d36:	4630      	mov	r0, r6
 8008d38:	f000 f80c 	bl	8008d54 <__malloc_unlock>
 8008d3c:	e794      	b.n	8008c68 <_malloc_r+0x20>
 8008d3e:	6005      	str	r5, [r0, #0]
 8008d40:	e7d6      	b.n	8008cf0 <_malloc_r+0xa8>
 8008d42:	bf00      	nop
 8008d44:	2000091c 	.word	0x2000091c

08008d48 <__malloc_lock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__malloc_lock+0x8>)
 8008d4a:	f000 b86b 	b.w	8008e24 <__retarget_lock_acquire_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20000a5c 	.word	0x20000a5c

08008d54 <__malloc_unlock>:
 8008d54:	4801      	ldr	r0, [pc, #4]	@ (8008d5c <__malloc_unlock+0x8>)
 8008d56:	f000 b866 	b.w	8008e26 <__retarget_lock_release_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	20000a5c 	.word	0x20000a5c

08008d60 <siprintf>:
 8008d60:	b40e      	push	{r1, r2, r3}
 8008d62:	b500      	push	{lr}
 8008d64:	b09c      	sub	sp, #112	@ 0x70
 8008d66:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d68:	9002      	str	r0, [sp, #8]
 8008d6a:	9006      	str	r0, [sp, #24]
 8008d6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d70:	4809      	ldr	r0, [pc, #36]	@ (8008d98 <siprintf+0x38>)
 8008d72:	9107      	str	r1, [sp, #28]
 8008d74:	9104      	str	r1, [sp, #16]
 8008d76:	4909      	ldr	r1, [pc, #36]	@ (8008d9c <siprintf+0x3c>)
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	9105      	str	r1, [sp, #20]
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	a902      	add	r1, sp, #8
 8008d84:	f000 f8f6 	bl	8008f74 <_svfiprintf_r>
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	b01c      	add	sp, #112	@ 0x70
 8008d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d94:	b003      	add	sp, #12
 8008d96:	4770      	bx	lr
 8008d98:	2000002c 	.word	0x2000002c
 8008d9c:	ffff0208 	.word	0xffff0208

08008da0 <memset>:
 8008da0:	4402      	add	r2, r0
 8008da2:	4603      	mov	r3, r0
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d100      	bne.n	8008daa <memset+0xa>
 8008da8:	4770      	bx	lr
 8008daa:	f803 1b01 	strb.w	r1, [r3], #1
 8008dae:	e7f9      	b.n	8008da4 <memset+0x4>

08008db0 <_sbrk_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d06      	ldr	r5, [pc, #24]	@ (8008dcc <_sbrk_r+0x1c>)
 8008db4:	2300      	movs	r3, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	f7f8 f89a 	bl	8000ef4 <_sbrk>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_sbrk_r+0x1a>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_sbrk_r+0x1a>
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20000a58 	.word	0x20000a58

08008dd0 <__errno>:
 8008dd0:	4b01      	ldr	r3, [pc, #4]	@ (8008dd8 <__errno+0x8>)
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	2000002c 	.word	0x2000002c

08008ddc <__libc_init_array>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	4d0d      	ldr	r5, [pc, #52]	@ (8008e14 <__libc_init_array+0x38>)
 8008de0:	4c0d      	ldr	r4, [pc, #52]	@ (8008e18 <__libc_init_array+0x3c>)
 8008de2:	1b64      	subs	r4, r4, r5
 8008de4:	10a4      	asrs	r4, r4, #2
 8008de6:	2600      	movs	r6, #0
 8008de8:	42a6      	cmp	r6, r4
 8008dea:	d109      	bne.n	8008e00 <__libc_init_array+0x24>
 8008dec:	4d0b      	ldr	r5, [pc, #44]	@ (8008e1c <__libc_init_array+0x40>)
 8008dee:	4c0c      	ldr	r4, [pc, #48]	@ (8008e20 <__libc_init_array+0x44>)
 8008df0:	f000 fba8 	bl	8009544 <_init>
 8008df4:	1b64      	subs	r4, r4, r5
 8008df6:	10a4      	asrs	r4, r4, #2
 8008df8:	2600      	movs	r6, #0
 8008dfa:	42a6      	cmp	r6, r4
 8008dfc:	d105      	bne.n	8008e0a <__libc_init_array+0x2e>
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e04:	4798      	blx	r3
 8008e06:	3601      	adds	r6, #1
 8008e08:	e7ee      	b.n	8008de8 <__libc_init_array+0xc>
 8008e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0e:	4798      	blx	r3
 8008e10:	3601      	adds	r6, #1
 8008e12:	e7f2      	b.n	8008dfa <__libc_init_array+0x1e>
 8008e14:	080095c4 	.word	0x080095c4
 8008e18:	080095c4 	.word	0x080095c4
 8008e1c:	080095c4 	.word	0x080095c4
 8008e20:	080095c8 	.word	0x080095c8

08008e24 <__retarget_lock_acquire_recursive>:
 8008e24:	4770      	bx	lr

08008e26 <__retarget_lock_release_recursive>:
 8008e26:	4770      	bx	lr

08008e28 <_free_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d041      	beq.n	8008eb4 <_free_r+0x8c>
 8008e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e34:	1f0c      	subs	r4, r1, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfb8      	it	lt
 8008e3a:	18e4      	addlt	r4, r4, r3
 8008e3c:	f7ff ff84 	bl	8008d48 <__malloc_lock>
 8008e40:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb8 <_free_r+0x90>)
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	b933      	cbnz	r3, 8008e54 <_free_r+0x2c>
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	6014      	str	r4, [r2, #0]
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e50:	f7ff bf80 	b.w	8008d54 <__malloc_unlock>
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d908      	bls.n	8008e6a <_free_r+0x42>
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	1821      	adds	r1, r4, r0
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf01      	itttt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	1809      	addeq	r1, r1, r0
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	e7ed      	b.n	8008e46 <_free_r+0x1e>
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b10b      	cbz	r3, 8008e74 <_free_r+0x4c>
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	d9fa      	bls.n	8008e6a <_free_r+0x42>
 8008e74:	6811      	ldr	r1, [r2, #0]
 8008e76:	1850      	adds	r0, r2, r1
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d10b      	bne.n	8008e94 <_free_r+0x6c>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	4401      	add	r1, r0
 8008e80:	1850      	adds	r0, r2, r1
 8008e82:	4283      	cmp	r3, r0
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	d1e0      	bne.n	8008e4a <_free_r+0x22>
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	6053      	str	r3, [r2, #4]
 8008e8e:	4408      	add	r0, r1
 8008e90:	6010      	str	r0, [r2, #0]
 8008e92:	e7da      	b.n	8008e4a <_free_r+0x22>
 8008e94:	d902      	bls.n	8008e9c <_free_r+0x74>
 8008e96:	230c      	movs	r3, #12
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	e7d6      	b.n	8008e4a <_free_r+0x22>
 8008e9c:	6820      	ldr	r0, [r4, #0]
 8008e9e:	1821      	adds	r1, r4, r0
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	bf04      	itt	eq
 8008ea4:	6819      	ldreq	r1, [r3, #0]
 8008ea6:	685b      	ldreq	r3, [r3, #4]
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	bf04      	itt	eq
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	6054      	str	r4, [r2, #4]
 8008eb2:	e7ca      	b.n	8008e4a <_free_r+0x22>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	2000091c 	.word	0x2000091c

08008ebc <__ssputs_r>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	688e      	ldr	r6, [r1, #8]
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	42be      	cmp	r6, r7
 8008ec6:	680b      	ldr	r3, [r1, #0]
 8008ec8:	4682      	mov	sl, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4690      	mov	r8, r2
 8008ece:	d82d      	bhi.n	8008f2c <__ssputs_r+0x70>
 8008ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ed8:	d026      	beq.n	8008f28 <__ssputs_r+0x6c>
 8008eda:	6965      	ldr	r5, [r4, #20]
 8008edc:	6909      	ldr	r1, [r1, #16]
 8008ede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ee2:	eba3 0901 	sub.w	r9, r3, r1
 8008ee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eea:	1c7b      	adds	r3, r7, #1
 8008eec:	444b      	add	r3, r9
 8008eee:	106d      	asrs	r5, r5, #1
 8008ef0:	429d      	cmp	r5, r3
 8008ef2:	bf38      	it	cc
 8008ef4:	461d      	movcc	r5, r3
 8008ef6:	0553      	lsls	r3, r2, #21
 8008ef8:	d527      	bpl.n	8008f4a <__ssputs_r+0x8e>
 8008efa:	4629      	mov	r1, r5
 8008efc:	f7ff fea4 	bl	8008c48 <_malloc_r>
 8008f00:	4606      	mov	r6, r0
 8008f02:	b360      	cbz	r0, 8008f5e <__ssputs_r+0xa2>
 8008f04:	6921      	ldr	r1, [r4, #16]
 8008f06:	464a      	mov	r2, r9
 8008f08:	f000 fad8 	bl	80094bc <memcpy>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	6126      	str	r6, [r4, #16]
 8008f1a:	6165      	str	r5, [r4, #20]
 8008f1c:	444e      	add	r6, r9
 8008f1e:	eba5 0509 	sub.w	r5, r5, r9
 8008f22:	6026      	str	r6, [r4, #0]
 8008f24:	60a5      	str	r5, [r4, #8]
 8008f26:	463e      	mov	r6, r7
 8008f28:	42be      	cmp	r6, r7
 8008f2a:	d900      	bls.n	8008f2e <__ssputs_r+0x72>
 8008f2c:	463e      	mov	r6, r7
 8008f2e:	6820      	ldr	r0, [r4, #0]
 8008f30:	4632      	mov	r2, r6
 8008f32:	4641      	mov	r1, r8
 8008f34:	f000 faa8 	bl	8009488 <memmove>
 8008f38:	68a3      	ldr	r3, [r4, #8]
 8008f3a:	1b9b      	subs	r3, r3, r6
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	4433      	add	r3, r6
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	2000      	movs	r0, #0
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	f000 fac4 	bl	80094d8 <_realloc_r>
 8008f50:	4606      	mov	r6, r0
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d1e0      	bne.n	8008f18 <__ssputs_r+0x5c>
 8008f56:	6921      	ldr	r1, [r4, #16]
 8008f58:	4650      	mov	r0, sl
 8008f5a:	f7ff ff65 	bl	8008e28 <_free_r>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	f8ca 3000 	str.w	r3, [sl]
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f70:	e7e9      	b.n	8008f46 <__ssputs_r+0x8a>
	...

08008f74 <_svfiprintf_r>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	4698      	mov	r8, r3
 8008f7a:	898b      	ldrh	r3, [r1, #12]
 8008f7c:	061b      	lsls	r3, r3, #24
 8008f7e:	b09d      	sub	sp, #116	@ 0x74
 8008f80:	4607      	mov	r7, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	4614      	mov	r4, r2
 8008f86:	d510      	bpl.n	8008faa <_svfiprintf_r+0x36>
 8008f88:	690b      	ldr	r3, [r1, #16]
 8008f8a:	b973      	cbnz	r3, 8008faa <_svfiprintf_r+0x36>
 8008f8c:	2140      	movs	r1, #64	@ 0x40
 8008f8e:	f7ff fe5b 	bl	8008c48 <_malloc_r>
 8008f92:	6028      	str	r0, [r5, #0]
 8008f94:	6128      	str	r0, [r5, #16]
 8008f96:	b930      	cbnz	r0, 8008fa6 <_svfiprintf_r+0x32>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fa0:	b01d      	add	sp, #116	@ 0x74
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	2340      	movs	r3, #64	@ 0x40
 8008fa8:	616b      	str	r3, [r5, #20]
 8008faa:	2300      	movs	r3, #0
 8008fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fae:	2320      	movs	r3, #32
 8008fb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fb8:	2330      	movs	r3, #48	@ 0x30
 8008fba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009158 <_svfiprintf_r+0x1e4>
 8008fbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fc2:	f04f 0901 	mov.w	r9, #1
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	469a      	mov	sl, r3
 8008fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fce:	b10a      	cbz	r2, 8008fd4 <_svfiprintf_r+0x60>
 8008fd0:	2a25      	cmp	r2, #37	@ 0x25
 8008fd2:	d1f9      	bne.n	8008fc8 <_svfiprintf_r+0x54>
 8008fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd8:	d00b      	beq.n	8008ff2 <_svfiprintf_r+0x7e>
 8008fda:	465b      	mov	r3, fp
 8008fdc:	4622      	mov	r2, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f7ff ff6b 	bl	8008ebc <__ssputs_r>
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	f000 80a7 	beq.w	800913a <_svfiprintf_r+0x1c6>
 8008fec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fee:	445a      	add	r2, fp
 8008ff0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 809f 	beq.w	800913a <_svfiprintf_r+0x1c6>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009006:	f10a 0a01 	add.w	sl, sl, #1
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	9307      	str	r3, [sp, #28]
 800900e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009012:	931a      	str	r3, [sp, #104]	@ 0x68
 8009014:	4654      	mov	r4, sl
 8009016:	2205      	movs	r2, #5
 8009018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901c:	484e      	ldr	r0, [pc, #312]	@ (8009158 <_svfiprintf_r+0x1e4>)
 800901e:	f7f7 f8df 	bl	80001e0 <memchr>
 8009022:	9a04      	ldr	r2, [sp, #16]
 8009024:	b9d8      	cbnz	r0, 800905e <_svfiprintf_r+0xea>
 8009026:	06d0      	lsls	r0, r2, #27
 8009028:	bf44      	itt	mi
 800902a:	2320      	movmi	r3, #32
 800902c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009030:	0711      	lsls	r1, r2, #28
 8009032:	bf44      	itt	mi
 8009034:	232b      	movmi	r3, #43	@ 0x2b
 8009036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800903a:	f89a 3000 	ldrb.w	r3, [sl]
 800903e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009040:	d015      	beq.n	800906e <_svfiprintf_r+0xfa>
 8009042:	9a07      	ldr	r2, [sp, #28]
 8009044:	4654      	mov	r4, sl
 8009046:	2000      	movs	r0, #0
 8009048:	f04f 0c0a 	mov.w	ip, #10
 800904c:	4621      	mov	r1, r4
 800904e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009052:	3b30      	subs	r3, #48	@ 0x30
 8009054:	2b09      	cmp	r3, #9
 8009056:	d94b      	bls.n	80090f0 <_svfiprintf_r+0x17c>
 8009058:	b1b0      	cbz	r0, 8009088 <_svfiprintf_r+0x114>
 800905a:	9207      	str	r2, [sp, #28]
 800905c:	e014      	b.n	8009088 <_svfiprintf_r+0x114>
 800905e:	eba0 0308 	sub.w	r3, r0, r8
 8009062:	fa09 f303 	lsl.w	r3, r9, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	46a2      	mov	sl, r4
 800906c:	e7d2      	b.n	8009014 <_svfiprintf_r+0xa0>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	1d19      	adds	r1, r3, #4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	9103      	str	r1, [sp, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfbb      	ittet	lt
 800907a:	425b      	neglt	r3, r3
 800907c:	f042 0202 	orrlt.w	r2, r2, #2
 8009080:	9307      	strge	r3, [sp, #28]
 8009082:	9307      	strlt	r3, [sp, #28]
 8009084:	bfb8      	it	lt
 8009086:	9204      	strlt	r2, [sp, #16]
 8009088:	7823      	ldrb	r3, [r4, #0]
 800908a:	2b2e      	cmp	r3, #46	@ 0x2e
 800908c:	d10a      	bne.n	80090a4 <_svfiprintf_r+0x130>
 800908e:	7863      	ldrb	r3, [r4, #1]
 8009090:	2b2a      	cmp	r3, #42	@ 0x2a
 8009092:	d132      	bne.n	80090fa <_svfiprintf_r+0x186>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	9203      	str	r2, [sp, #12]
 800909c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090a0:	3402      	adds	r4, #2
 80090a2:	9305      	str	r3, [sp, #20]
 80090a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009168 <_svfiprintf_r+0x1f4>
 80090a8:	7821      	ldrb	r1, [r4, #0]
 80090aa:	2203      	movs	r2, #3
 80090ac:	4650      	mov	r0, sl
 80090ae:	f7f7 f897 	bl	80001e0 <memchr>
 80090b2:	b138      	cbz	r0, 80090c4 <_svfiprintf_r+0x150>
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	eba0 000a 	sub.w	r0, r0, sl
 80090ba:	2240      	movs	r2, #64	@ 0x40
 80090bc:	4082      	lsls	r2, r0
 80090be:	4313      	orrs	r3, r2
 80090c0:	3401      	adds	r4, #1
 80090c2:	9304      	str	r3, [sp, #16]
 80090c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c8:	4824      	ldr	r0, [pc, #144]	@ (800915c <_svfiprintf_r+0x1e8>)
 80090ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090ce:	2206      	movs	r2, #6
 80090d0:	f7f7 f886 	bl	80001e0 <memchr>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d036      	beq.n	8009146 <_svfiprintf_r+0x1d2>
 80090d8:	4b21      	ldr	r3, [pc, #132]	@ (8009160 <_svfiprintf_r+0x1ec>)
 80090da:	bb1b      	cbnz	r3, 8009124 <_svfiprintf_r+0x1b0>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	3307      	adds	r3, #7
 80090e0:	f023 0307 	bic.w	r3, r3, #7
 80090e4:	3308      	adds	r3, #8
 80090e6:	9303      	str	r3, [sp, #12]
 80090e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ea:	4433      	add	r3, r6
 80090ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ee:	e76a      	b.n	8008fc6 <_svfiprintf_r+0x52>
 80090f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090f4:	460c      	mov	r4, r1
 80090f6:	2001      	movs	r0, #1
 80090f8:	e7a8      	b.n	800904c <_svfiprintf_r+0xd8>
 80090fa:	2300      	movs	r3, #0
 80090fc:	3401      	adds	r4, #1
 80090fe:	9305      	str	r3, [sp, #20]
 8009100:	4619      	mov	r1, r3
 8009102:	f04f 0c0a 	mov.w	ip, #10
 8009106:	4620      	mov	r0, r4
 8009108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800910c:	3a30      	subs	r2, #48	@ 0x30
 800910e:	2a09      	cmp	r2, #9
 8009110:	d903      	bls.n	800911a <_svfiprintf_r+0x1a6>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0c6      	beq.n	80090a4 <_svfiprintf_r+0x130>
 8009116:	9105      	str	r1, [sp, #20]
 8009118:	e7c4      	b.n	80090a4 <_svfiprintf_r+0x130>
 800911a:	fb0c 2101 	mla	r1, ip, r1, r2
 800911e:	4604      	mov	r4, r0
 8009120:	2301      	movs	r3, #1
 8009122:	e7f0      	b.n	8009106 <_svfiprintf_r+0x192>
 8009124:	ab03      	add	r3, sp, #12
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	462a      	mov	r2, r5
 800912a:	4b0e      	ldr	r3, [pc, #56]	@ (8009164 <_svfiprintf_r+0x1f0>)
 800912c:	a904      	add	r1, sp, #16
 800912e:	4638      	mov	r0, r7
 8009130:	f3af 8000 	nop.w
 8009134:	1c42      	adds	r2, r0, #1
 8009136:	4606      	mov	r6, r0
 8009138:	d1d6      	bne.n	80090e8 <_svfiprintf_r+0x174>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	065b      	lsls	r3, r3, #25
 800913e:	f53f af2d 	bmi.w	8008f9c <_svfiprintf_r+0x28>
 8009142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009144:	e72c      	b.n	8008fa0 <_svfiprintf_r+0x2c>
 8009146:	ab03      	add	r3, sp, #12
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	462a      	mov	r2, r5
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <_svfiprintf_r+0x1f0>)
 800914e:	a904      	add	r1, sp, #16
 8009150:	4638      	mov	r0, r7
 8009152:	f000 f879 	bl	8009248 <_printf_i>
 8009156:	e7ed      	b.n	8009134 <_svfiprintf_r+0x1c0>
 8009158:	08009588 	.word	0x08009588
 800915c:	08009592 	.word	0x08009592
 8009160:	00000000 	.word	0x00000000
 8009164:	08008ebd 	.word	0x08008ebd
 8009168:	0800958e 	.word	0x0800958e

0800916c <_printf_common>:
 800916c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	4616      	mov	r6, r2
 8009172:	4698      	mov	r8, r3
 8009174:	688a      	ldr	r2, [r1, #8]
 8009176:	690b      	ldr	r3, [r1, #16]
 8009178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800917c:	4293      	cmp	r3, r2
 800917e:	bfb8      	it	lt
 8009180:	4613      	movlt	r3, r2
 8009182:	6033      	str	r3, [r6, #0]
 8009184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009188:	4607      	mov	r7, r0
 800918a:	460c      	mov	r4, r1
 800918c:	b10a      	cbz	r2, 8009192 <_printf_common+0x26>
 800918e:	3301      	adds	r3, #1
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	0699      	lsls	r1, r3, #26
 8009196:	bf42      	ittt	mi
 8009198:	6833      	ldrmi	r3, [r6, #0]
 800919a:	3302      	addmi	r3, #2
 800919c:	6033      	strmi	r3, [r6, #0]
 800919e:	6825      	ldr	r5, [r4, #0]
 80091a0:	f015 0506 	ands.w	r5, r5, #6
 80091a4:	d106      	bne.n	80091b4 <_printf_common+0x48>
 80091a6:	f104 0a19 	add.w	sl, r4, #25
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	6832      	ldr	r2, [r6, #0]
 80091ae:	1a9b      	subs	r3, r3, r2
 80091b0:	42ab      	cmp	r3, r5
 80091b2:	dc26      	bgt.n	8009202 <_printf_common+0x96>
 80091b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	3b00      	subs	r3, #0
 80091bc:	bf18      	it	ne
 80091be:	2301      	movne	r3, #1
 80091c0:	0692      	lsls	r2, r2, #26
 80091c2:	d42b      	bmi.n	800921c <_printf_common+0xb0>
 80091c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091c8:	4641      	mov	r1, r8
 80091ca:	4638      	mov	r0, r7
 80091cc:	47c8      	blx	r9
 80091ce:	3001      	adds	r0, #1
 80091d0:	d01e      	beq.n	8009210 <_printf_common+0xa4>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	6922      	ldr	r2, [r4, #16]
 80091d6:	f003 0306 	and.w	r3, r3, #6
 80091da:	2b04      	cmp	r3, #4
 80091dc:	bf02      	ittt	eq
 80091de:	68e5      	ldreq	r5, [r4, #12]
 80091e0:	6833      	ldreq	r3, [r6, #0]
 80091e2:	1aed      	subeq	r5, r5, r3
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	bf0c      	ite	eq
 80091e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091ec:	2500      	movne	r5, #0
 80091ee:	4293      	cmp	r3, r2
 80091f0:	bfc4      	itt	gt
 80091f2:	1a9b      	subgt	r3, r3, r2
 80091f4:	18ed      	addgt	r5, r5, r3
 80091f6:	2600      	movs	r6, #0
 80091f8:	341a      	adds	r4, #26
 80091fa:	42b5      	cmp	r5, r6
 80091fc:	d11a      	bne.n	8009234 <_printf_common+0xc8>
 80091fe:	2000      	movs	r0, #0
 8009200:	e008      	b.n	8009214 <_printf_common+0xa8>
 8009202:	2301      	movs	r3, #1
 8009204:	4652      	mov	r2, sl
 8009206:	4641      	mov	r1, r8
 8009208:	4638      	mov	r0, r7
 800920a:	47c8      	blx	r9
 800920c:	3001      	adds	r0, #1
 800920e:	d103      	bne.n	8009218 <_printf_common+0xac>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009218:	3501      	adds	r5, #1
 800921a:	e7c6      	b.n	80091aa <_printf_common+0x3e>
 800921c:	18e1      	adds	r1, r4, r3
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	2030      	movs	r0, #48	@ 0x30
 8009222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009226:	4422      	add	r2, r4
 8009228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800922c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009230:	3302      	adds	r3, #2
 8009232:	e7c7      	b.n	80091c4 <_printf_common+0x58>
 8009234:	2301      	movs	r3, #1
 8009236:	4622      	mov	r2, r4
 8009238:	4641      	mov	r1, r8
 800923a:	4638      	mov	r0, r7
 800923c:	47c8      	blx	r9
 800923e:	3001      	adds	r0, #1
 8009240:	d0e6      	beq.n	8009210 <_printf_common+0xa4>
 8009242:	3601      	adds	r6, #1
 8009244:	e7d9      	b.n	80091fa <_printf_common+0x8e>
	...

08009248 <_printf_i>:
 8009248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	7e0f      	ldrb	r7, [r1, #24]
 800924e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009250:	2f78      	cmp	r7, #120	@ 0x78
 8009252:	4691      	mov	r9, r2
 8009254:	4680      	mov	r8, r0
 8009256:	460c      	mov	r4, r1
 8009258:	469a      	mov	sl, r3
 800925a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800925e:	d807      	bhi.n	8009270 <_printf_i+0x28>
 8009260:	2f62      	cmp	r7, #98	@ 0x62
 8009262:	d80a      	bhi.n	800927a <_printf_i+0x32>
 8009264:	2f00      	cmp	r7, #0
 8009266:	f000 80d2 	beq.w	800940e <_printf_i+0x1c6>
 800926a:	2f58      	cmp	r7, #88	@ 0x58
 800926c:	f000 80b9 	beq.w	80093e2 <_printf_i+0x19a>
 8009270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009278:	e03a      	b.n	80092f0 <_printf_i+0xa8>
 800927a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800927e:	2b15      	cmp	r3, #21
 8009280:	d8f6      	bhi.n	8009270 <_printf_i+0x28>
 8009282:	a101      	add	r1, pc, #4	@ (adr r1, 8009288 <_printf_i+0x40>)
 8009284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009288:	080092e1 	.word	0x080092e1
 800928c:	080092f5 	.word	0x080092f5
 8009290:	08009271 	.word	0x08009271
 8009294:	08009271 	.word	0x08009271
 8009298:	08009271 	.word	0x08009271
 800929c:	08009271 	.word	0x08009271
 80092a0:	080092f5 	.word	0x080092f5
 80092a4:	08009271 	.word	0x08009271
 80092a8:	08009271 	.word	0x08009271
 80092ac:	08009271 	.word	0x08009271
 80092b0:	08009271 	.word	0x08009271
 80092b4:	080093f5 	.word	0x080093f5
 80092b8:	0800931f 	.word	0x0800931f
 80092bc:	080093af 	.word	0x080093af
 80092c0:	08009271 	.word	0x08009271
 80092c4:	08009271 	.word	0x08009271
 80092c8:	08009417 	.word	0x08009417
 80092cc:	08009271 	.word	0x08009271
 80092d0:	0800931f 	.word	0x0800931f
 80092d4:	08009271 	.word	0x08009271
 80092d8:	08009271 	.word	0x08009271
 80092dc:	080093b7 	.word	0x080093b7
 80092e0:	6833      	ldr	r3, [r6, #0]
 80092e2:	1d1a      	adds	r2, r3, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6032      	str	r2, [r6, #0]
 80092e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092f0:	2301      	movs	r3, #1
 80092f2:	e09d      	b.n	8009430 <_printf_i+0x1e8>
 80092f4:	6833      	ldr	r3, [r6, #0]
 80092f6:	6820      	ldr	r0, [r4, #0]
 80092f8:	1d19      	adds	r1, r3, #4
 80092fa:	6031      	str	r1, [r6, #0]
 80092fc:	0606      	lsls	r6, r0, #24
 80092fe:	d501      	bpl.n	8009304 <_printf_i+0xbc>
 8009300:	681d      	ldr	r5, [r3, #0]
 8009302:	e003      	b.n	800930c <_printf_i+0xc4>
 8009304:	0645      	lsls	r5, r0, #25
 8009306:	d5fb      	bpl.n	8009300 <_printf_i+0xb8>
 8009308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800930c:	2d00      	cmp	r5, #0
 800930e:	da03      	bge.n	8009318 <_printf_i+0xd0>
 8009310:	232d      	movs	r3, #45	@ 0x2d
 8009312:	426d      	negs	r5, r5
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009318:	4859      	ldr	r0, [pc, #356]	@ (8009480 <_printf_i+0x238>)
 800931a:	230a      	movs	r3, #10
 800931c:	e011      	b.n	8009342 <_printf_i+0xfa>
 800931e:	6821      	ldr	r1, [r4, #0]
 8009320:	6833      	ldr	r3, [r6, #0]
 8009322:	0608      	lsls	r0, r1, #24
 8009324:	f853 5b04 	ldr.w	r5, [r3], #4
 8009328:	d402      	bmi.n	8009330 <_printf_i+0xe8>
 800932a:	0649      	lsls	r1, r1, #25
 800932c:	bf48      	it	mi
 800932e:	b2ad      	uxthmi	r5, r5
 8009330:	2f6f      	cmp	r7, #111	@ 0x6f
 8009332:	4853      	ldr	r0, [pc, #332]	@ (8009480 <_printf_i+0x238>)
 8009334:	6033      	str	r3, [r6, #0]
 8009336:	bf14      	ite	ne
 8009338:	230a      	movne	r3, #10
 800933a:	2308      	moveq	r3, #8
 800933c:	2100      	movs	r1, #0
 800933e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009342:	6866      	ldr	r6, [r4, #4]
 8009344:	60a6      	str	r6, [r4, #8]
 8009346:	2e00      	cmp	r6, #0
 8009348:	bfa2      	ittt	ge
 800934a:	6821      	ldrge	r1, [r4, #0]
 800934c:	f021 0104 	bicge.w	r1, r1, #4
 8009350:	6021      	strge	r1, [r4, #0]
 8009352:	b90d      	cbnz	r5, 8009358 <_printf_i+0x110>
 8009354:	2e00      	cmp	r6, #0
 8009356:	d04b      	beq.n	80093f0 <_printf_i+0x1a8>
 8009358:	4616      	mov	r6, r2
 800935a:	fbb5 f1f3 	udiv	r1, r5, r3
 800935e:	fb03 5711 	mls	r7, r3, r1, r5
 8009362:	5dc7      	ldrb	r7, [r0, r7]
 8009364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009368:	462f      	mov	r7, r5
 800936a:	42bb      	cmp	r3, r7
 800936c:	460d      	mov	r5, r1
 800936e:	d9f4      	bls.n	800935a <_printf_i+0x112>
 8009370:	2b08      	cmp	r3, #8
 8009372:	d10b      	bne.n	800938c <_printf_i+0x144>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	07df      	lsls	r7, r3, #31
 8009378:	d508      	bpl.n	800938c <_printf_i+0x144>
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	4299      	cmp	r1, r3
 8009380:	bfde      	ittt	le
 8009382:	2330      	movle	r3, #48	@ 0x30
 8009384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009388:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800938c:	1b92      	subs	r2, r2, r6
 800938e:	6122      	str	r2, [r4, #16]
 8009390:	f8cd a000 	str.w	sl, [sp]
 8009394:	464b      	mov	r3, r9
 8009396:	aa03      	add	r2, sp, #12
 8009398:	4621      	mov	r1, r4
 800939a:	4640      	mov	r0, r8
 800939c:	f7ff fee6 	bl	800916c <_printf_common>
 80093a0:	3001      	adds	r0, #1
 80093a2:	d14a      	bne.n	800943a <_printf_i+0x1f2>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093a8:	b004      	add	sp, #16
 80093aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f043 0320 	orr.w	r3, r3, #32
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	4833      	ldr	r0, [pc, #204]	@ (8009484 <_printf_i+0x23c>)
 80093b8:	2778      	movs	r7, #120	@ 0x78
 80093ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	6831      	ldr	r1, [r6, #0]
 80093c2:	061f      	lsls	r7, r3, #24
 80093c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80093c8:	d402      	bmi.n	80093d0 <_printf_i+0x188>
 80093ca:	065f      	lsls	r7, r3, #25
 80093cc:	bf48      	it	mi
 80093ce:	b2ad      	uxthmi	r5, r5
 80093d0:	6031      	str	r1, [r6, #0]
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	bf44      	itt	mi
 80093d6:	f043 0320 	orrmi.w	r3, r3, #32
 80093da:	6023      	strmi	r3, [r4, #0]
 80093dc:	b11d      	cbz	r5, 80093e6 <_printf_i+0x19e>
 80093de:	2310      	movs	r3, #16
 80093e0:	e7ac      	b.n	800933c <_printf_i+0xf4>
 80093e2:	4827      	ldr	r0, [pc, #156]	@ (8009480 <_printf_i+0x238>)
 80093e4:	e7e9      	b.n	80093ba <_printf_i+0x172>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	f023 0320 	bic.w	r3, r3, #32
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	e7f6      	b.n	80093de <_printf_i+0x196>
 80093f0:	4616      	mov	r6, r2
 80093f2:	e7bd      	b.n	8009370 <_printf_i+0x128>
 80093f4:	6833      	ldr	r3, [r6, #0]
 80093f6:	6825      	ldr	r5, [r4, #0]
 80093f8:	6961      	ldr	r1, [r4, #20]
 80093fa:	1d18      	adds	r0, r3, #4
 80093fc:	6030      	str	r0, [r6, #0]
 80093fe:	062e      	lsls	r6, r5, #24
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	d501      	bpl.n	8009408 <_printf_i+0x1c0>
 8009404:	6019      	str	r1, [r3, #0]
 8009406:	e002      	b.n	800940e <_printf_i+0x1c6>
 8009408:	0668      	lsls	r0, r5, #25
 800940a:	d5fb      	bpl.n	8009404 <_printf_i+0x1bc>
 800940c:	8019      	strh	r1, [r3, #0]
 800940e:	2300      	movs	r3, #0
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	4616      	mov	r6, r2
 8009414:	e7bc      	b.n	8009390 <_printf_i+0x148>
 8009416:	6833      	ldr	r3, [r6, #0]
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	6032      	str	r2, [r6, #0]
 800941c:	681e      	ldr	r6, [r3, #0]
 800941e:	6862      	ldr	r2, [r4, #4]
 8009420:	2100      	movs	r1, #0
 8009422:	4630      	mov	r0, r6
 8009424:	f7f6 fedc 	bl	80001e0 <memchr>
 8009428:	b108      	cbz	r0, 800942e <_printf_i+0x1e6>
 800942a:	1b80      	subs	r0, r0, r6
 800942c:	6060      	str	r0, [r4, #4]
 800942e:	6863      	ldr	r3, [r4, #4]
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	2300      	movs	r3, #0
 8009434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009438:	e7aa      	b.n	8009390 <_printf_i+0x148>
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	4632      	mov	r2, r6
 800943e:	4649      	mov	r1, r9
 8009440:	4640      	mov	r0, r8
 8009442:	47d0      	blx	sl
 8009444:	3001      	adds	r0, #1
 8009446:	d0ad      	beq.n	80093a4 <_printf_i+0x15c>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	079b      	lsls	r3, r3, #30
 800944c:	d413      	bmi.n	8009476 <_printf_i+0x22e>
 800944e:	68e0      	ldr	r0, [r4, #12]
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	4298      	cmp	r0, r3
 8009454:	bfb8      	it	lt
 8009456:	4618      	movlt	r0, r3
 8009458:	e7a6      	b.n	80093a8 <_printf_i+0x160>
 800945a:	2301      	movs	r3, #1
 800945c:	4632      	mov	r2, r6
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	47d0      	blx	sl
 8009464:	3001      	adds	r0, #1
 8009466:	d09d      	beq.n	80093a4 <_printf_i+0x15c>
 8009468:	3501      	adds	r5, #1
 800946a:	68e3      	ldr	r3, [r4, #12]
 800946c:	9903      	ldr	r1, [sp, #12]
 800946e:	1a5b      	subs	r3, r3, r1
 8009470:	42ab      	cmp	r3, r5
 8009472:	dcf2      	bgt.n	800945a <_printf_i+0x212>
 8009474:	e7eb      	b.n	800944e <_printf_i+0x206>
 8009476:	2500      	movs	r5, #0
 8009478:	f104 0619 	add.w	r6, r4, #25
 800947c:	e7f5      	b.n	800946a <_printf_i+0x222>
 800947e:	bf00      	nop
 8009480:	08009599 	.word	0x08009599
 8009484:	080095aa 	.word	0x080095aa

08009488 <memmove>:
 8009488:	4288      	cmp	r0, r1
 800948a:	b510      	push	{r4, lr}
 800948c:	eb01 0402 	add.w	r4, r1, r2
 8009490:	d902      	bls.n	8009498 <memmove+0x10>
 8009492:	4284      	cmp	r4, r0
 8009494:	4623      	mov	r3, r4
 8009496:	d807      	bhi.n	80094a8 <memmove+0x20>
 8009498:	1e43      	subs	r3, r0, #1
 800949a:	42a1      	cmp	r1, r4
 800949c:	d008      	beq.n	80094b0 <memmove+0x28>
 800949e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094a6:	e7f8      	b.n	800949a <memmove+0x12>
 80094a8:	4402      	add	r2, r0
 80094aa:	4601      	mov	r1, r0
 80094ac:	428a      	cmp	r2, r1
 80094ae:	d100      	bne.n	80094b2 <memmove+0x2a>
 80094b0:	bd10      	pop	{r4, pc}
 80094b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ba:	e7f7      	b.n	80094ac <memmove+0x24>

080094bc <memcpy>:
 80094bc:	440a      	add	r2, r1
 80094be:	4291      	cmp	r1, r2
 80094c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80094c4:	d100      	bne.n	80094c8 <memcpy+0xc>
 80094c6:	4770      	bx	lr
 80094c8:	b510      	push	{r4, lr}
 80094ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094d2:	4291      	cmp	r1, r2
 80094d4:	d1f9      	bne.n	80094ca <memcpy+0xe>
 80094d6:	bd10      	pop	{r4, pc}

080094d8 <_realloc_r>:
 80094d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	4680      	mov	r8, r0
 80094de:	4615      	mov	r5, r2
 80094e0:	460c      	mov	r4, r1
 80094e2:	b921      	cbnz	r1, 80094ee <_realloc_r+0x16>
 80094e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e8:	4611      	mov	r1, r2
 80094ea:	f7ff bbad 	b.w	8008c48 <_malloc_r>
 80094ee:	b92a      	cbnz	r2, 80094fc <_realloc_r+0x24>
 80094f0:	f7ff fc9a 	bl	8008e28 <_free_r>
 80094f4:	2400      	movs	r4, #0
 80094f6:	4620      	mov	r0, r4
 80094f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094fc:	f000 f81a 	bl	8009534 <_malloc_usable_size_r>
 8009500:	4285      	cmp	r5, r0
 8009502:	4606      	mov	r6, r0
 8009504:	d802      	bhi.n	800950c <_realloc_r+0x34>
 8009506:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800950a:	d8f4      	bhi.n	80094f6 <_realloc_r+0x1e>
 800950c:	4629      	mov	r1, r5
 800950e:	4640      	mov	r0, r8
 8009510:	f7ff fb9a 	bl	8008c48 <_malloc_r>
 8009514:	4607      	mov	r7, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d0ec      	beq.n	80094f4 <_realloc_r+0x1c>
 800951a:	42b5      	cmp	r5, r6
 800951c:	462a      	mov	r2, r5
 800951e:	4621      	mov	r1, r4
 8009520:	bf28      	it	cs
 8009522:	4632      	movcs	r2, r6
 8009524:	f7ff ffca 	bl	80094bc <memcpy>
 8009528:	4621      	mov	r1, r4
 800952a:	4640      	mov	r0, r8
 800952c:	f7ff fc7c 	bl	8008e28 <_free_r>
 8009530:	463c      	mov	r4, r7
 8009532:	e7e0      	b.n	80094f6 <_realloc_r+0x1e>

08009534 <_malloc_usable_size_r>:
 8009534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009538:	1f18      	subs	r0, r3, #4
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfbc      	itt	lt
 800953e:	580b      	ldrlt	r3, [r1, r0]
 8009540:	18c0      	addlt	r0, r0, r3
 8009542:	4770      	bx	lr

08009544 <_init>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr

08009550 <_fini>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	bf00      	nop
 8009554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009556:	bc08      	pop	{r3}
 8009558:	469e      	mov	lr, r3
 800955a:	4770      	bx	lr
