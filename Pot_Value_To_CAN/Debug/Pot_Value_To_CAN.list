
Pot_Value_To_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008b98  08008b98  00009b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb4  08008bb4  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb4  08008bb4  00009bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bbc  08008bbc  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc0  08008bc0  00009bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008bc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          000009dc  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a58  20000a58  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000175ff  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d80  00000000  00000000  000216ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00025430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecb  00000000  00000000  00026798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b74  00000000  00000000  00027663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bb4  00000000  00000000  0004d1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da315  00000000  00000000  00066d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001410a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005478  00000000  00000000  001410e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0014655c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b80 	.word	0x08008b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008b80 	.word	0x08008b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fd8a 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f87a 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f9fe 	bl	80008c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f968 	bl	800079c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f994 	bl	80007f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f9c2 	bl	8000858 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 ff00 	bl	80082d8 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 80004d8:	f000 f92a 	bl	8000730 <MX_CAN1_Init>
  MX_ADC1_Init();
 80004dc:	f000 f8d6 	bl	800068c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80004e0:	482d      	ldr	r0, [pc, #180]	@ (8000598 <main+0xe0>)
 80004e2:	f001 fad4 	bl	8001a8e <HAL_CAN_Start>
  //Activate Notification

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004e6:	2102      	movs	r1, #2
 80004e8:	482b      	ldr	r0, [pc, #172]	@ (8000598 <main+0xe0>)
 80004ea:	f001 fbef 	bl	8001ccc <HAL_CAN_ActivateNotification>

  TxHeader.DLC=2;
 80004ee:	4b2b      	ldr	r3, [pc, #172]	@ (800059c <main+0xe4>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE= CAN_ID_STD;
 80004f4:	4b29      	ldr	r3, [pc, #164]	@ (800059c <main+0xe4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA;
 80004fa:	4b28      	ldr	r3, [pc, #160]	@ (800059c <main+0xe4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  TxHeader.StdId= 0x103;
 8000500:	4b26      	ldr	r3, [pc, #152]	@ (800059c <main+0xe4>)
 8000502:	f240 1203 	movw	r2, #259	@ 0x103
 8000506:	601a      	str	r2, [r3, #0]
  //TxData[0]=100;
  //TxData[1]=200;
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000508:	f007 ff0c 	bl	8008324 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_CAN_Start(&hcan1);
 800050c:	4822      	ldr	r0, [pc, #136]	@ (8000598 <main+0xe0>)
 800050e:	f001 fabe 	bl	8001a8e <HAL_CAN_Start>
    HAL_ADC_Start(&hadc1);
 8000512:	4823      	ldr	r0, [pc, #140]	@ (80005a0 <main+0xe8>)
 8000514:	f000 fe38 	bl	8001188 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8000518:	2114      	movs	r1, #20
 800051a:	4821      	ldr	r0, [pc, #132]	@ (80005a0 <main+0xe8>)
 800051c:	f000 ff06 	bl	800132c <HAL_ADC_PollForConversion>
    Pot = HAL_ADC_GetValue(&hadc1);
 8000520:	481f      	ldr	r0, [pc, #124]	@ (80005a0 <main+0xe8>)
 8000522:	f000 ff8e 	bl	8001442 <HAL_ADC_GetValue>
 8000526:	4603      	mov	r3, r0
 8000528:	b29a      	uxth	r2, r3
 800052a:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <main+0xec>)
 800052c:	801a      	strh	r2, [r3, #0]
    TxData[0] = (Pot >> 8) & 0xFF;  // High byte (MSB)
 800052e:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <main+0xec>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	0a1b      	lsrs	r3, r3, #8
 8000534:	b29b      	uxth	r3, r3
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <main+0xf0>)
 800053a:	701a      	strb	r2, [r3, #0]
    TxData[1] = Pot & 0xFF;         // Low byte (LSB)
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <main+0xec>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <main+0xf0>)
 8000544:	705a      	strb	r2, [r3, #1]



    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <main+0xf4>)
 8000548:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <main+0xf0>)
 800054a:	4914      	ldr	r1, [pc, #80]	@ (800059c <main+0xe4>)
 800054c:	4812      	ldr	r0, [pc, #72]	@ (8000598 <main+0xe0>)
 800054e:	f001 fae2 	bl	8001b16 <HAL_CAN_AddTxMessage>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <main+0xa6>
    {
    	datacheck=1;
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <main+0xf8>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
    }


    if (datacheck)
 800055e:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <main+0xf8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d00f      	beq.n	8000586 <main+0xce>
    {
    	//Blink Led

        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Toggle LED
 8000566:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800056a:	4812      	ldr	r0, [pc, #72]	@ (80005b4 <main+0xfc>)
 800056c:	f001 fe9b 	bl	80022a6 <HAL_GPIO_TogglePin>
        HAL_Delay(100);  // Small delay for visibility
 8000570:	2064      	movs	r0, #100	@ 0x64
 8000572:	f000 fda1 	bl	80010b8 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);  // Toggle LED back
 8000576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057a:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <main+0xfc>)
 800057c:	f001 fe93 	bl	80022a6 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f000 fd99 	bl	80010b8 <HAL_Delay>
    }

    datacheck=0;
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <main+0xf8>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
    HAL_Delay(500);
 800058c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000590:	f000 fd92 	bl	80010b8 <HAL_Delay>
    MX_USB_HOST_Process();
 8000594:	e7b8      	b.n	8000508 <main+0x50>
 8000596:	bf00      	nop
 8000598:	200000e0 	.word	0x200000e0
 800059c:	200001fc 	.word	0x200001fc
 80005a0:	20000098 	.word	0x20000098
 80005a4:	20000220 	.word	0x20000220
 80005a8:	20000214 	.word	0x20000214
 80005ac:	2000021c 	.word	0x2000021c
 80005b0:	20000224 	.word	0x20000224
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	@ 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 fa4c 	bl	8008a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	@ (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	@ (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000630:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000636:	2307      	movs	r3, #7
 8000638:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f83a 	bl	80046b8 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f000 fa4d 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2105      	movs	r1, #5
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fa9b 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 fa36 	bl	8000ae8 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	@ 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <MX_ADC1_Init+0x9c>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ce:	4a17      	ldr	r2, [pc, #92]	@ (800072c <MX_ADC1_Init+0xa0>)
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006da:	2201      	movs	r2, #1
 80006dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ec:	480d      	ldr	r0, [pc, #52]	@ (8000724 <MX_ADC1_Init+0x98>)
 80006ee:	f000 fd07 	bl	8001100 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 f9f6 	bl	8000ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000704:	2301      	movs	r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_ADC1_Init+0x98>)
 800070e:	f000 fea5 	bl	800145c <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 f9e6 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000098 	.word	0x20000098
 8000728:	40012000 	.word	0x40012000
 800072c:	0f000001 	.word	0x0f000001

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <MX_CAN1_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_CAN1_Init+0x64>)
 800073c:	2215      	movs	r2, #21
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_CAN1_Init+0x64>)
 800074e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000752:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_CAN1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_CAN1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_CAN1_Init+0x64>)
 8000780:	f001 f88a 	bl	8001898 <HAL_CAN_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800078a:	f000 f9ad 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000e0 	.word	0x200000e0
 8000798:	40006400 	.word	0x40006400

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <MX_I2C1_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007da:	f003 f989 	bl	8003af0 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 f980 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000108 	.word	0x20000108
 80007f0:	40005400 	.word	0x40005400
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_I2S3_Init+0x54>)
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <MX_I2S3_Init+0x58>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_I2S3_Init+0x54>)
 8000804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000808:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <MX_I2S3_Init+0x54>)
 8000818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800081c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_I2S3_Init+0x54>)
 8000820:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <MX_I2S3_Init+0x5c>)
 8000822:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_I2S3_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_I2S3_Init+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_I2S3_Init+0x54>)
 8000838:	f003 fa9e 	bl	8003d78 <HAL_I2S_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000842:	f000 f951 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000015c 	.word	0x2000015c
 8000850:	40003c00 	.word	0x40003c00
 8000854:	00017700 	.word	0x00017700

08000858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_SPI1_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	@ (80008c0 <MX_SPI1_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_SPI1_Init+0x64>)
 8000864:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_SPI1_Init+0x64>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_SPI1_Init+0x64>)
 80008aa:	f004 fcc9 	bl	8005240 <HAL_SPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 f918 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001a4 	.word	0x200001a4
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b7c      	ldr	r3, [pc, #496]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a7b      	ldr	r2, [pc, #492]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b79      	ldr	r3, [pc, #484]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b75      	ldr	r3, [pc, #468]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a74      	ldr	r2, [pc, #464]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b72      	ldr	r3, [pc, #456]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b6e      	ldr	r3, [pc, #440]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a6d      	ldr	r2, [pc, #436]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b6b      	ldr	r3, [pc, #428]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b67      	ldr	r3, [pc, #412]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a66      	ldr	r2, [pc, #408]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b64      	ldr	r3, [pc, #400]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b60      	ldr	r3, [pc, #384]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a5f      	ldr	r2, [pc, #380]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b59      	ldr	r3, [pc, #356]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a58      	ldr	r2, [pc, #352]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b56      	ldr	r3, [pc, #344]	@ (8000ad0 <MX_GPIO_Init+0x20c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	4853      	ldr	r0, [pc, #332]	@ (8000ad4 <MX_GPIO_Init+0x210>)
 8000988:	f001 fc74 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	4851      	ldr	r0, [pc, #324]	@ (8000ad8 <MX_GPIO_Init+0x214>)
 8000992:	f001 fc6f 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000996:	2200      	movs	r2, #0
 8000998:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800099c:	484f      	ldr	r0, [pc, #316]	@ (8000adc <MX_GPIO_Init+0x218>)
 800099e:	f001 fc69 	bl	8002274 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009a2:	2308      	movs	r3, #8
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4846      	ldr	r0, [pc, #280]	@ (8000ad4 <MX_GPIO_Init+0x210>)
 80009ba:	f001 fabf 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4840      	ldr	r0, [pc, #256]	@ (8000ad8 <MX_GPIO_Init+0x214>)
 80009d6:	f001 fab1 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009da:	2308      	movs	r3, #8
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ea:	2305      	movs	r3, #5
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4838      	ldr	r0, [pc, #224]	@ (8000ad8 <MX_GPIO_Init+0x214>)
 80009f6:	f001 faa1 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4834      	ldr	r0, [pc, #208]	@ (8000ae0 <MX_GPIO_Init+0x21c>)
 8000a10:	f001 fa94 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a14:	2304      	movs	r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	482f      	ldr	r0, [pc, #188]	@ (8000ae4 <MX_GPIO_Init+0x220>)
 8000a28:	f001 fa88 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4826      	ldr	r0, [pc, #152]	@ (8000ae4 <MX_GPIO_Init+0x220>)
 8000a4a:	f001 fa77 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a52:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	481d      	ldr	r0, [pc, #116]	@ (8000adc <MX_GPIO_Init+0x218>)
 8000a68:	f001 fa68 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4817      	ldr	r0, [pc, #92]	@ (8000adc <MX_GPIO_Init+0x218>)
 8000a80:	f001 fa5c 	bl	8001f3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <MX_GPIO_Init+0x21c>)
 8000a98:	f001 fa50 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <MX_GPIO_Init+0x210>)
 8000ab2:	f001 fa43 	bl	8001f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2006      	movs	r0, #6
 8000abc:	f001 fa07 	bl	8001ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ac0:	2006      	movs	r0, #6
 8000ac2:	f001 fa20 	bl	8001f06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	@ 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b32:	2007      	movs	r0, #7
 8000b34:	f001 f9c0 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_ADC_MspInit+0x7c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d127      	bne.n	8000bb6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <HAL_ADC_MspInit+0x80>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <HAL_ADC_MspInit+0x80>)
 8000b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <HAL_ADC_MspInit+0x80>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HAL_ADC_MspInit+0x80>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <HAL_ADC_MspInit+0x80>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_ADC_MspInit+0x80>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_ADC_MspInit+0x84>)
 8000bb2:	f001 f9c3 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40012000 	.word	0x40012000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <HAL_CAN_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12b      	bne.n	8000c46 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_CAN_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <HAL_CAN_MspInit+0x88>)
 8000bf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_CAN_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_CAN_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_CAN_MspInit+0x88>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_CAN_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c26:	2303      	movs	r3, #3
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c36:	2309      	movs	r3, #9
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <HAL_CAN_MspInit+0x8c>)
 8000c42:	f001 f97b 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40006400 	.word	0x40006400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12c      	bne.n	8000cd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c9a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cac:	2304      	movs	r3, #4
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <HAL_I2C_MspInit+0x8c>)
 8000cb8:	f001 f940 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	@ 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	@ 0x38
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <HAL_I2S_MspInit+0xf0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d15a      	bne.n	8000dd2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d20:	23c0      	movs	r3, #192	@ 0xc0
 8000d22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 f947 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d38:	f7ff fed6 	bl	8000ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	4a26      	ldr	r2, [pc, #152]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4c:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	4a1f      	ldr	r2, [pc, #124]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_I2S_MspInit+0xf4>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d90:	2310      	movs	r3, #16
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da0:	2306      	movs	r3, #6
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <HAL_I2S_MspInit+0xf8>)
 8000dac:	f001 f8c6 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000db0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <HAL_I2S_MspInit+0xfc>)
 8000dce:	f001 f8b5 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	@ 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40003c00 	.word	0x40003c00
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020800 	.word	0x40020800

08000dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <HAL_SPI_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e46:	23e0      	movs	r3, #224	@ 0xe0
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e56:	2305      	movs	r3, #5
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_SPI_MspInit+0x8c>)
 8000e62:	f001 f86b 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	@ 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40013000 	.word	0x40013000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f8d1 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <OTG_FS_IRQHandler+0x10>)
 8000ee2:	f001 fc65 	bl	80027b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000060c 	.word	0x2000060c

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	@ (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f007 fdb8 	bl	8008a94 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20020000 	.word	0x20020000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	20000228 	.word	0x20000228
 8000f58:	20000a58 	.word	0x20000a58

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f86:	490e      	ldr	r1, [pc, #56]	@ (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8000fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000faa:	f7ff ffd7 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f007 fd77 	bl	8008aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fa81 	bl	80004b8 <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fc4:	08008bc4 	.word	0x08008bc4
  ldr r2, =_sbss
 8000fc8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fcc:	20000a58 	.word	0x20000a58

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 ff5b 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fd74 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 ff73 	bl	8001f22 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001054:	f000 ff3b 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	2000022c 	.word	0x2000022c

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000022c 	.word	0x2000022c

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

   while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e033      	b.n	800117e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd10 	bl	8000b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	f043 0202 	orr.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 faa4 	bl	80016a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
 800116e:	e001      	b.n	8001174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <HAL_ADC_Start+0x1a>
 800119e:	2302      	movs	r3, #2
 80011a0:	e0b2      	b.n	8001308 <HAL_ADC_Start+0x180>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d018      	beq.n	80011ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c8:	4b52      	ldr	r3, [pc, #328]	@ (8001314 <HAL_ADC_Start+0x18c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a52      	ldr	r2, [pc, #328]	@ (8001318 <HAL_ADC_Start+0x190>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9a      	lsrs	r2, r3, #18
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f9      	bne.n	80011de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d17a      	bne.n	80012ee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001222:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001236:	d106      	bne.n	8001246 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	f023 0206 	bic.w	r2, r3, #6
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44
 8001244:	e002      	b.n	800124c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001254:	4b31      	ldr	r3, [pc, #196]	@ (800131c <HAL_ADC_Start+0x194>)
 8001256:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001260:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	2b00      	cmp	r3, #0
 800126c:	d12a      	bne.n	80012c4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2b      	ldr	r2, [pc, #172]	@ (8001320 <HAL_ADC_Start+0x198>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d015      	beq.n	80012a4 <HAL_ADC_Start+0x11c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a29      	ldr	r2, [pc, #164]	@ (8001324 <HAL_ADC_Start+0x19c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d105      	bne.n	800128e <HAL_ADC_Start+0x106>
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <HAL_ADC_Start+0x194>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a25      	ldr	r2, [pc, #148]	@ (8001328 <HAL_ADC_Start+0x1a0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d136      	bne.n	8001306 <HAL_ADC_Start+0x17e>
 8001298:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_ADC_Start+0x194>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d130      	bne.n	8001306 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d129      	bne.n	8001306 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	e020      	b.n	8001306 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <HAL_ADC_Start+0x198>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d11b      	bne.n	8001306 <HAL_ADC_Start+0x17e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d114      	bne.n	8001306 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	e00b      	b.n	8001306 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000000 	.word	0x20000000
 8001318:	431bde83 	.word	0x431bde83
 800131c:	40012300 	.word	0x40012300
 8001320:	40012000 	.word	0x40012000
 8001324:	40012100 	.word	0x40012100
 8001328:	40012200 	.word	0x40012200

0800132c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001348:	d113      	bne.n	8001372 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001358:	d10b      	bne.n	8001372 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f043 0220 	orr.w	r2, r3, #32
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e063      	b.n	800143a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001372:	f7ff fe95 	bl	80010a0 <HAL_GetTick>
 8001376:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001378:	e021      	b.n	80013be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001380:	d01d      	beq.n	80013be <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_ADC_PollForConversion+0x6c>
 8001388:	f7ff fe8a 	bl	80010a0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d212      	bcs.n	80013be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d00b      	beq.n	80013be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f043 0204 	orr.w	r2, r3, #4
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e03d      	b.n	800143a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d1d6      	bne.n	800137a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 0212 	mvn.w	r2, #18
 80013d4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d123      	bne.n	8001438 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11f      	bne.n	8001438 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1c>
 8001474:	2302      	movs	r3, #2
 8001476:	e105      	b.n	8001684 <HAL_ADC_ConfigChannel+0x228>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d925      	bls.n	80014d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68d9      	ldr	r1, [r3, #12]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	3b1e      	subs	r3, #30
 800149e:	2207      	movs	r2, #7
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43da      	mvns	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	400a      	ands	r2, r1
 80014ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68d9      	ldr	r1, [r3, #12]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	4603      	mov	r3, r0
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4403      	add	r3, r0
 80014c6:	3b1e      	subs	r3, #30
 80014c8:	409a      	lsls	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	e022      	b.n	800151a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6919      	ldr	r1, [r3, #16]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	2207      	movs	r2, #7
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	400a      	ands	r2, r1
 80014f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6919      	ldr	r1, [r3, #16]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	4603      	mov	r3, r0
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4403      	add	r3, r0
 8001510:	409a      	lsls	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b06      	cmp	r3, #6
 8001520:	d824      	bhi.n	800156c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b05      	subs	r3, #5
 8001534:	221f      	movs	r2, #31
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	3b05      	subs	r3, #5
 800155e:	fa00 f203 	lsl.w	r2, r0, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
 800156a:	e04c      	b.n	8001606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d824      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b23      	subs	r3, #35	@ 0x23
 8001586:	221f      	movs	r2, #31
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43da      	mvns	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	400a      	ands	r2, r1
 8001594:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b23      	subs	r3, #35	@ 0x23
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80015bc:	e023      	b.n	8001606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	3b41      	subs	r3, #65	@ 0x41
 80015d0:	221f      	movs	r2, #31
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	400a      	ands	r2, r1
 80015de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3b41      	subs	r3, #65	@ 0x41
 80015fa:	fa00 f203 	lsl.w	r2, r0, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001606:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <HAL_ADC_ConfigChannel+0x234>)
 8001608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a21      	ldr	r2, [pc, #132]	@ (8001694 <HAL_ADC_ConfigChannel+0x238>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d109      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x1cc>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b12      	cmp	r3, #18
 800161a:	d105      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <HAL_ADC_ConfigChannel+0x238>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d123      	bne.n	800167a <HAL_ADC_ConfigChannel+0x21e>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b10      	cmp	r3, #16
 8001638:	d003      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x1e6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b11      	cmp	r3, #17
 8001640:	d11b      	bne.n	800167a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d111      	bne.n	800167a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_ADC_ConfigChannel+0x23c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a10      	ldr	r2, [pc, #64]	@ (800169c <HAL_ADC_ConfigChannel+0x240>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	0c9a      	lsrs	r2, r3, #18
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800166c:	e002      	b.n	8001674 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3b01      	subs	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f9      	bne.n	800166e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40012300 	.word	0x40012300
 8001694:	40012000 	.word	0x40012000
 8001698:	20000000 	.word	0x20000000
 800169c:	431bde83 	.word	0x431bde83

080016a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a8:	4b79      	ldr	r3, [pc, #484]	@ (8001890 <ADC_Init+0x1f0>)
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	021a      	lsls	r2, r3, #8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6899      	ldr	r1, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <ADC_Init+0x1f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d022      	beq.n	800177e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6899      	ldr	r1, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e00f      	b.n	800179e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800178c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800179c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0202 	bic.w	r2, r2, #2
 80017ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7e1b      	ldrb	r3, [r3, #24]
 80017b8:	005a      	lsls	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	3b01      	subs	r3, #1
 80017f8:	035a      	lsls	r2, r3, #13
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	e007      	b.n	8001814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001812:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	3b01      	subs	r3, #1
 8001830:	051a      	lsls	r2, r3, #20
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6899      	ldr	r1, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001856:	025a      	lsls	r2, r3, #9
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800186e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6899      	ldr	r1, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	029a      	lsls	r2, r3, #10
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40012300 	.word	0x40012300
 8001894:	0f000001 	.word	0x0f000001

08001898 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0ed      	b.n	8001a86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff f988 	bl	8000bcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff fbe8 	bl	80010a0 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d4:	f7ff fbe4 	bl	80010a0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d90b      	bls.n	80018fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0c5      	b.n	8001a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0e5      	beq.n	80018d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0202 	bic.w	r2, r2, #2
 8001916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff fbc2 	bl	80010a0 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191e:	e012      	b.n	8001946 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001920:	f7ff fbbe 	bl	80010a0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d90b      	bls.n	8001946 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2205      	movs	r2, #5
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e09f      	b.n	8001a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e5      	bne.n	8001920 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7e1b      	ldrb	r3, [r3, #24]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e5b      	ldrb	r3, [r3, #25]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e007      	b.n	80019a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7e9b      	ldrb	r3, [r3, #26]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e007      	b.n	80019d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0220 	bic.w	r2, r2, #32
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7edb      	ldrb	r3, [r3, #27]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d108      	bne.n	80019ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0210 	bic.w	r2, r2, #16
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e007      	b.n	80019fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0210 	orr.w	r2, r2, #16
 80019fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7f1b      	ldrb	r3, [r3, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d108      	bne.n	8001a16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0208 	orr.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e007      	b.n	8001a26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7f5b      	ldrb	r3, [r3, #29]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0204 	orr.w	r2, r2, #4
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e007      	b.n	8001a50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0204 	bic.w	r2, r2, #4
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	ea42 0103 	orr.w	r1, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d12e      	bne.n	8001b00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aba:	f7ff faf1 	bl	80010a0 <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ac0:	e012      	b.n	8001ae8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ac2:	f7ff faed 	bl	80010a0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d90b      	bls.n	8001ae8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2205      	movs	r2, #5
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e012      	b.n	8001b0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e5      	bne.n	8001ac2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e006      	b.n	8001b0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
  }
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b089      	sub	sp, #36	@ 0x24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d003      	beq.n	8001b42 <HAL_CAN_AddTxMessage+0x2c>
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	f040 80b8 	bne.w	8001cb2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a0 	beq.w	8001ca2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	0e1b      	lsrs	r3, r3, #24
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d907      	bls.n	8001b82 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e09e      	b.n	8001cc0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b9e:	68f9      	ldr	r1, [r7, #12]
 8001ba0:	6809      	ldr	r1, [r1, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	440b      	add	r3, r1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00f      	b.n	8001bd0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bc4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3318      	adds	r3, #24
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	440b      	add	r3, r1
 8001bce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3318      	adds	r3, #24
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	440b      	add	r3, r1
 8001be0:	3304      	adds	r3, #4
 8001be2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	7d1b      	ldrb	r3, [r3, #20]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d111      	bne.n	8001c10 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3318      	adds	r3, #24
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	6811      	ldr	r1, [r2, #0]
 8001c00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3318      	adds	r3, #24
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3307      	adds	r3, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	061a      	lsls	r2, r3, #24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3305      	adds	r3, #5
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	3204      	adds	r2, #4
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4610      	mov	r0, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	ea43 0200 	orr.w	r2, r3, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3303      	adds	r3, #3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	061a      	lsls	r2, r3, #24
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3302      	adds	r3, #2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	4313      	orrs	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	4610      	mov	r0, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	6811      	ldr	r1, [r2, #0]
 8001c6e:	ea43 0200 	orr.w	r2, r3, r0
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	440b      	add	r3, r1
 8001c78:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3318      	adds	r3, #24
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3318      	adds	r3, #24
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	440b      	add	r3, r1
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e00e      	b.n	8001cc0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e006      	b.n	8001cc0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3724      	adds	r7, #36	@ 0x24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <HAL_CAN_ActivateNotification+0x1e>
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d109      	bne.n	8001cfe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6959      	ldr	r1, [r3, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e006      	b.n	8001d0c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4907      	ldr	r1, [pc, #28]	@ (8001db4 <__NVIC_EnableIRQ+0x38>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	@ (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e98:	f7ff ff8e 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff29 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff3e 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff8e 	bl	8001e0c <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5d 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff31 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e16b      	b.n	8002230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 815a 	bne.w	800222a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80b4 	beq.w	800222a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b60      	ldr	r3, [pc, #384]	@ (8002248 <HAL_GPIO_Init+0x30c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002248 <HAL_GPIO_Init+0x30c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002248 <HAL_GPIO_Init+0x30c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a5b      	ldr	r2, [pc, #364]	@ (800224c <HAL_GPIO_Init+0x310>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a52      	ldr	r2, [pc, #328]	@ (8002250 <HAL_GPIO_Init+0x314>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <HAL_GPIO_Init+0x226>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a51      	ldr	r2, [pc, #324]	@ (8002254 <HAL_GPIO_Init+0x318>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d025      	beq.n	800215e <HAL_GPIO_Init+0x222>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <HAL_GPIO_Init+0x31c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <HAL_GPIO_Init+0x21e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	@ (800225c <HAL_GPIO_Init+0x320>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4e      	ldr	r2, [pc, #312]	@ (8002260 <HAL_GPIO_Init+0x324>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4d      	ldr	r2, [pc, #308]	@ (8002264 <HAL_GPIO_Init+0x328>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x212>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4c      	ldr	r2, [pc, #304]	@ (8002268 <HAL_GPIO_Init+0x32c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4b      	ldr	r2, [pc, #300]	@ (800226c <HAL_GPIO_Init+0x330>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x20a>
 8002142:	2307      	movs	r3, #7
 8002144:	e00e      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002146:	2308      	movs	r3, #8
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800214a:	2306      	movs	r3, #6
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	@ (800224c <HAL_GPIO_Init+0x310>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <HAL_GPIO_Init+0x334>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <HAL_GPIO_Init+0x334>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <HAL_GPIO_Init+0x334>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <HAL_GPIO_Init+0x334>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <HAL_GPIO_Init+0x334>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002270 <HAL_GPIO_Init+0x334>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_GPIO_Init+0x334>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <HAL_GPIO_Init+0x334>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae90 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40021400 	.word	0x40021400
 8002268:	40021800 	.word	0x40021800
 800226c:	40021c00 	.word	0x40021c00
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4013      	ands	r3, r2
 80022be:	041a      	lsls	r2, r3, #16
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	400b      	ands	r3, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022dc:	b08f      	sub	sp, #60	@ 0x3c
 80022de:	af0a      	add	r7, sp, #40	@ 0x28
 80022e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e054      	b.n	8002396 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f006 f844 	bl	8008394 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f883 	bl	8005436 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	687e      	ldr	r6, [r7, #4]
 8002338:	466d      	mov	r5, sp
 800233a:	f106 0410 	add.w	r4, r6, #16
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800234a:	e885 0003 	stmia.w	r5, {r0, r1}
 800234e:	1d33      	adds	r3, r6, #4
 8002350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002352:	6838      	ldr	r0, [r7, #0]
 8002354:	f002 fffd 	bl	8005352 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f87a 	bl	8005458 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	687e      	ldr	r6, [r7, #4]
 800236c:	466d      	mov	r5, sp
 800236e:	f106 0410 	add.w	r4, r6, #16
 8002372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002382:	1d33      	adds	r3, r6, #4
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f003 fa02 	bl	8005790 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800239e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800239e:	b590      	push	{r4, r7, lr}
 80023a0:	b089      	sub	sp, #36	@ 0x24
 80023a2:	af04      	add	r7, sp, #16
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	4608      	mov	r0, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	461a      	mov	r2, r3
 80023ac:	4603      	mov	r3, r0
 80023ae:	70fb      	strb	r3, [r7, #3]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70bb      	strb	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_HCD_HC_Init+0x28>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e076      	b.n	80024b4 <HAL_HCD_HC_Init+0x116>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	212c      	movs	r1, #44	@ 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	333d      	adds	r3, #61	@ 0x3d
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	212c      	movs	r1, #44	@ 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3338      	adds	r3, #56	@ 0x38
 80023ee:	787a      	ldrb	r2, [r7, #1]
 80023f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	212c      	movs	r1, #44	@ 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3340      	adds	r3, #64	@ 0x40
 8002400:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002402:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	212c      	movs	r1, #44	@ 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3339      	adds	r3, #57	@ 0x39
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	212c      	movs	r1, #44	@ 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	333f      	adds	r3, #63	@ 0x3f
 8002424:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002428:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	78ba      	ldrb	r2, [r7, #2]
 800242e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002432:	b2d0      	uxtb	r0, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	212c      	movs	r1, #44	@ 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333a      	adds	r3, #58	@ 0x3a
 8002440:	4602      	mov	r2, r0
 8002442:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002444:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da09      	bge.n	8002460 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	212c      	movs	r1, #44	@ 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	333b      	adds	r3, #59	@ 0x3b
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e008      	b.n	8002472 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	212c      	movs	r1, #44	@ 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	333b      	adds	r3, #59	@ 0x3b
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	212c      	movs	r1, #44	@ 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	333c      	adds	r3, #60	@ 0x3c
 8002480:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002484:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	787c      	ldrb	r4, [r7, #1]
 800248c:	78ba      	ldrb	r2, [r7, #2]
 800248e:	78f9      	ldrb	r1, [r7, #3]
 8002490:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4623      	mov	r3, r4
 80024a2:	f003 fafb 	bl	8005a9c <USB_HC_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}

080024bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_HCD_HC_Halt+0x1e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e00f      	b.n	80024fa <HAL_HCD_HC_Halt+0x3e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fd4b 	bl	8005f86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	70fb      	strb	r3, [r7, #3]
 8002516:	460b      	mov	r3, r1
 8002518:	70bb      	strb	r3, [r7, #2]
 800251a:	4613      	mov	r3, r2
 800251c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	212c      	movs	r1, #44	@ 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	333b      	adds	r3, #59	@ 0x3b
 800252c:	78ba      	ldrb	r2, [r7, #2]
 800252e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	@ 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	333f      	adds	r3, #63	@ 0x3f
 800253e:	787a      	ldrb	r2, [r7, #1]
 8002540:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002542:	7c3b      	ldrb	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d112      	bne.n	800256e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	212c      	movs	r1, #44	@ 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3342      	adds	r3, #66	@ 0x42
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	212c      	movs	r1, #44	@ 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	333d      	adds	r3, #61	@ 0x3d
 8002568:	7f3a      	ldrb	r2, [r7, #28]
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e008      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	212c      	movs	r1, #44	@ 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3342      	adds	r3, #66	@ 0x42
 800257c:	2202      	movs	r2, #2
 800257e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b03      	cmp	r3, #3
 8002584:	f200 80c6 	bhi.w	8002714 <HAL_HCD_HC_SubmitRequest+0x210>
 8002588:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025a1 	.word	0x080025a1
 8002594:	08002701 	.word	0x08002701
 8002598:	08002605 	.word	0x08002605
 800259c:	08002683 	.word	0x08002683
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025a0:	7c3b      	ldrb	r3, [r7, #16]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 80b8 	bne.w	8002718 <HAL_HCD_HC_SubmitRequest+0x214>
 80025a8:	78bb      	ldrb	r3, [r7, #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80b4 	bne.w	8002718 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80025b0:	8b3b      	ldrh	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	212c      	movs	r1, #44	@ 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3355      	adds	r3, #85	@ 0x55
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	212c      	movs	r1, #44	@ 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3355      	adds	r3, #85	@ 0x55
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	@ 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3342      	adds	r3, #66	@ 0x42
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025ee:	e093      	b.n	8002718 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	212c      	movs	r1, #44	@ 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3342      	adds	r3, #66	@ 0x42
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
      break;
 8002602:	e089      	b.n	8002718 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002604:	78bb      	ldrb	r3, [r7, #2]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11d      	bne.n	8002646 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	@ 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3355      	adds	r3, #85	@ 0x55
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	212c      	movs	r1, #44	@ 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3342      	adds	r3, #66	@ 0x42
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002630:	e073      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	212c      	movs	r1, #44	@ 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3342      	adds	r3, #66	@ 0x42
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
      break;
 8002644:	e069      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	@ 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3354      	adds	r3, #84	@ 0x54
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	@ 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3342      	adds	r3, #66	@ 0x42
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
      break;
 800266c:	e055      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	212c      	movs	r1, #44	@ 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3342      	adds	r3, #66	@ 0x42
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]
      break;
 8002680:	e04b      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002682:	78bb      	ldrb	r3, [r7, #2]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11d      	bne.n	80026c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	212c      	movs	r1, #44	@ 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3355      	adds	r3, #85	@ 0x55
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	212c      	movs	r1, #44	@ 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3342      	adds	r3, #66	@ 0x42
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ae:	e034      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	212c      	movs	r1, #44	@ 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3342      	adds	r3, #66	@ 0x42
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
      break;
 80026c2:	e02a      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	212c      	movs	r1, #44	@ 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3354      	adds	r3, #84	@ 0x54
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	212c      	movs	r1, #44	@ 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3342      	adds	r3, #66	@ 0x42
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
      break;
 80026ea:	e016      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	212c      	movs	r1, #44	@ 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3342      	adds	r3, #66	@ 0x42
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
      break;
 80026fe:	e00c      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	212c      	movs	r1, #44	@ 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3342      	adds	r3, #66	@ 0x42
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
      break;
 8002712:	e002      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002718:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	212c      	movs	r1, #44	@ 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3344      	adds	r3, #68	@ 0x44
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	8b3a      	ldrh	r2, [r7, #24]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	202c      	movs	r0, #44	@ 0x2c
 8002734:	fb00 f303 	mul.w	r3, r0, r3
 8002738:	440b      	add	r3, r1
 800273a:	334c      	adds	r3, #76	@ 0x4c
 800273c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	212c      	movs	r1, #44	@ 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	@ 0x60
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	212c      	movs	r1, #44	@ 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3350      	adds	r3, #80	@ 0x50
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	212c      	movs	r1, #44	@ 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3339      	adds	r3, #57	@ 0x39
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	212c      	movs	r1, #44	@ 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3361      	adds	r3, #97	@ 0x61
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	222c      	movs	r2, #44	@ 0x2c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	3338      	adds	r3, #56	@ 0x38
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	18d1      	adds	r1, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	f003 fa9e 	bl	8005ce0 <USB_HC_StartXfer>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop

080027b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 ff9f 	bl	800570a <USB_GetMode>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f040 80f6 	bne.w	80029c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 ff83 	bl	80056e4 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80ec 	beq.w	80029be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 ff7a 	bl	80056e4 <USB_ReadInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027fa:	d104      	bne.n	8002806 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002804:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 ff6a 	bl	80056e4 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800281a:	d104      	bne.n	8002826 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 ff5a 	bl	80056e4 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002836:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800283a:	d104      	bne.n	8002846 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff4a 	bl	80056e4 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d103      	bne.n	8002862 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2202      	movs	r2, #2
 8002860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f002 ff3c 	bl	80056e4 <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002876:	d11c      	bne.n	80028b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002880:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002892:	2110      	movs	r1, #16
 8002894:	6938      	ldr	r0, [r7, #16]
 8002896:	f002 fe2b 	bl	80054f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800289a:	6938      	ldr	r0, [r7, #16]
 800289c:	f002 fe5c 	bl	8005558 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 f832 	bl	8005910 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f005 fdef 	bl	8008490 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 ff14 	bl	80056e4 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c6:	d102      	bne.n	80028ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f001 f89e 	bl	8003a0a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 ff06 	bl	80056e4 <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d106      	bne.n	80028f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f005 fdb8 	bl	8008458 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2208      	movs	r2, #8
 80028ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 fef5 	bl	80056e4 <USB_ReadInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b10      	cmp	r3, #16
 8002902:	d101      	bne.n	8002908 <HAL_HCD_IRQHandler+0x158>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_HCD_IRQHandler+0x15a>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0210 	bic.w	r2, r2, #16
 800291c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ffa1 	bl	8003866 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0210 	orr.w	r2, r2, #16
 8002932:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 fed3 	bl	80056e4 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002944:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002948:	d13a      	bne.n	80029c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fb08 	bl	8005f64 <USB_HC_ReadInterrupt>
 8002954:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e025      	b.n	80029a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d018      	beq.n	80029a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002986:	d106      	bne.n	8002996 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8ab 	bl	8002aea <HCD_HC_IN_IRQHandler>
 8002994:	e005      	b.n	80029a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fbf9 	bl	8003194 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3d4      	bcc.n	800295c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ba:	615a      	str	r2, [r3, #20]
 80029bc:	e000      	b.n	80029c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80029be:	bf00      	nop
    }
  }
}
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_HCD_Start+0x16>
 80029d8:	2302      	movs	r3, #2
 80029da:	e013      	b.n	8002a04 <HAL_HCD_Start+0x3e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2101      	movs	r1, #1
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fff4 	bl	80059d8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fd0d 	bl	8005414 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_HCD_Stop+0x16>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e00d      	b.n	8002a3e <HAL_HCD_Stop+0x32>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fbe2 	bl	80061f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 ff96 	bl	8005984 <USB_ResetPort>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	212c      	movs	r1, #44	@ 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3360      	adds	r3, #96	@ 0x60
 8002a7c:	781b      	ldrb	r3, [r3, #0]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	@ 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3350      	adds	r3, #80	@ 0x50
 8002aa4:	681b      	ldr	r3, [r3, #0]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 ffda 	bl	8005a78 <USB_GetCurrentFrame>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f002 ffb5 	bl	8005a4a <USB_GetHostSpeed>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d11a      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b26:	461a      	mov	r2, r3
 8002b28:	2304      	movs	r3, #4
 8002b2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	212c      	movs	r1, #44	@ 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3361      	adds	r3, #97	@ 0x61
 8002b3a:	2206      	movs	r2, #6
 8002b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fa1c 	bl	8005f86 <USB_HC_Halt>
 8002b4e:	e0af      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b66:	d11b      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	212c      	movs	r1, #44	@ 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	@ 0x61
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 f9f4 	bl	8005f86 <USB_HC_Halt>
 8002b9e:	e087      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d109      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	6093      	str	r3, [r2, #8]
 8002bc8:	e072      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d11a      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2308      	movs	r3, #8
 8002bf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	@ 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3361      	adds	r3, #97	@ 0x61
 8002c00:	2205      	movs	r2, #5
 8002c02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 f9b9 	bl	8005f86 <USB_HC_Halt>
 8002c14:	e04c      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2c:	d11b      	bne.n	8002c66 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	@ 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3361      	adds	r3, #97	@ 0x61
 8002c50:	2208      	movs	r2, #8
 8002c52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 f991 	bl	8005f86 <USB_HC_Halt>
 8002c64:	e024      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c78:	2b80      	cmp	r3, #128	@ 0x80
 8002c7a:	d119      	bne.n	8002cb0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	212c      	movs	r1, #44	@ 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3361      	adds	r3, #97	@ 0x61
 8002c9c:	2206      	movs	r2, #6
 8002c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 f96b 	bl	8005f86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc6:	d112      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 f957 	bl	8005f86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002cec:	e24e      	b.n	800318c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 80df 	bne.w	8002ec4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	212c      	movs	r1, #44	@ 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3348      	adds	r3, #72	@ 0x48
 8002d1c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d30:	1ad2      	subs	r2, r2, r3
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	202c      	movs	r0, #44	@ 0x2c
 8002d38:	fb00 f303 	mul.w	r3, r0, r3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3350      	adds	r3, #80	@ 0x50
 8002d40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	@ 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3361      	adds	r3, #97	@ 0x61
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	212c      	movs	r1, #44	@ 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	335c      	adds	r3, #92	@ 0x5c
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	2301      	movs	r3, #1
 8002d76:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	212c      	movs	r1, #44	@ 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	333f      	adds	r3, #63	@ 0x3f
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	212c      	movs	r1, #44	@ 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	333f      	adds	r3, #63	@ 0x3f
 8002d9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d111      	bne.n	8002dc4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 f8eb 	bl	8005f86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	6093      	str	r3, [r2, #8]
 8002dc2:	e03a      	b.n	8002e3a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	@ 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	333f      	adds	r3, #63	@ 0x3f
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d009      	beq.n	8002dec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	@ 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	333f      	adds	r3, #63	@ 0x3f
 8002de6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d126      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	0151      	lsls	r1, r2, #5
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	440a      	add	r2, r1
 8002e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	212c      	movs	r1, #44	@ 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	@ 0x60
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b2d9      	uxtb	r1, r3
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	202c      	movs	r0, #44	@ 0x2c
 8002e28:	fb00 f303 	mul.w	r3, r0, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	@ 0x60
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f005 fb39 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d12b      	bne.n	8002e9a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	212c      	movs	r1, #44	@ 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3348      	adds	r3, #72	@ 0x48
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	202c      	movs	r0, #44	@ 0x2c
 8002e58:	fb00 f202 	mul.w	r2, r0, r2
 8002e5c:	440a      	add	r2, r1
 8002e5e:	3240      	adds	r2, #64	@ 0x40
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 818e 	beq.w	800318c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	212c      	movs	r1, #44	@ 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3354      	adds	r3, #84	@ 0x54
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2d8      	uxtb	r0, r3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	212c      	movs	r1, #44	@ 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3354      	adds	r3, #84	@ 0x54
 8002e94:	4602      	mov	r2, r0
 8002e96:	701a      	strb	r2, [r3, #0]
}
 8002e98:	e178      	b.n	800318c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	212c      	movs	r1, #44	@ 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3354      	adds	r3, #84	@ 0x54
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2d8      	uxtb	r0, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	212c      	movs	r1, #44	@ 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3354      	adds	r3, #84	@ 0x54
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	701a      	strb	r2, [r3, #0]
}
 8002ec2:	e163      	b.n	800318c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	f040 80f6 	bne.w	80030c8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	@ 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3361      	adds	r3, #97	@ 0x61
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d109      	bne.n	8002f04 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	212c      	movs	r1, #44	@ 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3360      	adds	r3, #96	@ 0x60
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e0c9      	b.n	8003098 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	212c      	movs	r1, #44	@ 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3361      	adds	r3, #97	@ 0x61
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d109      	bne.n	8002f2c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	@ 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3360      	adds	r3, #96	@ 0x60
 8002f26:	2205      	movs	r2, #5
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e0b5      	b.n	8003098 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	@ 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	@ 0x61
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	d009      	beq.n	8002f54 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	@ 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3361      	adds	r3, #97	@ 0x61
 8002f4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d150      	bne.n	8002ff6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	212c      	movs	r1, #44	@ 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	335c      	adds	r3, #92	@ 0x5c
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	202c      	movs	r0, #44	@ 0x2c
 8002f6c:	fb00 f303 	mul.w	r3, r0, r3
 8002f70:	440b      	add	r3, r1
 8002f72:	335c      	adds	r3, #92	@ 0x5c
 8002f74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	@ 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	335c      	adds	r3, #92	@ 0x5c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d912      	bls.n	8002fb0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	212c      	movs	r1, #44	@ 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	335c      	adds	r3, #92	@ 0x5c
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	212c      	movs	r1, #44	@ 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3360      	adds	r3, #96	@ 0x60
 8002faa:	2204      	movs	r2, #4
 8002fac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fae:	e073      	b.n	8003098 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	212c      	movs	r1, #44	@ 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3360      	adds	r3, #96	@ 0x60
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fd8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fe0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ff4:	e050      	b.n	8003098 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	212c      	movs	r1, #44	@ 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	3361      	adds	r3, #97	@ 0x61
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d122      	bne.n	8003050 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	@ 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3360      	adds	r3, #96	@ 0x60
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003032:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800303a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e023      	b.n	8003098 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	212c      	movs	r1, #44	@ 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3361      	adds	r3, #97	@ 0x61
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b07      	cmp	r3, #7
 8003062:	d119      	bne.n	8003098 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	212c      	movs	r1, #44	@ 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	335c      	adds	r3, #92	@ 0x5c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	202c      	movs	r0, #44	@ 0x2c
 800307c:	fb00 f303 	mul.w	r3, r0, r3
 8003080:	440b      	add	r3, r1
 8003082:	335c      	adds	r3, #92	@ 0x5c
 8003084:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	212c      	movs	r1, #44	@ 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3360      	adds	r3, #96	@ 0x60
 8003094:	2204      	movs	r2, #4
 8003096:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2302      	movs	r3, #2
 80030a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b2d9      	uxtb	r1, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	202c      	movs	r0, #44	@ 0x2c
 80030b4:	fb00 f303 	mul.w	r3, r0, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3360      	adds	r3, #96	@ 0x60
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f005 f9f3 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030c6:	e061      	b.n	800318c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d156      	bne.n	800318c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	212c      	movs	r1, #44	@ 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	333f      	adds	r3, #63	@ 0x3f
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d111      	bne.n	8003116 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	212c      	movs	r1, #44	@ 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	335c      	adds	r3, #92	@ 0x5c
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f002 ff39 	bl	8005f86 <USB_HC_Halt>
 8003114:	e031      	b.n	800317a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	@ 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	333f      	adds	r3, #63	@ 0x3f
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	212c      	movs	r1, #44	@ 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	333f      	adds	r3, #63	@ 0x3f
 8003138:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800313a:	2b02      	cmp	r3, #2
 800313c:	d11d      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	@ 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	335c      	adds	r3, #92	@ 0x5c
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d110      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	212c      	movs	r1, #44	@ 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3361      	adds	r3, #97	@ 0x61
 8003166:	2203      	movs	r2, #3
 8003168:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f002 ff06 	bl	8005f86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003186:	461a      	mov	r2, r3
 8003188:	2310      	movs	r3, #16
 800318a:	6093      	str	r3, [r2, #8]
}
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11a      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2304      	movs	r3, #4
 80031d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	@ 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3361      	adds	r3, #97	@ 0x61
 80031e4:	2206      	movs	r2, #6
 80031e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 fec7 	bl	8005f86 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80031f8:	e331      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b20      	cmp	r3, #32
 800320e:	d12e      	bne.n	800326e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321c:	461a      	mov	r2, r3
 800321e:	2320      	movs	r3, #32
 8003220:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	@ 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	333d      	adds	r3, #61	@ 0x3d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	f040 8313 	bne.w	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	@ 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	333d      	adds	r3, #61	@ 0x3d
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	212c      	movs	r1, #44	@ 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3360      	adds	r3, #96	@ 0x60
 8003258:	2202      	movs	r2, #2
 800325a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f002 fe8d 	bl	8005f86 <USB_HC_Halt>
}
 800326c:	e2f7      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003284:	d112      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003298:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fe6e 	bl	8005f86 <USB_HC_Halt>
}
 80032aa:	e2d8      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d140      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	212c      	movs	r1, #44	@ 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	335c      	adds	r3, #92	@ 0x5c
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d111      	bne.n	800330e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	212c      	movs	r1, #44	@ 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	333d      	adds	r3, #61	@ 0x3d
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2340      	movs	r3, #64	@ 0x40
 800330c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331a:	461a      	mov	r2, r3
 800331c:	2301      	movs	r3, #1
 800331e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	@ 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3361      	adds	r3, #97	@ 0x61
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f002 fe22 	bl	8005f86 <USB_HC_Halt>
}
 8003342:	e28c      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d12c      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	212c      	movs	r1, #44	@ 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3361      	adds	r3, #97	@ 0x61
 8003368:	2204      	movs	r2, #4
 800336a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	212c      	movs	r1, #44	@ 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	333d      	adds	r3, #61	@ 0x3d
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	212c      	movs	r1, #44	@ 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	335c      	adds	r3, #92	@ 0x5c
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fdf3 	bl	8005f86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2340      	movs	r3, #64	@ 0x40
 80033b0:	6093      	str	r3, [r2, #8]
}
 80033b2:	e254      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11a      	bne.n	8003400 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2308      	movs	r3, #8
 80033da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	212c      	movs	r1, #44	@ 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3361      	adds	r3, #97	@ 0x61
 80033ea:	2205      	movs	r2, #5
 80033ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fdc4 	bl	8005f86 <USB_HC_Halt>
}
 80033fe:	e22e      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d140      	bne.n	8003498 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	212c      	movs	r1, #44	@ 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	335c      	adds	r3, #92	@ 0x5c
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	@ 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3361      	adds	r3, #97	@ 0x61
 8003436:	2203      	movs	r2, #3
 8003438:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	212c      	movs	r1, #44	@ 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	333d      	adds	r3, #61	@ 0x3d
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d112      	bne.n	8003474 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	@ 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	333c      	adds	r3, #60	@ 0x3c
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	@ 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	333d      	adds	r3, #61	@ 0x3d
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f002 fd81 	bl	8005f86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003490:	461a      	mov	r2, r3
 8003492:	2310      	movs	r3, #16
 8003494:	6093      	str	r3, [r2, #8]
}
 8003496:	e1e2      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034aa:	2b80      	cmp	r3, #128	@ 0x80
 80034ac:	d164      	bne.n	8003578 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d111      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	212c      	movs	r1, #44	@ 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3361      	adds	r3, #97	@ 0x61
 80034c4:	2206      	movs	r2, #6
 80034c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 fd57 	bl	8005f86 <USB_HC_Halt>
 80034d8:	e044      	b.n	8003564 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	@ 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	335c      	adds	r3, #92	@ 0x5c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	202c      	movs	r0, #44	@ 0x2c
 80034f2:	fb00 f303 	mul.w	r3, r0, r3
 80034f6:	440b      	add	r3, r1
 80034f8:	335c      	adds	r3, #92	@ 0x5c
 80034fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	@ 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	335c      	adds	r3, #92	@ 0x5c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d920      	bls.n	8003552 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	@ 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	335c      	adds	r3, #92	@ 0x5c
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	212c      	movs	r1, #44	@ 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3360      	adds	r3, #96	@ 0x60
 8003530:	2204      	movs	r2, #4
 8003532:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	b2d9      	uxtb	r1, r3
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	202c      	movs	r0, #44	@ 0x2c
 800353e:	fb00 f303 	mul.w	r3, r0, r3
 8003542:	4413      	add	r3, r2
 8003544:	3360      	adds	r3, #96	@ 0x60
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f004 ffae 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003550:	e008      	b.n	8003564 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	212c      	movs	r1, #44	@ 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3360      	adds	r3, #96	@ 0x60
 8003560:	2202      	movs	r2, #2
 8003562:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	2380      	movs	r3, #128	@ 0x80
 8003574:	6093      	str	r3, [r2, #8]
}
 8003576:	e172      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358e:	d11b      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	212c      	movs	r1, #44	@ 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3361      	adds	r3, #97	@ 0x61
 800359e:	2208      	movs	r2, #8
 80035a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 fcea 	bl	8005f86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035be:	461a      	mov	r2, r3
 80035c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035c4:	6093      	str	r3, [r2, #8]
}
 80035c6:	e14a      	b.n	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	f040 813f 	bne.w	800385e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	212c      	movs	r1, #44	@ 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3361      	adds	r3, #97	@ 0x61
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d17d      	bne.n	80036f0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	212c      	movs	r1, #44	@ 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3360      	adds	r3, #96	@ 0x60
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	@ 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	333f      	adds	r3, #63	@ 0x3f
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d00a      	beq.n	8003630 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	@ 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	333f      	adds	r3, #63	@ 0x3f
 8003628:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800362a:	2b03      	cmp	r3, #3
 800362c:	f040 8100 	bne.w	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	@ 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3355      	adds	r3, #85	@ 0x55
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f083 0301 	eor.w	r3, r3, #1
 800364c:	b2d8      	uxtb	r0, r3
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	212c      	movs	r1, #44	@ 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3355      	adds	r3, #85	@ 0x55
 800365c:	4602      	mov	r2, r0
 800365e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b01      	cmp	r3, #1
 8003666:	f040 80e3 	bne.w	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	212c      	movs	r1, #44	@ 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	334c      	adds	r3, #76	@ 0x4c
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80d8 	beq.w	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	@ 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	334c      	adds	r3, #76	@ 0x4c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	202c      	movs	r0, #44	@ 0x2c
 8003696:	fb00 f202 	mul.w	r2, r0, r2
 800369a:	440a      	add	r2, r1
 800369c:	3240      	adds	r2, #64	@ 0x40
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	3b01      	subs	r3, #1
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	202c      	movs	r0, #44	@ 0x2c
 80036aa:	fb00 f202 	mul.w	r2, r0, r2
 80036ae:	440a      	add	r2, r1
 80036b0:	3240      	adds	r2, #64	@ 0x40
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80b5 	beq.w	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	212c      	movs	r1, #44	@ 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	3355      	adds	r3, #85	@ 0x55
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	f083 0301 	eor.w	r3, r3, #1
 80036da:	b2d8      	uxtb	r0, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	212c      	movs	r1, #44	@ 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	3355      	adds	r3, #85	@ 0x55
 80036ea:	4602      	mov	r2, r0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e09f      	b.n	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	212c      	movs	r1, #44	@ 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3361      	adds	r3, #97	@ 0x61
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d109      	bne.n	8003718 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	@ 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3360      	adds	r3, #96	@ 0x60
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e08b      	b.n	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	212c      	movs	r1, #44	@ 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3361      	adds	r3, #97	@ 0x61
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d109      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	@ 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3360      	adds	r3, #96	@ 0x60
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e077      	b.n	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	212c      	movs	r1, #44	@ 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	@ 0x61
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b05      	cmp	r3, #5
 8003752:	d109      	bne.n	8003768 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	212c      	movs	r1, #44	@ 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3360      	adds	r3, #96	@ 0x60
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e063      	b.n	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	@ 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	@ 0x61
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d009      	beq.n	8003790 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	212c      	movs	r1, #44	@ 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	@ 0x61
 800378a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800378c:	2b08      	cmp	r3, #8
 800378e:	d14f      	bne.n	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	@ 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	335c      	adds	r3, #92	@ 0x5c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	202c      	movs	r0, #44	@ 0x2c
 80037a8:	fb00 f303 	mul.w	r3, r0, r3
 80037ac:	440b      	add	r3, r1
 80037ae:	335c      	adds	r3, #92	@ 0x5c
 80037b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	212c      	movs	r1, #44	@ 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	335c      	adds	r3, #92	@ 0x5c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d912      	bls.n	80037ec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	212c      	movs	r1, #44	@ 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	335c      	adds	r3, #92	@ 0x5c
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	212c      	movs	r1, #44	@ 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3360      	adds	r3, #96	@ 0x60
 80037e6:	2204      	movs	r2, #4
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e021      	b.n	8003830 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	212c      	movs	r1, #44	@ 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3360      	adds	r3, #96	@ 0x60
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003814:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800381c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	2302      	movs	r3, #2
 8003840:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	b2d9      	uxtb	r1, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	202c      	movs	r0, #44	@ 0x2c
 800384c:	fb00 f303 	mul.w	r3, r0, r3
 8003850:	4413      	add	r3, r2
 8003852:	3360      	adds	r3, #96	@ 0x60
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f004 fe27 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800385e:	bf00      	nop
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b08a      	sub	sp, #40	@ 0x28
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	0c5b      	lsrs	r3, r3, #17
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800389a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d004      	beq.n	80038ac <HCD_RXQLVL_IRQHandler+0x46>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	f000 80a9 	beq.w	80039fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038aa:	e0aa      	b.n	8003a02 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80a6 	beq.w	8003a00 <HCD_RXQLVL_IRQHandler+0x19a>
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	212c      	movs	r1, #44	@ 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3344      	adds	r3, #68	@ 0x44
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 809b 	beq.w	8003a00 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	212c      	movs	r1, #44	@ 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3350      	adds	r3, #80	@ 0x50
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	441a      	add	r2, r3
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	202c      	movs	r0, #44	@ 0x2c
 80038e4:	fb00 f303 	mul.w	r3, r0, r3
 80038e8:	440b      	add	r3, r1
 80038ea:	334c      	adds	r3, #76	@ 0x4c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d87a      	bhi.n	80039e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	212c      	movs	r1, #44	@ 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3344      	adds	r3, #68	@ 0x44
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	b292      	uxth	r2, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f001 fe92 	bl	8005634 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	212c      	movs	r1, #44	@ 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3344      	adds	r3, #68	@ 0x44
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	441a      	add	r2, r3
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	202c      	movs	r0, #44	@ 0x2c
 800392a:	fb00 f303 	mul.w	r3, r0, r3
 800392e:	440b      	add	r3, r1
 8003930:	3344      	adds	r3, #68	@ 0x44
 8003932:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	212c      	movs	r1, #44	@ 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3350      	adds	r3, #80	@ 0x50
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	441a      	add	r2, r3
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	202c      	movs	r0, #44	@ 0x2c
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	440b      	add	r3, r1
 8003954:	3350      	adds	r3, #80	@ 0x50
 8003956:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	0cdb      	lsrs	r3, r3, #19
 8003968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	212c      	movs	r1, #44	@ 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	3340      	adds	r3, #64	@ 0x40
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4293      	cmp	r3, r2
 8003984:	d13c      	bne.n	8003a00 <HCD_RXQLVL_IRQHandler+0x19a>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d039      	beq.n	8003a00 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	212c      	movs	r1, #44	@ 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3354      	adds	r3, #84	@ 0x54
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	f083 0301 	eor.w	r3, r3, #1
 80039d2:	b2d8      	uxtb	r0, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	212c      	movs	r1, #44	@ 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	3354      	adds	r3, #84	@ 0x54
 80039e2:	4602      	mov	r2, r0
 80039e4:	701a      	strb	r2, [r3, #0]
      break;
 80039e6:	e00b      	b.n	8003a00 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	212c      	movs	r1, #44	@ 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	3360      	adds	r3, #96	@ 0x60
 80039f6:	2204      	movs	r2, #4
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e001      	b.n	8003a00 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a00:	bf00      	nop
  }
}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	@ 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a36:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d10b      	bne.n	8003a5a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f004 fd11 	bl	8008474 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d132      	bne.n	8003aca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d126      	bne.n	8003ac4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d113      	bne.n	8003aa6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a88:	d106      	bne.n	8003a98 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2102      	movs	r1, #2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 ff3d 	bl	8005910 <USB_InitFSLSPClkSel>
 8003a96:	e011      	b.n	8003abc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 ff36 	bl	8005910 <USB_InitFSLSPClkSel>
 8003aa4:	e00a      	b.n	8003abc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d106      	bne.n	8003abc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003aba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f004 fd03 	bl	80084c8 <HAL_HCD_PortEnabled_Callback>
 8003ac2:	e002      	b.n	8003aca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f004 fd0d 	bl	80084e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d103      	bne.n	8003adc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
 8003ada:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e12b      	b.n	8003d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd f8a0 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	@ 0x24
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b54:	f001 fa20 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 8003b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a81      	ldr	r2, [pc, #516]	@ (8003d64 <HAL_I2C_Init+0x274>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d807      	bhi.n	8003b74 <HAL_I2C_Init+0x84>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a80      	ldr	r2, [pc, #512]	@ (8003d68 <HAL_I2C_Init+0x278>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bf94      	ite	ls
 8003b6c:	2301      	movls	r3, #1
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e006      	b.n	8003b82 <HAL_I2C_Init+0x92>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a7d      	ldr	r2, [pc, #500]	@ (8003d6c <HAL_I2C_Init+0x27c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bf94      	ite	ls
 8003b7c:	2301      	movls	r3, #1
 8003b7e:	2300      	movhi	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0e7      	b.n	8003d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a78      	ldr	r2, [pc, #480]	@ (8003d70 <HAL_I2C_Init+0x280>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d64 <HAL_I2C_Init+0x274>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d802      	bhi.n	8003bc4 <HAL_I2C_Init+0xd4>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	e009      	b.n	8003bd8 <HAL_I2C_Init+0xe8>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	4a69      	ldr	r2, [pc, #420]	@ (8003d74 <HAL_I2C_Init+0x284>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	495c      	ldr	r1, [pc, #368]	@ (8003d64 <HAL_I2C_Init+0x274>)
 8003bf4:	428b      	cmp	r3, r1
 8003bf6:	d819      	bhi.n	8003c2c <HAL_I2C_Init+0x13c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e59      	subs	r1, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_I2C_Init+0x138>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e59      	subs	r1, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c26:	e051      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	e04f      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d111      	bne.n	8003c58 <HAL_I2C_Init+0x168>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e012      	b.n	8003c7e <HAL_I2C_Init+0x18e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	0099      	lsls	r1, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x196>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e022      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <HAL_I2C_Init+0x1bc>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e58      	subs	r0, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003caa:	e00f      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	0099      	lsls	r1, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	6809      	ldr	r1, [r1, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6911      	ldr	r1, [r2, #16]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	000186a0 	.word	0x000186a0
 8003d68:	001e847f 	.word	0x001e847f
 8003d6c:	003d08ff 	.word	0x003d08ff
 8003d70:	431bde83 	.word	0x431bde83
 8003d74:	10624dd3 	.word	0x10624dd3

08003d78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e128      	b.n	8003fdc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a90      	ldr	r2, [pc, #576]	@ (8003fe4 <HAL_I2S_Init+0x26c>)
 8003da2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fc ffa1 	bl	8000cec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dc0:	f023 030f 	bic.w	r3, r3, #15
 8003dc4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d060      	beq.n	8003e98 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dde:	2310      	movs	r3, #16
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e001      	b.n	8003de8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003de4:	2320      	movs	r3, #32
 8003de6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d802      	bhi.n	8003df6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003df6:	2001      	movs	r0, #1
 8003df8:	f001 f9c4 	bl	8005184 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dfc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e06:	d125      	bne.n	8003e54 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	3305      	adds	r3, #5
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	e01f      	b.n	8003e72 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	3305      	adds	r3, #5
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e00e      	b.n	8003e72 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	3305      	adds	r3, #5
 8003e70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe8 <HAL_I2S_Init+0x270>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e003      	b.n	8003ea0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d902      	bls.n	8003eac <HAL_I2S_Init+0x134>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2bff      	cmp	r3, #255	@ 0xff
 8003eaa:	d907      	bls.n	8003ebc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	f043 0210 	orr.w	r2, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e08f      	b.n	8003fdc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	ea42 0103 	orr.w	r1, r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003eda:	f023 030f 	bic.w	r3, r3, #15
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6851      	ldr	r1, [r2, #4]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6892      	ldr	r2, [r2, #8]
 8003ee6:	4311      	orrs	r1, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68d2      	ldr	r2, [r2, #12]
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6992      	ldr	r2, [r2, #24]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d161      	bne.n	8003fcc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a38      	ldr	r2, [pc, #224]	@ (8003fec <HAL_I2S_Init+0x274>)
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a37      	ldr	r2, [pc, #220]	@ (8003ff0 <HAL_I2S_Init+0x278>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_I2S_Init+0x1a4>
 8003f18:	4b36      	ldr	r3, [pc, #216]	@ (8003ff4 <HAL_I2S_Init+0x27c>)
 8003f1a:	e001      	b.n	8003f20 <HAL_I2S_Init+0x1a8>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	4932      	ldr	r1, [pc, #200]	@ (8003ff0 <HAL_I2S_Init+0x278>)
 8003f28:	428a      	cmp	r2, r1
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2S_Init+0x1b8>
 8003f2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ff4 <HAL_I2S_Init+0x27c>)
 8003f2e:	e001      	b.n	8003f34 <HAL_I2S_Init+0x1bc>
 8003f30:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f34:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f38:	f023 030f 	bic.w	r3, r3, #15
 8003f3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff0 <HAL_I2S_Init+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_I2S_Init+0x1d4>
 8003f48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <HAL_I2S_Init+0x27c>)
 8003f4a:	e001      	b.n	8003f50 <HAL_I2S_Init+0x1d8>
 8003f4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f50:	2202      	movs	r2, #2
 8003f52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a25      	ldr	r2, [pc, #148]	@ (8003ff0 <HAL_I2S_Init+0x278>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2S_Init+0x1ea>
 8003f5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_I2S_Init+0x27c>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2S_Init+0x1ee>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f72:	d003      	beq.n	8003f7c <HAL_I2S_Init+0x204>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e001      	b.n	8003f88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f92:	4313      	orrs	r3, r2
 8003f94:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	897b      	ldrh	r3, [r7, #10]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fb4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <HAL_I2S_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2S_Init+0x24c>
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_I2S_Init+0x27c>)
 8003fc2:	e001      	b.n	8003fc8 <HAL_I2S_Init+0x250>
 8003fc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc8:	897a      	ldrh	r2, [r7, #10]
 8003fca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	080040ef 	.word	0x080040ef
 8003fe8:	cccccccd 	.word	0xcccccccd
 8003fec:	08004205 	.word	0x08004205
 8003ff0:	40003800 	.word	0x40003800
 8003ff4:	40003400 	.word	0x40003400

08003ff8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004078:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ffb8 	bl	8003ff8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	b292      	uxth	r2, r2
 80040a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10e      	bne.n	80040e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff93 	bl	800400c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b04      	cmp	r3, #4
 8004108:	d13a      	bne.n	8004180 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d109      	bne.n	8004128 <I2S_IRQHandler+0x3a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b40      	cmp	r3, #64	@ 0x40
 8004120:	d102      	bne.n	8004128 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff ffb4 	bl	8004090 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412e:	2b40      	cmp	r3, #64	@ 0x40
 8004130:	d126      	bne.n	8004180 <I2S_IRQHandler+0x92>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b20      	cmp	r3, #32
 800413e:	d11f      	bne.n	8004180 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800414e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	f043 0202 	orr.w	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ff50 	bl	8004020 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b03      	cmp	r3, #3
 800418a:	d136      	bne.n	80041fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d109      	bne.n	80041aa <I2S_IRQHandler+0xbc>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a0:	2b80      	cmp	r3, #128	@ 0x80
 80041a2:	d102      	bne.n	80041aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff45 	bl	8004034 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d122      	bne.n	80041fa <I2S_IRQHandler+0x10c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d11b      	bne.n	80041fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	f043 0204 	orr.w	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff13 	bl	8004020 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a92      	ldr	r2, [pc, #584]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800421e:	4b92      	ldr	r3, [pc, #584]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004220:	e001      	b.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004222:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a8b      	ldr	r2, [pc, #556]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800423c:	4b8a      	ldr	r3, [pc, #552]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800423e:	e001      	b.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004250:	d004      	beq.n	800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 8099 	bne.w	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d107      	bne.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f925 	bl	80044c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9c8 	bl	8004620 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d13a      	bne.n	8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d035      	beq.n	8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042ae:	4b6e      	ldr	r3, [pc, #440]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b0:	e001      	b.n	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4969      	ldr	r1, [pc, #420]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042be:	428b      	cmp	r3, r1
 80042c0:	d101      	bne.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042c2:	4b69      	ldr	r3, [pc, #420]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042c4:	e001      	b.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fe88 	bl	8004020 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b08      	cmp	r3, #8
 8004318:	f040 80c3 	bne.w	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80bd 	beq.w	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004336:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a49      	ldr	r2, [pc, #292]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004342:	4b49      	ldr	r3, [pc, #292]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004344:	e001      	b.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004346:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4944      	ldr	r1, [pc, #272]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004352:	428b      	cmp	r3, r1
 8004354:	d101      	bne.n	800435a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004356:	4b44      	ldr	r3, [pc, #272]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004358:	e001      	b.n	800435e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800435a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004362:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe4a 	bl	8004020 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800438c:	e089      	b.n	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d107      	bne.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8be 	bl	8004524 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8fd 	bl	80045bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d12f      	bne.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02a      	beq.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f2:	e001      	b.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4919      	ldr	r1, [pc, #100]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004400:	428b      	cmp	r3, r1
 8004402:	d101      	bne.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004404:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004406:	e001      	b.n	800440c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004408:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800440c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004410:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fdfa 	bl	8004020 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b08      	cmp	r3, #8
 8004434:	d136      	bne.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d031      	beq.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800444a:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800444c:	e001      	b.n	8004452 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800444e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4902      	ldr	r1, [pc, #8]	@ (8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800445a:	428b      	cmp	r3, r1
 800445c:	d106      	bne.n	800446c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800445e:	4b02      	ldr	r3, [pc, #8]	@ (8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004460:	e006      	b.n	8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004462:	bf00      	nop
 8004464:	40003800 	.word	0x40003800
 8004468:	40003400 	.word	0x40003400
 800446c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004470:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004474:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004484:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fdc0 	bl	8004020 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a0:	e000      	b.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044a2:	bf00      	nop
}
 80044a4:	bf00      	nop
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	1c99      	adds	r1, r3, #2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80044d2:	881a      	ldrh	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004500:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ffc9 	bl	80044ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	1c99      	adds	r1, r3, #2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6251      	str	r1, [r2, #36]	@ 0x24
 8004536:	8819      	ldrh	r1, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <I2SEx_TxISR_I2SExt+0x90>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <I2SEx_TxISR_I2SExt+0x22>
 8004542:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <I2SEx_TxISR_I2SExt+0x94>)
 8004544:	e001      	b.n	800454a <I2SEx_TxISR_I2SExt+0x26>
 8004546:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800454a:	460a      	mov	r2, r1
 800454c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d121      	bne.n	80045aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <I2SEx_TxISR_I2SExt+0x90>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <I2SEx_TxISR_I2SExt+0x50>
 8004570:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <I2SEx_TxISR_I2SExt+0x94>)
 8004572:	e001      	b.n	8004578 <I2SEx_TxISR_I2SExt+0x54>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	490d      	ldr	r1, [pc, #52]	@ (80045b4 <I2SEx_TxISR_I2SExt+0x90>)
 8004580:	428b      	cmp	r3, r1
 8004582:	d101      	bne.n	8004588 <I2SEx_TxISR_I2SExt+0x64>
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <I2SEx_TxISR_I2SExt+0x94>)
 8004586:	e001      	b.n	800458c <I2SEx_TxISR_I2SExt+0x68>
 8004588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800458c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004590:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff81 	bl	80044ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40003800 	.word	0x40003800
 80045b8:	40003400 	.word	0x40003400

080045bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68d8      	ldr	r0, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	1c99      	adds	r1, r3, #2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045d4:	b282      	uxth	r2, r0
 80045d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d113      	bne.n	8004618 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ff4a 	bl	80044ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a20      	ldr	r2, [pc, #128]	@ (80046b0 <I2SEx_RxISR_I2SExt+0x90>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <I2SEx_RxISR_I2SExt+0x16>
 8004632:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <I2SEx_RxISR_I2SExt+0x94>)
 8004634:	e001      	b.n	800463a <I2SEx_RxISR_I2SExt+0x1a>
 8004636:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800463a:	68d8      	ldr	r0, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	1c99      	adds	r1, r3, #2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004646:	b282      	uxth	r2, r0
 8004648:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d121      	bne.n	80046a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <I2SEx_RxISR_I2SExt+0x90>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <I2SEx_RxISR_I2SExt+0x50>
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <I2SEx_RxISR_I2SExt+0x94>)
 800466e:	e001      	b.n	8004674 <I2SEx_RxISR_I2SExt+0x54>
 8004670:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	490d      	ldr	r1, [pc, #52]	@ (80046b0 <I2SEx_RxISR_I2SExt+0x90>)
 800467c:	428b      	cmp	r3, r1
 800467e:	d101      	bne.n	8004684 <I2SEx_RxISR_I2SExt+0x64>
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <I2SEx_RxISR_I2SExt+0x94>)
 8004682:	e001      	b.n	8004688 <I2SEx_RxISR_I2SExt+0x68>
 8004684:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004688:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800468c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ff03 	bl	80044ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40003800 	.word	0x40003800
 80046b4:	40003400 	.word	0x40003400

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e267      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d075      	beq.n	80047c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d6:	4b88      	ldr	r3, [pc, #544]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00c      	beq.n	80046fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b85      	ldr	r3, [pc, #532]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d112      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b82      	ldr	r3, [pc, #520]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b7e      	ldr	r3, [pc, #504]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x108>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d157      	bne.n	80047c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e242      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471c:	d106      	bne.n	800472c <HAL_RCC_OscConfig+0x74>
 800471e:	4b76      	ldr	r3, [pc, #472]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e01d      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b70      	ldr	r3, [pc, #448]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6f      	ldr	r2, [pc, #444]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b6d      	ldr	r3, [pc, #436]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6c      	ldr	r2, [pc, #432]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 8004750:	4b69      	ldr	r3, [pc, #420]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b66      	ldr	r3, [pc, #408]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a65      	ldr	r2, [pc, #404]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fc fc96 	bl	80010a0 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004778:	f7fc fc92 	bl	80010a0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e207      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b5b      	ldr	r3, [pc, #364]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0xc0>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fc fc82 	bl	80010a0 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fc fc7e 	bl	80010a0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	@ 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1f3      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	4b51      	ldr	r3, [pc, #324]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0xe8>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d063      	beq.n	8004896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ce:	4b4a      	ldr	r3, [pc, #296]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b47      	ldr	r3, [pc, #284]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d11c      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b44      	ldr	r3, [pc, #272]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	4b41      	ldr	r3, [pc, #260]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1c7      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b3b      	ldr	r3, [pc, #236]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4937      	ldr	r1, [pc, #220]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481e:	e03a      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004828:	4b34      	ldr	r3, [pc, #208]	@ (80048fc <HAL_RCC_OscConfig+0x244>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fc fc37 	bl	80010a0 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004836:	f7fc fc33 	bl	80010a0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1a8      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	4b28      	ldr	r3, [pc, #160]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4925      	ldr	r1, [pc, #148]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
 8004868:	e015      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	4b24      	ldr	r3, [pc, #144]	@ (80048fc <HAL_RCC_OscConfig+0x244>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fc fc16 	bl	80010a0 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004878:	f7fc fc12 	bl	80010a0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e187      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d036      	beq.n	8004910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048aa:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <HAL_RCC_OscConfig+0x248>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fc fbf6 	bl	80010a0 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fc fbf2 	bl	80010a0 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e167      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x200>
 80048d6:	e01b      	b.n	8004910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_OscConfig+0x248>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fc fbdf 	bl	80010a0 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	e00e      	b.n	8004904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fc fbdb 	bl	80010a0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d907      	bls.n	8004904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e150      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b88      	ldr	r3, [pc, #544]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ea      	bne.n	80048e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8097 	beq.w	8004a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b81      	ldr	r3, [pc, #516]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b7d      	ldr	r3, [pc, #500]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	4a7c      	ldr	r2, [pc, #496]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	@ 0x40
 800493e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b77      	ldr	r3, [pc, #476]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b74      	ldr	r3, [pc, #464]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a73      	ldr	r2, [pc, #460]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fc fb9b 	bl	80010a0 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fc fb97 	bl	80010a0 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e10c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b6a      	ldr	r3, [pc, #424]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
 8004994:	4b64      	ldr	r3, [pc, #400]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004998:	4a63      	ldr	r2, [pc, #396]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x30c>
 80049aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049c4:	4b58      	ldr	r3, [pc, #352]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	4a57      	ldr	r2, [pc, #348]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d0:	4b55      	ldr	r3, [pc, #340]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a54      	ldr	r2, [pc, #336]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fc fb5c 	bl	80010a0 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fc fb58 	bl	80010a0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0cb      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0ee      	beq.n	80049ec <HAL_RCC_OscConfig+0x334>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fc fb46 	bl	80010a0 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fc fb42 	bl	80010a0 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0b5      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a44:	4a38      	ldr	r2, [pc, #224]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a56:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d05c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d141      	bne.n	8004aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b31      	ldr	r3, [pc, #196]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fc fb16 	bl	80010a0 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fc fb12 	bl	80010a0 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e087      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	491b      	ldr	r1, [pc, #108]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fc faeb 	bl	80010a0 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fc fae7 	bl	80010a0 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e05c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x416>
 8004aec:	e054      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b10      	ldr	r3, [pc, #64]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fc fad4 	bl	80010a0 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fc fad0 	bl	80010a0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e045      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x444>
 8004b1a:	e03d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e038      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_OscConfig+0x4ec>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d028      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fc fa02 	bl	80010a0 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fc f9fe 	bl	80010a0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	490a      	ldr	r1, [pc, #40]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5ccb      	ldrb	r3, [r1, r3]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc f962 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	08008b9c 	.word	0x08008b9c
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d78:	b094      	sub	sp, #80	@ 0x50
 8004d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d80:	2300      	movs	r3, #0
 8004d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d84:	2300      	movs	r3, #0
 8004d86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8c:	4b79      	ldr	r3, [pc, #484]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d00d      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x40>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	f200 80e1 	bhi.w	8004f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x3a>
 8004da6:	e0db      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b73      	ldr	r3, [pc, #460]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004daa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004dac:	e0db      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dae:	4b73      	ldr	r3, [pc, #460]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8004db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004db2:	e0d8      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d063      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b6a      	ldr	r3, [pc, #424]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004de6:	4622      	mov	r2, r4
 8004de8:	462b      	mov	r3, r5
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4621      	mov	r1, r4
 8004e00:	1a51      	subs	r1, r2, r1
 8004e02:	6139      	str	r1, [r7, #16]
 8004e04:	4629      	mov	r1, r5
 8004e06:	eb63 0301 	sbc.w	r3, r3, r1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e18:	4659      	mov	r1, fp
 8004e1a:	018b      	lsls	r3, r1, #6
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e22:	4651      	mov	r1, sl
 8004e24:	018a      	lsls	r2, r1, #6
 8004e26:	4651      	mov	r1, sl
 8004e28:	ebb2 0801 	subs.w	r8, r2, r1
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e46:	4690      	mov	r8, r2
 8004e48:	4699      	mov	r9, r3
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	eb18 0303 	adds.w	r3, r8, r3
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	462b      	mov	r3, r5
 8004e54:	eb49 0303 	adc.w	r3, r9, r3
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e66:	4629      	mov	r1, r5
 8004e68:	024b      	lsls	r3, r1, #9
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e70:	4621      	mov	r1, r4
 8004e72:	024a      	lsls	r2, r1, #9
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e84:	f7fb f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e90:	e058      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e92:	4b38      	ldr	r3, [pc, #224]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	f04f 0000 	mov.w	r0, #0
 8004eb4:	f04f 0100 	mov.w	r1, #0
 8004eb8:	0159      	lsls	r1, r3, #5
 8004eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ebe:	0150      	lsls	r0, r2, #5
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eca:	4649      	mov	r1, r9
 8004ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	00eb      	lsls	r3, r5, #3
 8004ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004efa:	00e2      	lsls	r2, r4, #3
 8004efc:	4614      	mov	r4, r2
 8004efe:	461d      	mov	r5, r3
 8004f00:	4643      	mov	r3, r8
 8004f02:	18e3      	adds	r3, r4, r3
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	464b      	mov	r3, r9
 8004f08:	eb45 0303 	adc.w	r3, r5, r3
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	028b      	lsls	r3, r1, #10
 8004f1e:	4621      	mov	r1, r4
 8004f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f24:	4621      	mov	r1, r4
 8004f26:	028a      	lsls	r2, r1, #10
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	61fa      	str	r2, [r7, #28]
 8004f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f38:	f7fb f946 	bl	80001c8 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4613      	mov	r3, r2
 8004f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f5e:	e002      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3750      	adds	r7, #80	@ 0x50
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	007a1200 	.word	0x007a1200

08004f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f84:	4b03      	ldr	r3, [pc, #12]	@ (8004f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f86:	681b      	ldr	r3, [r3, #0]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000000 	.word	0x20000000

08004f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f9c:	f7ff fff0 	bl	8004f80 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	0a9b      	lsrs	r3, r3, #10
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4903      	ldr	r1, [pc, #12]	@ (8004fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	08008bac 	.word	0x08008bac

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d035      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fe8:	4b62      	ldr	r3, [pc, #392]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fee:	f7fc f857 	bl	80010a0 <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ff6:	f7fc f853 	bl	80010a0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0b0      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005008:	4b5b      	ldr	r3, [pc, #364]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	019a      	lsls	r2, r3, #6
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	071b      	lsls	r3, r3, #28
 8005020:	4955      	ldr	r1, [pc, #340]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005028:	4b52      	ldr	r3, [pc, #328]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502e:	f7fc f837 	bl	80010a0 <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005036:	f7fc f833 	bl	80010a0 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e090      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005048:	4b4b      	ldr	r3, [pc, #300]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8083 	beq.w	8005168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	4b44      	ldr	r3, [pc, #272]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	4a43      	ldr	r2, [pc, #268]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	@ 0x40
 8005072:	4b41      	ldr	r3, [pc, #260]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800507e:	4b3f      	ldr	r3, [pc, #252]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a3e      	ldr	r2, [pc, #248]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800508a:	f7fc f809 	bl	80010a0 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fc f805 	bl	80010a0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e062      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a4:	4b35      	ldr	r3, [pc, #212]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050b0:	4b31      	ldr	r3, [pc, #196]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d028      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050d8:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050de:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050e4:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050ea:	4b23      	ldr	r3, [pc, #140]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d114      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fb ffd3 	bl	80010a0 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e00a      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fb ffcf 	bl	80010a0 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e02a      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ee      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800512c:	d10d      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800513e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005142:	490d      	ldr	r1, [pc, #52]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005144:	4313      	orrs	r3, r2
 8005146:	608b      	str	r3, [r1, #8]
 8005148:	e005      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	4a0a      	ldr	r2, [pc, #40]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005150:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005154:	6093      	str	r3, [r2, #8]
 8005156:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005158:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005162:	4905      	ldr	r1, [pc, #20]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	42470068 	.word	0x42470068
 8005178:	40023800 	.word	0x40023800
 800517c:	40007000 	.word	0x40007000
 8005180:	42470e40 	.word	0x42470e40

08005184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d13e      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051a2:	4b23      	ldr	r3, [pc, #140]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d12f      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ba:	617b      	str	r3, [r7, #20]
          break;
 80051bc:	e02f      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051be:	4b1c      	ldr	r3, [pc, #112]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ca:	d108      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051cc:	4b18      	ldr	r3, [pc, #96]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d4:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e007      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051de:	4b14      	ldr	r3, [pc, #80]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051e6:	4a15      	ldr	r2, [pc, #84]	@ (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051ee:	4b10      	ldr	r3, [pc, #64]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005202:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005208:	0f1b      	lsrs	r3, r3, #28
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
          break;
 8005216:	e002      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
          break;
 800521c:	bf00      	nop
        }
      }
      break;
 800521e:	bf00      	nop
    }
  }
  return frequency;
 8005220:	697b      	ldr	r3, [r7, #20]
}
 8005222:	4618      	mov	r0, r3
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	00bb8000 	.word	0x00bb8000
 8005238:	007a1200 	.word	0x007a1200
 800523c:	00f42400 	.word	0x00f42400

08005240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e07b      	b.n	800534a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005262:	d009      	beq.n	8005278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	61da      	str	r2, [r3, #28]
 800526a:	e005      	b.n	8005278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb fdaa 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fc:	ea42 0103 	orr.w	r1, r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0104 	and.w	r1, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	f003 0210 	and.w	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005352:	b084      	sub	sp, #16
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	f107 001c 	add.w	r0, r7, #28
 8005360:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	2b01      	cmp	r3, #1
 8005368:	d122      	bne.n	80053b0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800537e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9bf 	bl	8005728 <USB_CoreReset>
 80053aa:	4603      	mov	r3, r0
 80053ac:	73fb      	strb	r3, [r7, #15]
 80053ae:	e01a      	b.n	80053e6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9b3 	bl	8005728 <USB_CoreReset>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80053d8:	e005      	b.n	80053e6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10b      	bne.n	8005404 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f043 0206 	orr.w	r2, r3, #6
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005410:	b004      	add	sp, #16
 8005412:	4770      	bx	lr

08005414 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d115      	bne.n	80054a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005486:	2001      	movs	r0, #1
 8005488:	f7fb fe16 	bl	80010b8 <HAL_Delay>
      ms++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f939 	bl	800570a <USB_GetMode>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d01e      	beq.n	80054dc <USB_SetCurrentMode+0x84>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b31      	cmp	r3, #49	@ 0x31
 80054a2:	d9f0      	bls.n	8005486 <USB_SetCurrentMode+0x2e>
 80054a4:	e01a      	b.n	80054dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fb fdfd 	bl	80010b8 <HAL_Delay>
      ms++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f920 	bl	800570a <USB_GetMode>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <USB_SetCurrentMode+0x84>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b31      	cmp	r3, #49	@ 0x31
 80054d4:	d9f0      	bls.n	80054b8 <USB_SetCurrentMode+0x60>
 80054d6:	e001      	b.n	80054dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e005      	b.n	80054e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b32      	cmp	r3, #50	@ 0x32
 80054e0:	d101      	bne.n	80054e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a13      	ldr	r2, [pc, #76]	@ (8005554 <USB_FlushTxFifo+0x64>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e01b      	b.n	8005548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	daf2      	bge.n	80054fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	019b      	lsls	r3, r3, #6
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a08      	ldr	r2, [pc, #32]	@ (8005554 <USB_FlushTxFifo+0x64>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e006      	b.n	8005548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d0f0      	beq.n	8005528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	00030d40 	.word	0x00030d40

08005558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a11      	ldr	r2, [pc, #68]	@ (80055b4 <USB_FlushRxFifo+0x5c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e018      	b.n	80055a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	daf2      	bge.n	8005564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2210      	movs	r2, #16
 8005586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a08      	ldr	r2, [pc, #32]	@ (80055b4 <USB_FlushRxFifo+0x5c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d0f0      	beq.n	8005588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	@ 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	460b      	mov	r3, r1
 80055c8:	71fb      	strb	r3, [r7, #7]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d123      	bne.n	8005626 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055de:	88bb      	ldrh	r3, [r7, #4]
 80055e0:	3303      	adds	r3, #3
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e018      	b.n	800561e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	031a      	lsls	r2, r3, #12
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f8:	461a      	mov	r2, r3
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	3301      	adds	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3301      	adds	r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	3301      	adds	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3301      	adds	r3, #1
 8005616:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	3301      	adds	r3, #1
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d3e2      	bcc.n	80055ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3724      	adds	r7, #36	@ 0x24
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005634:	b480      	push	{r7}
 8005636:	b08b      	sub	sp, #44	@ 0x2c
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	089b      	lsrs	r3, r3, #2
 800564e:	b29b      	uxth	r3, r3
 8005650:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	e014      	b.n	800568a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	601a      	str	r2, [r3, #0]
    pDest++;
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	3301      	adds	r3, #1
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	3301      	adds	r3, #1
 8005676:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	3301      	adds	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	3301      	adds	r3, #1
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	3301      	adds	r3, #1
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3e6      	bcc.n	8005660 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005692:	8bfb      	ldrh	r3, [r7, #30]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01e      	beq.n	80056d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a2:	461a      	mov	r2, r3
 80056a4:	f107 0310 	add.w	r3, r7, #16
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	701a      	strb	r2, [r3, #0]
      i++;
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	3301      	adds	r3, #1
 80056c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	3301      	adds	r3, #1
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80056ca:	8bfb      	ldrh	r3, [r7, #30]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ea      	bne.n	80056ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056d8:	4618      	mov	r0, r3
 80056da:	372c      	adds	r7, #44	@ 0x2c
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056fc:	68fb      	ldr	r3, [r7, #12]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0301 	and.w	r3, r3, #1
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a13      	ldr	r2, [pc, #76]	@ (800578c <USB_CoreReset+0x64>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e01b      	b.n	800577e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	daf2      	bge.n	8005734 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a09      	ldr	r2, [pc, #36]	@ (800578c <USB_CoreReset+0x64>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e006      	b.n	800577e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d0f0      	beq.n	800575e <USB_CoreReset+0x36>

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	00030d40 	.word	0x00030d40

08005790 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005790:	b084      	sub	sp, #16
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800579e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057b0:	461a      	mov	r2, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10a      	bne.n	8005802 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057fa:	f043 0304 	orr.w	r3, r3, #4
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e014      	b.n	800582c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005810:	f023 0304 	bic.w	r3, r3, #4
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e009      	b.n	800582c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005826:	f023 0304 	bic.w	r3, r3, #4
 800582a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800582c:	2110      	movs	r1, #16
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fe5e 	bl	80054f0 <USB_FlushTxFifo>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fe8a 	bl	8005558 <USB_FlushRxFifo>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	e015      	b.n	8005880 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005860:	461a      	mov	r2, r3
 8005862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005866:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3301      	adds	r3, #1
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	429a      	cmp	r2, r3
 8005886:	d3e5      	bcc.n	8005854 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005894:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <USB_HostInit+0x16c>)
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a13      	ldr	r2, [pc, #76]	@ (8005900 <USB_HostInit+0x170>)
 80058b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80058b8:	e009      	b.n	80058ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2280      	movs	r2, #128	@ 0x80
 80058be:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a10      	ldr	r2, [pc, #64]	@ (8005904 <USB_HostInit+0x174>)
 80058c4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005908 <USB_HostInit+0x178>)
 80058ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f043 0210 	orr.w	r2, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699a      	ldr	r2, [r3, #24]
 80058e4:	4b09      	ldr	r3, [pc, #36]	@ (800590c <USB_HostInit+0x17c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr
 80058fc:	01000200 	.word	0x01000200
 8005900:	00e00300 	.word	0x00e00300
 8005904:	00600080 	.word	0x00600080
 8005908:	004000e0 	.word	0x004000e0
 800590c:	a3200008 	.word	0xa3200008

08005910 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d107      	bne.n	8005962 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005958:	461a      	mov	r2, r3
 800595a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800595e:	6053      	str	r3, [r2, #4]
 8005960:	e009      	b.n	8005976 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d106      	bne.n	8005976 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800596e:	461a      	mov	r2, r3
 8005970:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005974:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80059b4:	2064      	movs	r0, #100	@ 0x64
 80059b6:	f7fb fb7f 	bl	80010b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059c8:	200a      	movs	r0, #10
 80059ca:	f7fb fb75 	bl	80010b8 <HAL_Delay>

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <USB_DriveVbus+0x44>
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d106      	bne.n	8005a1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a26:	d109      	bne.n	8005a3c <USB_DriveVbus+0x64>
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	0c5b      	lsrs	r3, r3, #17
 8005a68:	f003 0303 	and.w	r3, r3, #3
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	b29b      	uxth	r3, r3
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	70fb      	strb	r3, [r7, #3]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70bb      	strb	r3, [r7, #2]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ad0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d87e      	bhi.n	8005bd8 <USB_HC_Init+0x13c>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <USB_HC_Init+0x44>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b9b 	.word	0x08005b9b
 8005ae8:	08005af1 	.word	0x08005af1
 8005aec:	08005b5d 	.word	0x08005b5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afc:	461a      	mov	r2, r3
 8005afe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005b02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	da10      	bge.n	8005b2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	78fa      	ldrb	r2, [r7, #3]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b2a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b2c:	e057      	b.n	8005bde <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d051      	beq.n	8005bde <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b58:	60d3      	str	r3, [r2, #12]
      break;
 8005b5a:	e040      	b.n	8005bde <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005b6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da34      	bge.n	8005be2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b98:	e023      	b.n	8005be2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f240 2325 	movw	r3, #549	@ 0x225
 8005bac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da17      	bge.n	8005be6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005bd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005bd6:	e006      	b.n	8005be6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	77fb      	strb	r3, [r7, #31]
      break;
 8005bdc:	e004      	b.n	8005be8 <USB_HC_Init+0x14c>
      break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <USB_HC_Init+0x14c>
      break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <USB_HC_Init+0x14c>
      break;
 8005be6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	2101      	movs	r1, #1
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	6939      	ldr	r1, [r7, #16]
 8005c1e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c22:	4313      	orrs	r3, r2
 8005c24:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da03      	bge.n	8005c42 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e001      	b.n	8005c46 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff feff 	bl	8005a4a <USB_GetHostSpeed>
 8005c4c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d106      	bne.n	8005c64 <USB_HC_Init+0x1c8>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d003      	beq.n	8005c64 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e001      	b.n	8005c68 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c68:	787b      	ldrb	r3, [r7, #1]
 8005c6a:	059b      	lsls	r3, r3, #22
 8005c6c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c70:	78bb      	ldrb	r3, [r7, #2]
 8005c72:	02db      	lsls	r3, r3, #11
 8005c74:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c78:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c7e:	049b      	lsls	r3, r3, #18
 8005c80:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c84:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c86:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c88:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	0159      	lsls	r1, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	440b      	add	r3, r1
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ca4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ca6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d003      	beq.n	8005cb6 <USB_HC_Init+0x21a>
 8005cae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d10f      	bne.n	8005cd6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	@ 0x30
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cfc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d02d      	beq.n	8005d66 <USB_HC_StartXfer+0x86>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	791b      	ldrb	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d129      	bne.n	8005d66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d117      	bne.n	8005d48 <USB_HC_StartXfer+0x68>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	79db      	ldrb	r3, [r3, #7]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <USB_HC_StartXfer+0x48>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	79db      	ldrb	r3, [r3, #7]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d10f      	bne.n	8005d48 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	6a3a      	ldr	r2, [r7, #32]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <USB_HC_StartXfer+0x86>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	795b      	ldrb	r3, [r3, #5]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d107      	bne.n	8005d66 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fa0f 	bl	8006180 <USB_DoPing>
      return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e0f8      	b.n	8005f58 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d018      	beq.n	8005da0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	8912      	ldrh	r2, [r2, #8]
 8005d76:	4413      	add	r3, r2
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	8912      	ldrh	r2, [r2, #8]
 8005d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d82:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 8005d84:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005d86:	8b7b      	ldrh	r3, [r7, #26]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d90b      	bls.n	8005da4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d8c:	8b7b      	ldrh	r3, [r7, #26]
 8005d8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	8912      	ldrh	r2, [r2, #8]
 8005d96:	fb03 f202 	mul.w	r2, r3, r2
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e001      	b.n	8005da4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005da0:	2301      	movs	r3, #1
 8005da2:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	78db      	ldrb	r3, [r3, #3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	8912      	ldrh	r2, [r2, #8]
 8005db2:	fb03 f202 	mul.w	r2, r3, r2
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	611a      	str	r2, [r3, #16]
 8005dba:	e003      	b.n	8005dc4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dce:	04d9      	lsls	r1, r3, #19
 8005dd0:	4b63      	ldr	r3, [pc, #396]	@ (8005f60 <USB_HC_StartXfer+0x280>)
 8005dd2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dd4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	7a9b      	ldrb	r3, [r3, #10]
 8005dda:	075b      	lsls	r3, r3, #29
 8005ddc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005de0:	69f9      	ldr	r1, [r7, #28]
 8005de2:	0148      	lsls	r0, r1, #5
 8005de4:	6a39      	ldr	r1, [r7, #32]
 8005de6:	4401      	add	r1, r0
 8005de8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	68d9      	ldr	r1, [r3, #12]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e06:	460a      	mov	r2, r1
 8005e08:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e40:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	7e7b      	ldrb	r3, [r7, #25]
 8005e52:	075b      	lsls	r3, r3, #29
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	0148      	lsls	r0, r1, #5
 8005e58:	6a39      	ldr	r1, [r7, #32]
 8005e5a:	4401      	add	r1, r0
 8005e5c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e7a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e003      	b.n	8005e96 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e94:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eaa:	461a      	mov	r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e04e      	b.n	8005f58 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d149      	bne.n	8005f56 <USB_HC_StartXfer+0x276>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d045      	beq.n	8005f56 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	79db      	ldrb	r3, [r3, #7]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d830      	bhi.n	8005f34 <USB_HC_StartXfer+0x254>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <USB_HC_StartXfer+0x1f8>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005ee9 	.word	0x08005ee9
 8005ee4:	08005f0d 	.word	0x08005f0d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	3303      	adds	r3, #3
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ef2:	8afa      	ldrh	r2, [r7, #22]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d91c      	bls.n	8005f38 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f0a:	e015      	b.n	8005f38 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	3303      	adds	r3, #3
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f16:	8afa      	ldrh	r2, [r7, #22]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d90a      	bls.n	8005f3c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f32:	e003      	b.n	8005f3c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f34:	bf00      	nop
 8005f36:	e002      	b.n	8005f3e <USB_HC_StartXfer+0x25e>
        break;
 8005f38:	bf00      	nop
 8005f3a:	e000      	b.n	8005f3e <USB_HC_StartXfer+0x25e>
        break;
 8005f3c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	68d9      	ldr	r1, [r3, #12]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	785a      	ldrb	r2, [r3, #1]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	9000      	str	r0, [sp, #0]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fb31 	bl	80055b8 <USB_WritePacket>
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3728      	adds	r7, #40	@ 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	1ff80000 	.word	0x1ff80000

08005f64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	b29b      	uxth	r3, r3
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b089      	sub	sp, #36	@ 0x24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0c9b      	lsrs	r3, r3, #18
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	0fdb      	lsrs	r3, r3, #31
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d104      	bne.n	8005fe0 <USB_HC_Halt+0x5a>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e0c8      	b.n	8006172 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <USB_HC_Halt+0x66>
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d163      	bne.n	80060b4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006006:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800600a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 80ab 	bne.w	8006170 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d133      	bne.n	800608e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	440a      	add	r2, r1
 800603c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006044:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006064:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006072:	d81d      	bhi.n	80060b0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800608a:	d0ec      	beq.n	8006066 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800608c:	e070      	b.n	8006170 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060ae:	e05f      	b.n	8006170 <USB_HC_Halt+0x1ea>
            break;
 80060b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060b2:	e05d      	b.n	8006170 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d133      	bne.n	800614c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006102:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800611e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006122:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3301      	adds	r3, #1
 8006128:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006130:	d81d      	bhi.n	800616e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006148:	d0ec      	beq.n	8006124 <USB_HC_Halt+0x19e>
 800614a:	e011      	b.n	8006170 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006166:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e000      	b.n	8006170 <USB_HC_Halt+0x1ea>
          break;
 800616e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3724      	adds	r7, #36	@ 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006194:	2301      	movs	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	04da      	lsls	r2, r3, #19
 800619c:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <USB_DoPing+0x74>)
 800619e:	4013      	ands	r3, r2
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	1ff80000 	.word	0x1ff80000

080061f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff f912 	bl	8005436 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006212:	2110      	movs	r1, #16
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff f96b 	bl	80054f0 <USB_FlushTxFifo>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff f997 	bl	8005558 <USB_FlushRxFifo>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006234:	2300      	movs	r3, #0
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	e01f      	b.n	800627a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006250:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006258:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006260:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626e:	461a      	mov	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	3301      	adds	r3, #1
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b0f      	cmp	r3, #15
 800627e:	d9dc      	bls.n	800623a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e034      	b.n	80062f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800629c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ba:	461a      	mov	r2, r3
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062cc:	d80c      	bhi.n	80062e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062e4:	d0ec      	beq.n	80062c0 <USB_StopHost+0xc8>
 80062e6:	e000      	b.n	80062ea <USB_StopHost+0xf2>
        break;
 80062e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d9c7      	bls.n	8006286 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062fc:	461a      	mov	r2, r3
 80062fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006302:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800630a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff f881 	bl	8005414 <USB_EnableGlobalInt>

  return ret;
 8006312:	7ffb      	ldrb	r3, [r7, #31]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b089      	sub	sp, #36	@ 0x24
 8006320:	af04      	add	r7, sp, #16
 8006322:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006324:	2301      	movs	r3, #1
 8006326:	2202      	movs	r2, #2
 8006328:	2102      	movs	r1, #2
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fc66 	bl	8006bfc <USBH_FindInterface>
 8006330:	4603      	mov	r3, r0
 8006332:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2bff      	cmp	r3, #255	@ 0xff
 8006338:	d002      	beq.n	8006340 <USBH_CDC_InterfaceInit+0x24>
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d901      	bls.n	8006344 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006340:	2302      	movs	r3, #2
 8006342:	e13d      	b.n	80065c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fc3b 	bl	8006bc4 <USBH_SelectInterface>
 800634e:	4603      	mov	r3, r0
 8006350:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006358:	2302      	movs	r3, #2
 800635a:	e131      	b.n	80065c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006362:	2050      	movs	r0, #80	@ 0x50
 8006364:	f002 fac0 	bl	80088e8 <malloc>
 8006368:	4603      	mov	r3, r0
 800636a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800637c:	2302      	movs	r3, #2
 800637e:	e11f      	b.n	80065c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006380:	2250      	movs	r2, #80	@ 0x50
 8006382:	2100      	movs	r1, #0
 8006384:	68b8      	ldr	r0, [r7, #8]
 8006386:	f002 fb6d 	bl	8008a64 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	211a      	movs	r1, #26
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b25b      	sxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da15      	bge.n	80063ce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	211a      	movs	r1, #26
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	211a      	movs	r1, #26
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 ff1c 	bl	8008212 <USBH_AllocPipe>
 80063da:	4603      	mov	r3, r0
 80063dc:	461a      	mov	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	7819      	ldrb	r1, [r3, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	7858      	ldrb	r0, [r3, #1]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	8952      	ldrh	r2, [r2, #10]
 80063fa:	9202      	str	r2, [sp, #8]
 80063fc:	2203      	movs	r2, #3
 80063fe:	9201      	str	r2, [sp, #4]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4623      	mov	r3, r4
 8006404:	4602      	mov	r2, r0
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 fed4 	bl	80081b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2200      	movs	r2, #0
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f002 f9e3 	bl	80087e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800641a:	2300      	movs	r3, #0
 800641c:	2200      	movs	r2, #0
 800641e:	210a      	movs	r1, #10
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fbeb 	bl	8006bfc <USBH_FindInterface>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	2bff      	cmp	r3, #255	@ 0xff
 800642e:	d002      	beq.n	8006436 <USBH_CDC_InterfaceInit+0x11a>
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d901      	bls.n	800643a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006436:	2302      	movs	r3, #2
 8006438:	e0c2      	b.n	80065c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	211a      	movs	r1, #26
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b25b      	sxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	da16      	bge.n	8006480 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	211a      	movs	r1, #26
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	211a      	movs	r1, #26
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006478:	881a      	ldrh	r2, [r3, #0]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	835a      	strh	r2, [r3, #26]
 800647e:	e015      	b.n	80064ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	211a      	movs	r1, #26
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	4413      	add	r3, r2
 800648c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	211a      	movs	r1, #26
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064a6:	881a      	ldrh	r2, [r3, #0]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	211a      	movs	r1, #26
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	4413      	add	r3, r2
 80064b8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b25b      	sxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da16      	bge.n	80064f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	211a      	movs	r1, #26
 80064ca:	fb01 f303 	mul.w	r3, r1, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	211a      	movs	r1, #26
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	835a      	strh	r2, [r3, #26]
 80064f0:	e015      	b.n	800651e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	211a      	movs	r1, #26
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	4413      	add	r3, r2
 80064fe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	211a      	movs	r1, #26
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	4413      	add	r3, r2
 8006514:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	7b9b      	ldrb	r3, [r3, #14]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fe74 	bl	8008212 <USBH_AllocPipe>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	7bdb      	ldrb	r3, [r3, #15]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fe6a 	bl	8008212 <USBH_AllocPipe>
 800653e:	4603      	mov	r3, r0
 8006540:	461a      	mov	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	7b59      	ldrb	r1, [r3, #13]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	7b98      	ldrb	r0, [r3, #14]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	8b12      	ldrh	r2, [r2, #24]
 800655e:	9202      	str	r2, [sp, #8]
 8006560:	2202      	movs	r2, #2
 8006562:	9201      	str	r2, [sp, #4]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4623      	mov	r3, r4
 8006568:	4602      	mov	r2, r0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fe22 	bl	80081b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	7b19      	ldrb	r1, [r3, #12]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	7bd8      	ldrb	r0, [r3, #15]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	8b52      	ldrh	r2, [r2, #26]
 8006588:	9202      	str	r2, [sp, #8]
 800658a:	2202      	movs	r2, #2
 800658c:	9201      	str	r2, [sp, #4]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	4623      	mov	r3, r4
 8006592:	4602      	mov	r2, r0
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 fe0d 	bl	80081b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	7b5b      	ldrb	r3, [r3, #13]
 80065a6:	2200      	movs	r2, #0
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f002 f918 	bl	80087e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	7b1b      	ldrb	r3, [r3, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f002 f911 	bl	80087e0 <USBH_LL_SetToggle>

  return USBH_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}

080065c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00e      	beq.n	8006600 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fe02 	bl	80081f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 fe2d 	bl	8008254 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	7b1b      	ldrb	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00e      	beq.n	8006626 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	7b1b      	ldrb	r3, [r3, #12]
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fdef 	bl	80081f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fe1a 	bl	8008254 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	7b5b      	ldrb	r3, [r3, #13]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	7b5b      	ldrb	r3, [r3, #13]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fddc 	bl	80081f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	7b5b      	ldrb	r3, [r3, #13]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fe07 	bl	8008254 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	4618      	mov	r0, r3
 8006662:	f002 f949 	bl	80088f8 <free>
    phost->pActiveClass->pData = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800666c:	2200      	movs	r2, #0
 800666e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3340      	adds	r3, #64	@ 0x40
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8b1 	bl	80067fa <GetLineCoding>
 8006698:	4603      	mov	r3, r0
 800669a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80066a8:	2102      	movs	r1, #2
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066ae:	7afb      	ldrb	r3, [r7, #11]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d877      	bhi.n	80067cc <USBH_CDC_Process+0x114>
 80066dc:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <USBH_CDC_Process+0x2c>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f9 	.word	0x080066f9
 80066e8:	080066ff 	.word	0x080066ff
 80066ec:	0800672f 	.word	0x0800672f
 80066f0:	080067a3 	.word	0x080067a3
 80066f4:	080067b1 	.word	0x080067b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	73fb      	strb	r3, [r7, #15]
      break;
 80066fc:	e06d      	b.n	80067da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f897 	bl	8006838 <SetLineCoding>
 800670a:	4603      	mov	r3, r0
 800670c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800671c:	e058      	b.n	80067d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d055      	beq.n	80067d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2204      	movs	r2, #4
 8006728:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800672c:	e050      	b.n	80067d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	3340      	adds	r3, #64	@ 0x40
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f860 	bl	80067fa <GetLineCoding>
 800673a:	4603      	mov	r3, r0
 800673c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d126      	bne.n	8006792 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006756:	791b      	ldrb	r3, [r3, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	d13b      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006766:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006768:	429a      	cmp	r2, r3
 800676a:	d133      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006776:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006778:	429a      	cmp	r2, r3
 800677a:	d12b      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006784:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006786:	429a      	cmp	r2, r3
 8006788:	d124      	bne.n	80067d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f958 	bl	8006a40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006790:	e020      	b.n	80067d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d01d      	beq.n	80067d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2204      	movs	r2, #4
 800679c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80067a0:	e018      	b.n	80067d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f867 	bl	8006876 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f8da 	bl	8006962 <CDC_ProcessReception>
      break;
 80067ae:	e014      	b.n	80067da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 ffe7 	bl	8007786 <USBH_ClrFeature>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80067ca:	e005      	b.n	80067d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80067cc:	bf00      	nop
 80067ce:	e004      	b.n	80067da <USBH_CDC_Process+0x122>
      break;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <USBH_CDC_Process+0x122>
      break;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <USBH_CDC_Process+0x122>
      break;
 80067d8:	bf00      	nop

  }

  return status;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22a1      	movs	r2, #161	@ 0xa1
 8006808:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2221      	movs	r2, #33	@ 0x21
 800680e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2207      	movs	r2, #7
 8006820:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2207      	movs	r2, #7
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fa72 	bl	8007d12 <USBH_CtlReq>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2221      	movs	r2, #33	@ 0x21
 8006846:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2207      	movs	r2, #7
 800685e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2207      	movs	r2, #7
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fa53 	bl	8007d12 <USBH_CtlReq>
 800686c:	4603      	mov	r3, r0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af02      	add	r7, sp, #8
 800687c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006888:	2300      	movs	r3, #0
 800688a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006892:	2b01      	cmp	r3, #1
 8006894:	d002      	beq.n	800689c <CDC_ProcessTransmission+0x26>
 8006896:	2b02      	cmp	r3, #2
 8006898:	d023      	beq.n	80068e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800689a:	e05e      	b.n	800695a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	8b12      	ldrh	r2, [r2, #24]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d90b      	bls.n	80068c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8b1a      	ldrh	r2, [r3, #24]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	7b5b      	ldrb	r3, [r3, #13]
 80068b4:	2001      	movs	r0, #1
 80068b6:	9000      	str	r0, [sp, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fc38 	bl	800812e <USBH_BulkSendData>
 80068be:	e00b      	b.n	80068d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	7b5b      	ldrb	r3, [r3, #13]
 80068ce:	2001      	movs	r0, #1
 80068d0:	9000      	str	r0, [sp, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fc2b 	bl	800812e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80068e0:	e03b      	b.n	800695a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	7b5b      	ldrb	r3, [r3, #13]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 ff4f 	bl	800878c <USBH_LL_GetURBState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d128      	bne.n	800694a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	8b12      	ldrh	r2, [r2, #24]
 8006900:	4293      	cmp	r3, r2
 8006902:	d90e      	bls.n	8006922 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	8b12      	ldrh	r2, [r2, #24]
 800690c:	1a9a      	subs	r2, r3, r2
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	8b12      	ldrh	r2, [r2, #24]
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	61da      	str	r2, [r3, #28]
 8006920:	e002      	b.n	8006928 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006938:	e00e      	b.n	8006958 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f868 	bl	8006a18 <USBH_CDC_TransmitCallback>
      break;
 8006948:	e006      	b.n	8006958 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d103      	bne.n	8006958 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006958:	bf00      	nop
  }
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006974:	2300      	movs	r3, #0
 8006976:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800697e:	2b03      	cmp	r3, #3
 8006980:	d002      	beq.n	8006988 <CDC_ProcessReception+0x26>
 8006982:	2b04      	cmp	r3, #4
 8006984:	d00e      	beq.n	80069a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006986:	e043      	b.n	8006a10 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	6a19      	ldr	r1, [r3, #32]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	8b5a      	ldrh	r2, [r3, #26]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	7b1b      	ldrb	r3, [r3, #12]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fbef 	bl	8008178 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2204      	movs	r2, #4
 800699e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80069a2:	e035      	b.n	8006a10 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	7b1b      	ldrb	r3, [r3, #12]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 feee 	bl	800878c <USBH_LL_GetURBState>
 80069b0:	4603      	mov	r3, r0
 80069b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069b4:	7cfb      	ldrb	r3, [r7, #19]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d129      	bne.n	8006a0e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	7b1b      	ldrb	r3, [r3, #12]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fe51 	bl	8008668 <USBH_LL_GetLastXferSize>
 80069c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d016      	beq.n	8006a00 <CDC_ProcessReception+0x9e>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	8b5b      	ldrh	r3, [r3, #26]
 80069d6:	461a      	mov	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4293      	cmp	r3, r2
 80069dc:	d910      	bls.n	8006a00 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad2      	subs	r2, r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	441a      	add	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2203      	movs	r2, #3
 80069fa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80069fe:	e006      	b.n	8006a0e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f80f 	bl	8006a2c <USBH_CDC_ReceiveCallback>
      break;
 8006a0e:	bf00      	nop
  }
}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e029      	b.n	8006ac0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	79fa      	ldrb	r2, [r7, #7]
 8006a70:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f81f 	bl	8006ac8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f001 fd21 	bl	8008500 <USBH_LL_Init>

  return USBH_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e009      	b.n	8006aee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	33e0      	adds	r3, #224	@ 0xe0
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b0f      	cmp	r3, #15
 8006af2:	d9f2      	bls.n	8006ada <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e009      	b.n	8006b0e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b14:	d3f1      	bcc.n	8006afa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2240      	movs	r2, #64	@ 0x40
 8006b3a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10e      	bne.n	8006bac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	33de      	adds	r3, #222	@ 0xde
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]
 8006baa:	e004      	b.n	8006bb6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bac:	2302      	movs	r3, #2
 8006bae:	73fb      	strb	r3, [r7, #15]
 8006bb0:	e001      	b.n	8006bb6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006bda:	78fa      	ldrb	r2, [r7, #3]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d204      	bcs.n	8006bea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006be8:	e001      	b.n	8006bee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006bea:	2302      	movs	r3, #2
 8006bec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	70fb      	strb	r3, [r7, #3]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70bb      	strb	r3, [r7, #2]
 8006c12:	4613      	mov	r3, r2
 8006c14:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006c24:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c26:	e025      	b.n	8006c74 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	221a      	movs	r2, #26
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	3308      	adds	r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	3302      	adds	r3, #2
 8006c38:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	795b      	ldrb	r3, [r3, #5]
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d002      	beq.n	8006c4a <USBH_FindInterface+0x4e>
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	2bff      	cmp	r3, #255	@ 0xff
 8006c48:	d111      	bne.n	8006c6e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c4e:	78ba      	ldrb	r2, [r7, #2]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d002      	beq.n	8006c5a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c54:	78bb      	ldrb	r3, [r7, #2]
 8006c56:	2bff      	cmp	r3, #255	@ 0xff
 8006c58:	d109      	bne.n	8006c6e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c5e:	787a      	ldrb	r2, [r7, #1]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d002      	beq.n	8006c6a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c64:	787b      	ldrb	r3, [r7, #1]
 8006c66:	2bff      	cmp	r3, #255	@ 0xff
 8006c68:	d101      	bne.n	8006c6e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	e006      	b.n	8006c7c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	3301      	adds	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d9d6      	bls.n	8006c28 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c7a:	23ff      	movs	r3, #255	@ 0xff
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fc71 	bl	8008578 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006c96:	2101      	movs	r1, #1
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fd8a 	bl	80087b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af04      	add	r7, sp, #16
 8006cae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d102      	bne.n	8006cca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b0b      	cmp	r3, #11
 8006cd2:	f200 81bb 	bhi.w	800704c <USBH_Process+0x3a4>
 8006cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cdc <USBH_Process+0x34>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006d0d 	.word	0x08006d0d
 8006ce0:	08006d3f 	.word	0x08006d3f
 8006ce4:	08006da7 	.word	0x08006da7
 8006ce8:	08006fe7 	.word	0x08006fe7
 8006cec:	0800704d 	.word	0x0800704d
 8006cf0:	08006e47 	.word	0x08006e47
 8006cf4:	08006f8d 	.word	0x08006f8d
 8006cf8:	08006e7d 	.word	0x08006e7d
 8006cfc:	08006e9d 	.word	0x08006e9d
 8006d00:	08006ebb 	.word	0x08006ebb
 8006d04:	08006eff 	.word	0x08006eff
 8006d08:	08006fcf 	.word	0x08006fcf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 819b 	beq.w	8007050 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d20:	20c8      	movs	r0, #200	@ 0xc8
 8006d22:	f001 fd8d 	bl	8008840 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fc83 	bl	8008632 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d3c:	e188      	b.n	8007050 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d107      	bne.n	8006d58 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d56:	e18a      	b.n	800706e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d62:	d914      	bls.n	8006d8e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d903      	bls.n	8006d86 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	220d      	movs	r2, #13
 8006d82:	701a      	strb	r2, [r3, #0]
      break;
 8006d84:	e173      	b.n	800706e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
      break;
 8006d8c:	e16f      	b.n	800706e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d94:	f103 020a 	add.w	r2, r3, #10
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006d9e:	200a      	movs	r0, #10
 8006da0:	f001 fd4e 	bl	8008840 <USBH_Delay>
      break;
 8006da4:	e163      	b.n	800706e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006db6:	2104      	movs	r1, #4
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006dbc:	2064      	movs	r0, #100	@ 0x64
 8006dbe:	f001 fd3f 	bl	8008840 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fc0e 	bl	80085e4 <USBH_LL_GetSpeed>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fa19 	bl	8008212 <USBH_AllocPipe>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006de8:	2180      	movs	r1, #128	@ 0x80
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fa11 	bl	8008212 <USBH_AllocPipe>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7919      	ldrb	r1, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e0c:	9202      	str	r2, [sp, #8]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	9201      	str	r2, [sp, #4]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4603      	mov	r3, r0
 8006e16:	2280      	movs	r2, #128	@ 0x80
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f9cb 	bl	80081b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7959      	ldrb	r1, [r3, #5]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e32:	9202      	str	r2, [sp, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	9201      	str	r2, [sp, #4]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f9b8 	bl	80081b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e44:	e113      	b.n	800706e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f916 	bl	8007078 <USBH_HandleEnum>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 80fd 	bne.w	8007054 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d103      	bne.n	8006e74 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e72:	e0ef      	b.n	8007054 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2207      	movs	r2, #7
 8006e78:	701a      	strb	r2, [r3, #0]
      break;
 8006e7a:	e0eb      	b.n	8007054 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80e8 	beq.w	8007058 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e8e:	2101      	movs	r1, #1
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2208      	movs	r2, #8
 8006e98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006e9a:	e0dd      	b.n	8007058 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fc27 	bl	80076f8 <USBH_SetCfg>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 80d5 	bne.w	800705c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2209      	movs	r2, #9
 8006eb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eb8:	e0d0      	b.n	800705c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d016      	beq.n	8006ef6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006ec8:	2101      	movs	r1, #1
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fc37 	bl	800773e <USBH_SetFeature>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	220a      	movs	r2, #10
 8006ee0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ee2:	e0bd      	b.n	8007060 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	f040 80b9 	bne.w	8007060 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	220a      	movs	r2, #10
 8006ef2:	701a      	strb	r2, [r3, #0]
      break;
 8006ef4:	e0b4      	b.n	8007060 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	220a      	movs	r2, #10
 8006efa:	701a      	strb	r2, [r3, #0]
      break;
 8006efc:	e0b0      	b.n	8007060 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80ad 	beq.w	8007064 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
 8006f16:	e016      	b.n	8006f46 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f18:	7bfa      	ldrb	r2, [r7, #15]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32de      	adds	r2, #222	@ 0xde
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	791a      	ldrb	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d108      	bne.n	8006f40 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f2e:	7bfa      	ldrb	r2, [r7, #15]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	32de      	adds	r2, #222	@ 0xde
 8006f34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006f3e:	e005      	b.n	8006f4c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3301      	adds	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0e5      	beq.n	8006f18 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2206      	movs	r2, #6
 8006f6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f74:	2103      	movs	r1, #3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f7a:	e073      	b.n	8007064 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220d      	movs	r2, #13
 8006f80:	701a      	strb	r2, [r3, #0]
      break;
 8006f82:	e06f      	b.n	8007064 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	220d      	movs	r2, #13
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e06b      	b.n	8007064 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	220b      	movs	r2, #11
 8006fb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fb4:	e058      	b.n	8007068 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d154      	bne.n	8007068 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	220d      	movs	r2, #13
 8006fc2:	701a      	strb	r2, [r3, #0]
      break;
 8006fc4:	e050      	b.n	8007068 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	220d      	movs	r2, #13
 8006fca:	701a      	strb	r2, [r3, #0]
      break;
 8006fcc:	e04c      	b.n	8007068 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d049      	beq.n	800706c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
      }
      break;
 8006fe4:	e042      	b.n	800706c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff fd6a 	bl	8006ac8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007022:	2105      	movs	r1, #5
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d107      	bne.n	8007044 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fe23 	bl	8006c88 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007042:	e014      	b.n	800706e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fa97 	bl	8008578 <USBH_LL_Start>
      break;
 800704a:	e010      	b.n	800706e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800704c:	bf00      	nop
 800704e:	e00e      	b.n	800706e <USBH_Process+0x3c6>
      break;
 8007050:	bf00      	nop
 8007052:	e00c      	b.n	800706e <USBH_Process+0x3c6>
      break;
 8007054:	bf00      	nop
 8007056:	e00a      	b.n	800706e <USBH_Process+0x3c6>
    break;
 8007058:	bf00      	nop
 800705a:	e008      	b.n	800706e <USBH_Process+0x3c6>
      break;
 800705c:	bf00      	nop
 800705e:	e006      	b.n	800706e <USBH_Process+0x3c6>
      break;
 8007060:	bf00      	nop
 8007062:	e004      	b.n	800706e <USBH_Process+0x3c6>
      break;
 8007064:	bf00      	nop
 8007066:	e002      	b.n	800706e <USBH_Process+0x3c6>
      break;
 8007068:	bf00      	nop
 800706a:	e000      	b.n	800706e <USBH_Process+0x3c6>
      break;
 800706c:	bf00      	nop
  }
  return USBH_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af04      	add	r7, sp, #16
 800707e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007084:	2301      	movs	r3, #1
 8007086:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b07      	cmp	r3, #7
 800708e:	f200 81bd 	bhi.w	800740c <USBH_HandleEnum+0x394>
 8007092:	a201      	add	r2, pc, #4	@ (adr r2, 8007098 <USBH_HandleEnum+0x20>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070b9 	.word	0x080070b9
 800709c:	08007173 	.word	0x08007173
 80070a0:	080071dd 	.word	0x080071dd
 80070a4:	08007267 	.word	0x08007267
 80070a8:	080072d1 	.word	0x080072d1
 80070ac:	08007341 	.word	0x08007341
 80070b0:	08007387 	.word	0x08007387
 80070b4:	080073cd 	.word	0x080073cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070b8:	2108      	movs	r1, #8
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa4c 	bl	8007558 <USBH_Get_DevDesc>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d12e      	bne.n	8007128 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7919      	ldrb	r1, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070ee:	9202      	str	r2, [sp, #8]
 80070f0:	2200      	movs	r2, #0
 80070f2:	9201      	str	r2, [sp, #4]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	4603      	mov	r3, r0
 80070f8:	2280      	movs	r2, #128	@ 0x80
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 f85a 	bl	80081b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7959      	ldrb	r1, [r3, #5]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	9201      	str	r2, [sp, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4603      	mov	r3, r0
 800711e:	2200      	movs	r2, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f847 	bl	80081b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007126:	e173      	b.n	8007410 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b03      	cmp	r3, #3
 800712c:	f040 8170 	bne.w	8007410 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007146:	2b03      	cmp	r3, #3
 8007148:	d903      	bls.n	8007152 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	220d      	movs	r2, #13
 800714e:	701a      	strb	r2, [r3, #0]
      break;
 8007150:	e15e      	b.n	8007410 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	795b      	ldrb	r3, [r3, #5]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 f87b 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	791b      	ldrb	r3, [r3, #4]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 f875 	bl	8008254 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
      break;
 8007170:	e14e      	b.n	8007410 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007172:	2112      	movs	r1, #18
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f9ef 	bl	8007558 <USBH_Get_DevDesc>
 800717a:	4603      	mov	r3, r0
 800717c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800718a:	e143      	b.n	8007414 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b03      	cmp	r3, #3
 8007190:	f040 8140 	bne.w	8007414 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800719a:	3301      	adds	r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d903      	bls.n	80071b6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	220d      	movs	r2, #13
 80071b2:	701a      	strb	r2, [r3, #0]
      break;
 80071b4:	e12e      	b.n	8007414 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	795b      	ldrb	r3, [r3, #5]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f849 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f843 	bl	8008254 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
      break;
 80071da:	e11b      	b.n	8007414 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80071dc:	2101      	movs	r1, #1
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa66 	bl	80076b0 <USBH_SetAddress>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d130      	bne.n	8007250 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80071ee:	2002      	movs	r0, #2
 80071f0:	f001 fb26 	bl	8008840 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2203      	movs	r2, #3
 8007200:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7919      	ldrb	r1, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007216:	9202      	str	r2, [sp, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4603      	mov	r3, r0
 8007220:	2280      	movs	r2, #128	@ 0x80
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 ffc6 	bl	80081b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7959      	ldrb	r1, [r3, #5]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800723c:	9202      	str	r2, [sp, #8]
 800723e:	2200      	movs	r2, #0
 8007240:	9201      	str	r2, [sp, #4]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	4603      	mov	r3, r0
 8007246:	2200      	movs	r2, #0
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 ffb3 	bl	80081b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800724e:	e0e3      	b.n	8007418 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b03      	cmp	r3, #3
 8007254:	f040 80e0 	bne.w	8007418 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	220d      	movs	r2, #13
 800725c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	705a      	strb	r2, [r3, #1]
      break;
 8007264:	e0d8      	b.n	8007418 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007266:	2109      	movs	r1, #9
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f99d 	bl	80075a8 <USBH_Get_CfgDesc>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d103      	bne.n	8007280 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2204      	movs	r2, #4
 800727c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800727e:	e0cd      	b.n	800741c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b03      	cmp	r3, #3
 8007284:	f040 80ca 	bne.w	800741c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800728e:	3301      	adds	r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d903      	bls.n	80072aa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	220d      	movs	r2, #13
 80072a6:	701a      	strb	r2, [r3, #0]
      break;
 80072a8:	e0b8      	b.n	800741c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	795b      	ldrb	r3, [r3, #5]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 ffcf 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 ffc9 	bl	8008254 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
      break;
 80072ce:	e0a5      	b.n	800741c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f965 	bl	80075a8 <USBH_Get_CfgDesc>
 80072de:	4603      	mov	r3, r0
 80072e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d103      	bne.n	80072f0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2205      	movs	r2, #5
 80072ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ee:	e097      	b.n	8007420 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	f040 8094 	bne.w	8007420 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072fe:	3301      	adds	r3, #1
 8007300:	b2da      	uxtb	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800730e:	2b03      	cmp	r3, #3
 8007310:	d903      	bls.n	800731a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	220d      	movs	r2, #13
 8007316:	701a      	strb	r2, [r3, #0]
      break;
 8007318:	e082      	b.n	8007420 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	795b      	ldrb	r3, [r3, #5]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 ff97 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	791b      	ldrb	r3, [r3, #4]
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 ff91 	bl	8008254 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
      break;
 800733e:	e06f      	b.n	8007420 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007346:	2b00      	cmp	r3, #0
 8007348:	d019      	beq.n	800737e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007356:	23ff      	movs	r3, #255	@ 0xff
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f949 	bl	80075f0 <USBH_Get_StringDesc>
 800735e:	4603      	mov	r3, r0
 8007360:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2206      	movs	r2, #6
 800736c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800736e:	e059      	b.n	8007424 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d156      	bne.n	8007424 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2206      	movs	r2, #6
 800737a:	705a      	strb	r2, [r3, #1]
      break;
 800737c:	e052      	b.n	8007424 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2206      	movs	r2, #6
 8007382:	705a      	strb	r2, [r3, #1]
      break;
 8007384:	e04e      	b.n	8007424 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800738c:	2b00      	cmp	r3, #0
 800738e:	d019      	beq.n	80073c4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800739c:	23ff      	movs	r3, #255	@ 0xff
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f926 	bl	80075f0 <USBH_Get_StringDesc>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d103      	bne.n	80073b6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2207      	movs	r2, #7
 80073b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073b4:	e038      	b.n	8007428 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d135      	bne.n	8007428 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2207      	movs	r2, #7
 80073c0:	705a      	strb	r2, [r3, #1]
      break;
 80073c2:	e031      	b.n	8007428 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2207      	movs	r2, #7
 80073c8:	705a      	strb	r2, [r3, #1]
      break;
 80073ca:	e02d      	b.n	8007428 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d017      	beq.n	8007406 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073e2:	23ff      	movs	r3, #255	@ 0xff
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f903 	bl	80075f0 <USBH_Get_StringDesc>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073f8:	e018      	b.n	800742c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d115      	bne.n	800742c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
      break;
 8007404:	e012      	b.n	800742c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
      break;
 800740a:	e00f      	b.n	800742c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800740c:	bf00      	nop
 800740e:	e00e      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 8007410:	bf00      	nop
 8007412:	e00c      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 8007414:	bf00      	nop
 8007416:	e00a      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 8007418:	bf00      	nop
 800741a:	e008      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 800741c:	bf00      	nop
 800741e:	e006      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 8007420:	bf00      	nop
 8007422:	e004      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 8007424:	bf00      	nop
 8007426:	e002      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 8007428:	bf00      	nop
 800742a:	e000      	b.n	800742e <USBH_HandleEnum+0x3b6>
      break;
 800742c:	bf00      	nop
  }
  return Status;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f804 	bl	800747a <USBH_HandleSof>
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b0b      	cmp	r3, #11
 800748a:	d10a      	bne.n	80074a2 <USBH_HandleSof+0x28>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
  }
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074ba:	bf00      	nop
}
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80074d6:	bf00      	nop
}
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f83c 	bl	80085ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	791b      	ldrb	r3, [r3, #4]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fe89 	bl	8008254 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	795b      	ldrb	r3, [r3, #5]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fe83 	bl	8008254 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	b29b      	uxth	r3, r3
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f864 	bl	8007646 <USBH_GetDescriptor>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f203 3026 	addw	r0, r3, #806	@ 0x326
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007594:	78fa      	ldrb	r2, [r7, #3]
 8007596:	b292      	uxth	r2, r2
 8007598:	4619      	mov	r1, r3
 800759a:	f000 f919 	bl	80077d0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	331c      	adds	r3, #28
 80075b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075ba:	887b      	ldrh	r3, [r7, #2]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075c4:	2100      	movs	r1, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f83d 	bl	8007646 <USBH_GetDescriptor>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d107      	bne.n	80075e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80075d6:	887b      	ldrh	r3, [r7, #2]
 80075d8:	461a      	mov	r2, r3
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f985 	bl	80078ec <USBH_ParseCfgDesc>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	461a      	mov	r2, r3
 80075fc:	460b      	mov	r3, r1
 80075fe:	72fb      	strb	r3, [r7, #11]
 8007600:	4613      	mov	r3, r2
 8007602:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800760c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007614:	893b      	ldrh	r3, [r7, #8]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	460b      	mov	r3, r1
 800761a:	2100      	movs	r1, #0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f812 	bl	8007646 <USBH_GetDescriptor>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d107      	bne.n	800763c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007632:	893a      	ldrh	r2, [r7, #8]
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fb1e 	bl	8007c78 <USBH_ParseStringDesc>
  }

  return status;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	72fb      	strb	r3, [r7, #11]
 8007654:	4613      	mov	r3, r2
 8007656:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	789b      	ldrb	r3, [r3, #2]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d11c      	bne.n	800769a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007666:	b2da      	uxtb	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2206      	movs	r2, #6
 8007670:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	893a      	ldrh	r2, [r7, #8]
 8007676:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007678:	893b      	ldrh	r3, [r7, #8]
 800767a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800767e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007682:	d104      	bne.n	800768e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f240 4209 	movw	r2, #1033	@ 0x409
 800768a:	829a      	strh	r2, [r3, #20]
 800768c:	e002      	b.n	8007694 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8b3a      	ldrh	r2, [r7, #24]
 8007698:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800769a:	8b3b      	ldrh	r3, [r7, #24]
 800769c:	461a      	mov	r2, r3
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fb36 	bl	8007d12 <USBH_CtlReq>
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d10f      	bne.n	80076e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2205      	movs	r2, #5
 80076ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076e4:	2200      	movs	r2, #0
 80076e6:	2100      	movs	r1, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fb12 	bl	8007d12 <USBH_CtlReq>
 80076ee:	4603      	mov	r3, r0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	789b      	ldrb	r3, [r3, #2]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10e      	bne.n	800772a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2209      	movs	r2, #9
 8007716:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	887a      	ldrh	r2, [r7, #2]
 800771c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800772a:	2200      	movs	r2, #0
 800772c:	2100      	movs	r1, #0
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 faef 	bl	8007d12 <USBH_CtlReq>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	789b      	ldrb	r3, [r3, #2]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10f      	bne.n	8007772 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2203      	movs	r2, #3
 800775c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007772:	2200      	movs	r2, #0
 8007774:	2100      	movs	r1, #0
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 facb 	bl	8007d12 <USBH_CtlReq>
 800777c:	4603      	mov	r3, r0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	789b      	ldrb	r3, [r3, #2]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10f      	bne.n	80077ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 faa7 	bl	8007d12 <USBH_CtlReq>
 80077c4:	4603      	mov	r3, r0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	785a      	ldrb	r2, [r3, #1]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3302      	adds	r3, #2
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3303      	adds	r3, #3
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	791a      	ldrb	r2, [r3, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	795a      	ldrb	r2, [r3, #5]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	799a      	ldrb	r2, [r3, #6]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	79da      	ldrb	r2, [r3, #7]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	79db      	ldrb	r3, [r3, #7]
 800782c:	2b20      	cmp	r3, #32
 800782e:	dc0f      	bgt.n	8007850 <USBH_ParseDevDesc+0x80>
 8007830:	2b08      	cmp	r3, #8
 8007832:	db14      	blt.n	800785e <USBH_ParseDevDesc+0x8e>
 8007834:	3b08      	subs	r3, #8
 8007836:	4a2c      	ldr	r2, [pc, #176]	@ (80078e8 <USBH_ParseDevDesc+0x118>)
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf14      	ite	ne
 8007844:	2301      	movne	r3, #1
 8007846:	2300      	moveq	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <USBH_ParseDevDesc+0x84>
 800784e:	e006      	b.n	800785e <USBH_ParseDevDesc+0x8e>
 8007850:	2b40      	cmp	r3, #64	@ 0x40
 8007852:	d104      	bne.n	800785e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	79da      	ldrb	r2, [r3, #7]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	71da      	strb	r2, [r3, #7]
      break;
 800785c:	e003      	b.n	8007866 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2240      	movs	r2, #64	@ 0x40
 8007862:	71da      	strb	r2, [r3, #7]
      break;
 8007864:	bf00      	nop
  }

  if (length > 8U)
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d936      	bls.n	80078da <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3308      	adds	r3, #8
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3309      	adds	r3, #9
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	b29b      	uxth	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	330a      	adds	r3, #10
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	330b      	adds	r3, #11
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	b29b      	uxth	r3, r3
 8007898:	4313      	orrs	r3, r2
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	330c      	adds	r3, #12
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	330d      	adds	r3, #13
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	7b9a      	ldrb	r2, [r3, #14]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	7bda      	ldrb	r2, [r3, #15]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	7c1a      	ldrb	r2, [r3, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	7c5a      	ldrb	r2, [r3, #17]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	745a      	strb	r2, [r3, #17]
  }
}
 80078da:	bf00      	nop
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	01000101 	.word	0x01000101

080078ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	@ 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007900:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785a      	ldrb	r2, [r3, #1]
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3302      	adds	r3, #2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3303      	adds	r3, #3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007946:	bf28      	it	cs
 8007948:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800794c:	b29a      	uxth	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	791a      	ldrb	r2, [r3, #4]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	795a      	ldrb	r2, [r3, #5]
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	799a      	ldrb	r2, [r3, #6]
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	79da      	ldrb	r2, [r3, #7]
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	7a1a      	ldrb	r2, [r3, #8]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d002      	beq.n	8007988 <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2209      	movs	r2, #9
 8007986:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	2b09      	cmp	r3, #9
 800798c:	f240 809d 	bls.w	8007aca <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8007990:	2309      	movs	r3, #9
 8007992:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007998:	e081      	b.n	8007a9e <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800799a:	f107 0316 	add.w	r3, r7, #22
 800799e:	4619      	mov	r1, r3
 80079a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a2:	f000 f99c 	bl	8007cde <USBH_GetNextDesc>
 80079a6:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d176      	bne.n	8007a9e <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d002      	beq.n	80079be <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80079b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ba:	2209      	movs	r2, #9
 80079bc:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c2:	221a      	movs	r2, #26
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	3308      	adds	r3, #8
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	4413      	add	r3, r2
 80079ce:	3302      	adds	r3, #2
 80079d0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079d4:	69f8      	ldr	r0, [r7, #28]
 80079d6:	f000 f87e 	bl	8007ad6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079e4:	e043      	b.n	8007a6e <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079e6:	f107 0316 	add.w	r3, r7, #22
 80079ea:	4619      	mov	r1, r3
 80079ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079ee:	f000 f976 	bl	8007cde <USBH_GetNextDesc>
 80079f2:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b05      	cmp	r3, #5
 80079fa:	d138      	bne.n	8007a6e <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	795b      	ldrb	r3, [r3, #5]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d10f      	bne.n	8007a24 <USBH_ParseCfgDesc+0x138>
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	799b      	ldrb	r3, [r3, #6]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d10b      	bne.n	8007a24 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	79db      	ldrb	r3, [r3, #7]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10f      	bne.n	8007a34 <USBH_ParseCfgDesc+0x148>
 8007a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b09      	cmp	r3, #9
 8007a1a:	d00b      	beq.n	8007a34 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	2209      	movs	r2, #9
 8007a20:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a22:	e007      	b.n	8007a34 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	d004      	beq.n	8007a36 <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2e:	2207      	movs	r2, #7
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e000      	b.n	8007a36 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a34:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a3a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a3e:	3201      	adds	r2, #1
 8007a40:	00d2      	lsls	r2, r2, #3
 8007a42:	211a      	movs	r1, #26
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	4413      	add	r3, r2
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	6a3a      	ldr	r2, [r7, #32]
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f86b 	bl	8007b34 <USBH_ParseEPDesc>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a68:	3301      	adds	r3, #1
 8007a6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	791b      	ldrb	r3, [r3, #4]
 8007a72:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d204      	bcs.n	8007a84 <USBH_ParseCfgDesc+0x198>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	885a      	ldrh	r2, [r3, #2]
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d8b0      	bhi.n	80079e6 <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d201      	bcs.n	8007a94 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e01c      	b.n	8007ace <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8007a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a98:	3301      	adds	r3, #1
 8007a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d805      	bhi.n	8007ab2 <USBH_ParseCfgDesc+0x1c6>
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	885a      	ldrh	r2, [r3, #2]
 8007aaa:	8afb      	ldrh	r3, [r7, #22]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	f63f af74 	bhi.w	800799a <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	791b      	ldrb	r3, [r3, #4]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	bf28      	it	cs
 8007aba:	2302      	movcs	r3, #2
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d201      	bcs.n	8007aca <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e001      	b.n	8007ace <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8007aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3730      	adds	r7, #48	@ 0x30
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	785a      	ldrb	r2, [r3, #1]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	789a      	ldrb	r2, [r3, #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	78da      	ldrb	r2, [r3, #3]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	791a      	ldrb	r2, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	795a      	ldrb	r2, [r3, #5]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	799a      	ldrb	r2, [r3, #6]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	79da      	ldrb	r2, [r3, #7]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	7a1a      	ldrb	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	721a      	strb	r2, [r3, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	781a      	ldrb	r2, [r3, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	785a      	ldrb	r2, [r3, #1]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	789a      	ldrb	r2, [r3, #2]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	78da      	ldrb	r2, [r3, #3]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3304      	adds	r3, #4
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3305      	adds	r3, #5
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	799a      	ldrb	r2, [r3, #6]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	889b      	ldrh	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
 8007b92:	e031      	b.n	8007bf8 <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	889b      	ldrh	r3, [r3, #4]
 8007b98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	889b      	ldrh	r3, [r3, #4]
 8007baa:	b21a      	sxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3305      	adds	r3, #5
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10f      	bne.n	8007bea <USBH_ParseEPDesc+0xb6>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3305      	adds	r3, #5
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be6:	b21b      	sxth	r3, r3
 8007be8:	e001      	b.n	8007bee <USBH_ParseEPDesc+0xba>
 8007bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d116      	bne.n	8007c30 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d005      	beq.n	8007c1a <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	78db      	ldrb	r3, [r3, #3]
 8007c12:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d127      	bne.n	8007c6a <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	799b      	ldrb	r3, [r3, #6]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <USBH_ParseEPDesc+0xf6>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	799b      	ldrb	r3, [r3, #6]
 8007c26:	2b10      	cmp	r3, #16
 8007c28:	d91f      	bls.n	8007c6a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	75fb      	strb	r3, [r7, #23]
 8007c2e:	e01c      	b.n	8007c6a <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d10a      	bne.n	8007c52 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	799b      	ldrb	r3, [r3, #6]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <USBH_ParseEPDesc+0x118>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	799b      	ldrb	r3, [r3, #6]
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d90e      	bls.n	8007c6a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	75fb      	strb	r3, [r7, #23]
 8007c50:	e00b      	b.n	8007c6a <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	78db      	ldrb	r3, [r3, #3]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d105      	bne.n	8007c6a <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	799b      	ldrb	r3, [r3, #6]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 8007c66:	2303      	movs	r3, #3
 8007c68:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d120      	bne.n	8007cd2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	1e9a      	subs	r2, r3, #2
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	bf28      	it	cs
 8007c9c:	4613      	movcs	r3, r2
 8007c9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	82fb      	strh	r3, [r7, #22]
 8007caa:	e00b      	b.n	8007cc4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007cac:	8afb      	ldrh	r3, [r7, #22]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cbe:	8afb      	ldrh	r3, [r7, #22]
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	82fb      	strh	r3, [r7, #22]
 8007cc4:	8afa      	ldrh	r2, [r7, #22]
 8007cc6:	8abb      	ldrh	r3, [r7, #20]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d3ef      	bcc.n	8007cac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4413      	add	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d20:	2301      	movs	r3, #1
 8007d22:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	789b      	ldrb	r3, [r3, #2]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d002      	beq.n	8007d32 <USBH_CtlReq+0x20>
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d00f      	beq.n	8007d50 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d30:	e027      	b.n	8007d82 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2202      	movs	r2, #2
 8007d48:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4e:	e018      	b.n	8007d82 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f81b 	bl	8007d8c <USBH_HandleControl>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <USBH_CtlReq+0x54>
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d106      	bne.n	8007d74 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	761a      	strb	r2, [r3, #24]
      break;
 8007d72:	e005      	b.n	8007d80 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d102      	bne.n	8007d80 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	709a      	strb	r2, [r3, #2]
      break;
 8007d80:	bf00      	nop
  }
  return status;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7e1b      	ldrb	r3, [r3, #24]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	2b0a      	cmp	r3, #10
 8007da4:	f200 8156 	bhi.w	8008054 <USBH_HandleControl+0x2c8>
 8007da8:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <USBH_HandleControl+0x24>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	08007df7 	.word	0x08007df7
 8007db8:	08007e61 	.word	0x08007e61
 8007dbc:	08007e87 	.word	0x08007e87
 8007dc0:	08007ebf 	.word	0x08007ebf
 8007dc4:	08007ee9 	.word	0x08007ee9
 8007dc8:	08007f3b 	.word	0x08007f3b
 8007dcc:	08007f5d 	.word	0x08007f5d
 8007dd0:	08007f99 	.word	0x08007f99
 8007dd4:	08007fbf 	.word	0x08007fbf
 8007dd8:	08007ffd 	.word	0x08007ffd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f103 0110 	add.w	r1, r3, #16
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f943 	bl	8008074 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e139      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fcc5 	bl	800878c <USBH_LL_GetURBState>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d11e      	bne.n	8007e4a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7c1b      	ldrb	r3, [r3, #16]
 8007e10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8adb      	ldrh	r3, [r3, #22]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e1e:	7b7b      	ldrb	r3, [r7, #13]
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d103      	bne.n	8007e2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2203      	movs	r2, #3
 8007e28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e2a:	e115      	b.n	8008058 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2205      	movs	r2, #5
 8007e30:	761a      	strb	r2, [r3, #24]
      break;
 8007e32:	e111      	b.n	8008058 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e34:	7b7b      	ldrb	r3, [r7, #13]
 8007e36:	2b80      	cmp	r3, #128	@ 0x80
 8007e38:	d103      	bne.n	8007e42 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2209      	movs	r2, #9
 8007e3e:	761a      	strb	r2, [r3, #24]
      break;
 8007e40:	e10a      	b.n	8008058 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2207      	movs	r2, #7
 8007e46:	761a      	strb	r2, [r3, #24]
      break;
 8007e48:	e106      	b.n	8008058 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d003      	beq.n	8007e58 <USBH_HandleControl+0xcc>
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	f040 8100 	bne.w	8008058 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220b      	movs	r2, #11
 8007e5c:	761a      	strb	r2, [r3, #24]
      break;
 8007e5e:	e0fb      	b.n	8008058 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6899      	ldr	r1, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	899a      	ldrh	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f93a 	bl	80080f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2204      	movs	r2, #4
 8007e82:	761a      	strb	r2, [r3, #24]
      break;
 8007e84:	e0f1      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc7d 	bl	800878c <USBH_LL_GetURBState>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d102      	bne.n	8007ea2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2209      	movs	r2, #9
 8007ea0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d102      	bne.n	8007eae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eac:	e0d6      	b.n	800805c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	f040 80d3 	bne.w	800805c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	220b      	movs	r2, #11
 8007eba:	761a      	strb	r2, [r3, #24]
      break;
 8007ebc:	e0ce      	b.n	800805c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6899      	ldr	r1, [r3, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	899a      	ldrh	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	795b      	ldrb	r3, [r3, #5]
 8007eca:	2001      	movs	r0, #1
 8007ecc:	9000      	str	r0, [sp, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8ea 	bl	80080a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2206      	movs	r2, #6
 8007ee4:	761a      	strb	r2, [r3, #24]
      break;
 8007ee6:	e0c0      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	795b      	ldrb	r3, [r3, #5]
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fc4c 	bl	800878c <USBH_LL_GetURBState>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2207      	movs	r2, #7
 8007f02:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f04:	e0ac      	b.n	8008060 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	d105      	bne.n	8007f18 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	220c      	movs	r2, #12
 8007f10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e0a3      	b.n	8008060 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d103      	bne.n	8007f26 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2205      	movs	r2, #5
 8007f22:	761a      	strb	r2, [r3, #24]
      break;
 8007f24:	e09c      	b.n	8008060 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	f040 8099 	bne.w	8008060 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220b      	movs	r2, #11
 8007f32:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	73fb      	strb	r3, [r7, #15]
      break;
 8007f38:	e092      	b.n	8008060 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	791b      	ldrb	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8d5 	bl	80080f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2208      	movs	r2, #8
 8007f58:	761a      	strb	r2, [r3, #24]

      break;
 8007f5a:	e086      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	791b      	ldrb	r3, [r3, #4]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fc12 	bl	800878c <USBH_LL_GetURBState>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d105      	bne.n	8007f7e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	220d      	movs	r2, #13
 8007f76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f7c:	e072      	b.n	8008064 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d103      	bne.n	8007f8c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	220b      	movs	r2, #11
 8007f88:	761a      	strb	r2, [r3, #24]
      break;
 8007f8a:	e06b      	b.n	8008064 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d168      	bne.n	8008064 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f92:	2303      	movs	r3, #3
 8007f94:	73fb      	strb	r3, [r7, #15]
      break;
 8007f96:	e065      	b.n	8008064 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	795b      	ldrb	r3, [r3, #5]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	9200      	str	r2, [sp, #0]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f87f 	bl	80080a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220a      	movs	r2, #10
 8007fba:	761a      	strb	r2, [r3, #24]
      break;
 8007fbc:	e055      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	795b      	ldrb	r3, [r3, #5]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbe1 	bl	800878c <USBH_LL_GetURBState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d105      	bne.n	8007fe0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	220d      	movs	r2, #13
 8007fdc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fde:	e043      	b.n	8008068 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2209      	movs	r2, #9
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e03c      	b.n	8008068 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d139      	bne.n	8008068 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	220b      	movs	r2, #11
 8007ff8:	761a      	strb	r2, [r3, #24]
      break;
 8007ffa:	e035      	b.n	8008068 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7e5b      	ldrb	r3, [r3, #25]
 8008000:	3301      	adds	r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	765a      	strb	r2, [r3, #25]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7e5b      	ldrb	r3, [r3, #25]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d806      	bhi.n	800801e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800801c:	e025      	b.n	800806a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008024:	2106      	movs	r1, #6
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	795b      	ldrb	r3, [r3, #5]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f90c 	bl	8008254 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	791b      	ldrb	r3, [r3, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f906 	bl	8008254 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800804e:	2302      	movs	r3, #2
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	e00a      	b.n	800806a <USBH_HandleControl+0x2de>

    default:
      break;
 8008054:	bf00      	nop
 8008056:	e008      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008058:	bf00      	nop
 800805a:	e006      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 800805c:	bf00      	nop
 800805e:	e004      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008060:	bf00      	nop
 8008062:	e002      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008064:	bf00      	nop
 8008066:	e000      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008068:	bf00      	nop
  }

  return status;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af04      	add	r7, sp, #16
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008082:	79f9      	ldrb	r1, [r7, #7]
 8008084:	2300      	movs	r3, #0
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	2308      	movs	r3, #8
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	2300      	movs	r3, #0
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	2200      	movs	r2, #0
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 fb46 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af04      	add	r7, sp, #16
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4611      	mov	r1, r2
 80080b4:	461a      	mov	r2, r3
 80080b6:	460b      	mov	r3, r1
 80080b8:	80fb      	strh	r3, [r7, #6]
 80080ba:	4613      	mov	r3, r2
 80080bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080cc:	7979      	ldrb	r1, [r7, #5]
 80080ce:	7e3b      	ldrb	r3, [r7, #24]
 80080d0:	9303      	str	r3, [sp, #12]
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	9302      	str	r3, [sp, #8]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	2301      	movs	r3, #1
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	2200      	movs	r2, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fb21 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b088      	sub	sp, #32
 80080f6:	af04      	add	r7, sp, #16
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	4611      	mov	r1, r2
 80080fe:	461a      	mov	r2, r3
 8008100:	460b      	mov	r3, r1
 8008102:	80fb      	strh	r3, [r7, #6]
 8008104:	4613      	mov	r3, r2
 8008106:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008108:	7979      	ldrb	r1, [r7, #5]
 800810a:	2300      	movs	r3, #0
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	2301      	movs	r3, #1
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	2201      	movs	r2, #1
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fb03 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008124:	2300      	movs	r3, #0

}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b088      	sub	sp, #32
 8008132:	af04      	add	r7, sp, #16
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	4611      	mov	r1, r2
 800813a:	461a      	mov	r2, r3
 800813c:	460b      	mov	r3, r1
 800813e:	80fb      	strh	r3, [r7, #6]
 8008140:	4613      	mov	r3, r2
 8008142:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008152:	7979      	ldrb	r1, [r7, #5]
 8008154:	7e3b      	ldrb	r3, [r7, #24]
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	2301      	movs	r3, #1
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2302      	movs	r3, #2
 8008166:	2200      	movs	r2, #0
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fade 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af04      	add	r7, sp, #16
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4611      	mov	r1, r2
 8008184:	461a      	mov	r2, r3
 8008186:	460b      	mov	r3, r1
 8008188:	80fb      	strh	r3, [r7, #6]
 800818a:	4613      	mov	r3, r2
 800818c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800818e:	7979      	ldrb	r1, [r7, #5]
 8008190:	2300      	movs	r3, #0
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	2301      	movs	r3, #1
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2201      	movs	r2, #1
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fac0 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	70fb      	strb	r3, [r7, #3]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70bb      	strb	r3, [r7, #2]
 80081ca:	4613      	mov	r3, r2
 80081cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081ce:	7878      	ldrb	r0, [r7, #1]
 80081d0:	78ba      	ldrb	r2, [r7, #2]
 80081d2:	78f9      	ldrb	r1, [r7, #3]
 80081d4:	8b3b      	ldrh	r3, [r7, #24]
 80081d6:	9302      	str	r3, [sp, #8]
 80081d8:	7d3b      	ldrb	r3, [r7, #20]
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	7c3b      	ldrb	r3, [r7, #16]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4603      	mov	r3, r0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa53 	bl	800868e <USBH_LL_OpenPipe>

  return USBH_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa72 	bl	80086ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f836 	bl	8008290 <USBH_GetFreePipe>
 8008224:	4603      	mov	r3, r0
 8008226:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800822e:	4293      	cmp	r3, r2
 8008230:	d00a      	beq.n	8008248 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	33e0      	adds	r3, #224	@ 0xe0
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	b2db      	uxtb	r3, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b0f      	cmp	r3, #15
 8008264:	d80d      	bhi.n	8008282 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	33e0      	adds	r3, #224	@ 0xe0
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	33e0      	adds	r3, #224	@ 0xe0
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
 80082a0:	e00f      	b.n	80082c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	33e0      	adds	r3, #224	@ 0xe0
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	e007      	b.n	80082cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	3301      	adds	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b0f      	cmp	r3, #15
 80082c6:	d9ec      	bls.n	80082a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80082dc:	2201      	movs	r2, #1
 80082de:	490e      	ldr	r1, [pc, #56]	@ (8008318 <MX_USB_HOST_Init+0x40>)
 80082e0:	480e      	ldr	r0, [pc, #56]	@ (800831c <MX_USB_HOST_Init+0x44>)
 80082e2:	f7fe fbb7 	bl	8006a54 <USBH_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80082ec:	f7f8 fbfc 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80082f0:	490b      	ldr	r1, [pc, #44]	@ (8008320 <MX_USB_HOST_Init+0x48>)
 80082f2:	480a      	ldr	r0, [pc, #40]	@ (800831c <MX_USB_HOST_Init+0x44>)
 80082f4:	f7fe fc3c 	bl	8006b70 <USBH_RegisterClass>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80082fe:	f7f8 fbf3 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008302:	4806      	ldr	r0, [pc, #24]	@ (800831c <MX_USB_HOST_Init+0x44>)
 8008304:	f7fe fcc0 	bl	8006c88 <USBH_Start>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800830e:	f7f8 fbeb 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	08008339 	.word	0x08008339
 800831c:	20000230 	.word	0x20000230
 8008320:	2000000c 	.word	0x2000000c

08008324 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008328:	4802      	ldr	r0, [pc, #8]	@ (8008334 <MX_USB_HOST_Process+0x10>)
 800832a:	f7fe fcbd 	bl	8006ca8 <USBH_Process>
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000230 	.word	0x20000230

08008338 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b04      	cmp	r3, #4
 800834a:	d819      	bhi.n	8008380 <USBH_UserProcess+0x48>
 800834c:	a201      	add	r2, pc, #4	@ (adr r2, 8008354 <USBH_UserProcess+0x1c>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008381 	.word	0x08008381
 8008358:	08008371 	.word	0x08008371
 800835c:	08008381 	.word	0x08008381
 8008360:	08008379 	.word	0x08008379
 8008364:	08008369 	.word	0x08008369
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008368:	4b09      	ldr	r3, [pc, #36]	@ (8008390 <USBH_UserProcess+0x58>)
 800836a:	2203      	movs	r2, #3
 800836c:	701a      	strb	r2, [r3, #0]
  break;
 800836e:	e008      	b.n	8008382 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008370:	4b07      	ldr	r3, [pc, #28]	@ (8008390 <USBH_UserProcess+0x58>)
 8008372:	2202      	movs	r2, #2
 8008374:	701a      	strb	r2, [r3, #0]
  break;
 8008376:	e004      	b.n	8008382 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008378:	4b05      	ldr	r3, [pc, #20]	@ (8008390 <USBH_UserProcess+0x58>)
 800837a:	2201      	movs	r2, #1
 800837c:	701a      	strb	r2, [r3, #0]
  break;
 800837e:	e000      	b.n	8008382 <USBH_UserProcess+0x4a>

  default:
  break;
 8008380:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20000608 	.word	0x20000608

08008394 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	@ 0x28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	605a      	str	r2, [r3, #4]
 80083a6:	609a      	str	r2, [r3, #8]
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083b4:	d147      	bne.n	8008446 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	4b25      	ldr	r3, [pc, #148]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 80083bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083be:	4a24      	ldr	r2, [pc, #144]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80083c6:	4b22      	ldr	r3, [pc, #136]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 80083c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	4619      	mov	r1, r3
 80083e6:	481b      	ldr	r0, [pc, #108]	@ (8008454 <HAL_HCD_MspInit+0xc0>)
 80083e8:	f7f9 fda8 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80083f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f2:	2302      	movs	r3, #2
 80083f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083fa:	2300      	movs	r3, #0
 80083fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083fe:	230a      	movs	r3, #10
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008402:	f107 0314 	add.w	r3, r7, #20
 8008406:	4619      	mov	r1, r3
 8008408:	4812      	ldr	r0, [pc, #72]	@ (8008454 <HAL_HCD_MspInit+0xc0>)
 800840a:	f7f9 fd97 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800840e:	4b10      	ldr	r3, [pc, #64]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 8008410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008412:	4a0f      	ldr	r2, [pc, #60]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 8008414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008418:	6353      	str	r3, [r2, #52]	@ 0x34
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	4b0c      	ldr	r3, [pc, #48]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 8008420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008422:	4a0b      	ldr	r2, [pc, #44]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 8008424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008428:	6453      	str	r3, [r2, #68]	@ 0x44
 800842a:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <HAL_HCD_MspInit+0xbc>)
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	2043      	movs	r0, #67	@ 0x43
 800843c:	f7f9 fd47 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008440:	2043      	movs	r0, #67	@ 0x43
 8008442:	f7f9 fd60 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008446:	bf00      	nop
 8008448:	3728      	adds	r7, #40	@ 0x28
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40023800 	.word	0x40023800
 8008454:	40020000 	.word	0x40020000

08008458 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fff5 	bl	8007456 <USBH_LL_IncTimer>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f82d 	bl	80074e2 <USBH_LL_Connect>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff f836 	bl	8007510 <USBH_LL_Disconnect>
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
 80084b8:	4613      	mov	r3, r2
 80084ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe ffe7 	bl	80074aa <USBH_LL_PortEnabled>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe ffe7 	bl	80074c6 <USBH_LL_PortDisabled>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800850e:	2b01      	cmp	r3, #1
 8008510:	d12a      	bne.n	8008568 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008512:	4a18      	ldr	r2, [pc, #96]	@ (8008574 <USBH_LL_Init+0x74>)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <USBH_LL_Init+0x74>)
 800851e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008522:	4b14      	ldr	r3, [pc, #80]	@ (8008574 <USBH_LL_Init+0x74>)
 8008524:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008528:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800852a:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <USBH_LL_Init+0x74>)
 800852c:	2208      	movs	r2, #8
 800852e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008530:	4b10      	ldr	r3, [pc, #64]	@ (8008574 <USBH_LL_Init+0x74>)
 8008532:	2201      	movs	r2, #1
 8008534:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008536:	4b0f      	ldr	r3, [pc, #60]	@ (8008574 <USBH_LL_Init+0x74>)
 8008538:	2200      	movs	r2, #0
 800853a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800853c:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <USBH_LL_Init+0x74>)
 800853e:	2202      	movs	r2, #2
 8008540:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008542:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <USBH_LL_Init+0x74>)
 8008544:	2200      	movs	r2, #0
 8008546:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008548:	480a      	ldr	r0, [pc, #40]	@ (8008574 <USBH_LL_Init+0x74>)
 800854a:	f7f9 fec6 	bl	80022da <HAL_HCD_Init>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008554:	f7f8 fac8 	bl	8000ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008558:	4806      	ldr	r0, [pc, #24]	@ (8008574 <USBH_LL_Init+0x74>)
 800855a:	f7fa faaa 	bl	8002ab2 <HAL_HCD_GetCurrentFrame>
 800855e:	4603      	mov	r3, r0
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7fe ff68 	bl	8007438 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	2000060c 	.word	0x2000060c

08008578 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fa fa19 	bl	80029c6 <HAL_HCD_Start>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f95c 	bl	8008858 <USBH_Get_USB_Status>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fa fa21 	bl	8002a0c <HAL_HCD_Stop>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f941 	bl	8008858 <USBH_Get_USB_Status>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085da:	7bbb      	ldrb	r3, [r7, #14]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fa fa69 	bl	8002ace <HAL_HCD_GetCurrentSpeed>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d00c      	beq.n	800861c <USBH_LL_GetSpeed+0x38>
 8008602:	2b02      	cmp	r3, #2
 8008604:	d80d      	bhi.n	8008622 <USBH_LL_GetSpeed+0x3e>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <USBH_LL_GetSpeed+0x2c>
 800860a:	2b01      	cmp	r3, #1
 800860c:	d003      	beq.n	8008616 <USBH_LL_GetSpeed+0x32>
 800860e:	e008      	b.n	8008622 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e008      	b.n	8008628 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008616:	2301      	movs	r3, #1
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e005      	b.n	8008628 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800861c:	2302      	movs	r3, #2
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	e002      	b.n	8008628 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008622:	2301      	movs	r3, #1
 8008624:	73fb      	strb	r3, [r7, #15]
    break;
 8008626:	bf00      	nop
  }
  return  speed;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008648:	4618      	mov	r0, r3
 800864a:	f7fa f9fc 	bl	8002a46 <HAL_HCD_ResetPort>
 800864e:	4603      	mov	r3, r0
 8008650:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f8ff 	bl	8008858 <USBH_Get_USB_Status>
 800865a:	4603      	mov	r3, r0
 800865c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7fa fa03 	bl	8002a8a <HAL_HCD_HC_GetXferCount>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800868e:	b590      	push	{r4, r7, lr}
 8008690:	b089      	sub	sp, #36	@ 0x24
 8008692:	af04      	add	r7, sp, #16
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	461a      	mov	r2, r3
 800869c:	4603      	mov	r3, r0
 800869e:	70fb      	strb	r3, [r7, #3]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70bb      	strb	r3, [r7, #2]
 80086a4:	4613      	mov	r3, r2
 80086a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086b6:	787c      	ldrb	r4, [r7, #1]
 80086b8:	78ba      	ldrb	r2, [r7, #2]
 80086ba:	78f9      	ldrb	r1, [r7, #3]
 80086bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4623      	mov	r3, r4
 80086ce:	f7f9 fe66 	bl	800239e <HAL_HCD_HC_Init>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f8bd 	bl	8008858 <USBH_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}

080086ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7f9 fed6 	bl	80024bc <HAL_HCD_HC_Halt>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f89e 	bl	8008858 <USBH_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800872a:	b590      	push	{r4, r7, lr}
 800872c:	b089      	sub	sp, #36	@ 0x24
 800872e:	af04      	add	r7, sp, #16
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	461a      	mov	r2, r3
 8008738:	4603      	mov	r3, r0
 800873a:	70fb      	strb	r3, [r7, #3]
 800873c:	460b      	mov	r3, r1
 800873e:	70bb      	strb	r3, [r7, #2]
 8008740:	4613      	mov	r3, r2
 8008742:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008752:	787c      	ldrb	r4, [r7, #1]
 8008754:	78ba      	ldrb	r2, [r7, #2]
 8008756:	78f9      	ldrb	r1, [r7, #3]
 8008758:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	4623      	mov	r3, r4
 800876e:	f7f9 fec9 	bl	8002504 <HAL_HCD_HC_SubmitRequest>
 8008772:	4603      	mov	r3, r0
 8008774:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 f86d 	bl	8008858 <USBH_Get_USB_Status>
 800877e:	4603      	mov	r3, r0
 8008780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008782:	7bbb      	ldrb	r3, [r7, #14]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}

0800878c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fa f95d 	bl	8002a62 <HAL_HCD_HC_GetURBState>
 80087a8:	4603      	mov	r3, r0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d103      	bne.n	80087d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 f870 	bl	80088b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087d0:	20c8      	movs	r0, #200	@ 0xc8
 80087d2:	f7f8 fc71 	bl	80010b8 <HAL_Delay>
  return USBH_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
 80087ec:	4613      	mov	r3, r2
 80087ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	212c      	movs	r1, #44	@ 0x2c
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	333b      	adds	r3, #59	@ 0x3b
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	212c      	movs	r1, #44	@ 0x2c
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	3354      	adds	r3, #84	@ 0x54
 800881a:	78ba      	ldrb	r2, [r7, #2]
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e008      	b.n	8008832 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	212c      	movs	r1, #44	@ 0x2c
 8008826:	fb01 f303 	mul.w	r3, r1, r3
 800882a:	4413      	add	r3, r2
 800882c:	3355      	adds	r3, #85	@ 0x55
 800882e:	78ba      	ldrb	r2, [r7, #2]
 8008830:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7f8 fc35 	bl	80010b8 <HAL_Delay>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	2b03      	cmp	r3, #3
 800886a:	d817      	bhi.n	800889c <USBH_Get_USB_Status+0x44>
 800886c:	a201      	add	r2, pc, #4	@ (adr r2, 8008874 <USBH_Get_USB_Status+0x1c>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	08008885 	.word	0x08008885
 8008878:	0800888b 	.word	0x0800888b
 800887c:	08008891 	.word	0x08008891
 8008880:	08008897 	.word	0x08008897
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	e00b      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	73fb      	strb	r3, [r7, #15]
    break;
 800888e:	e008      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	e005      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	73fb      	strb	r3, [r7, #15]
    break;
 800889a:	e002      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800889c:	2302      	movs	r3, #2
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	bf00      	nop
  }
  return usb_status;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
 80088c8:	e001      	b.n	80088ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80088ca:	2301      	movs	r3, #1
 80088cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	461a      	mov	r2, r3
 80088d2:	2101      	movs	r1, #1
 80088d4:	4803      	ldr	r0, [pc, #12]	@ (80088e4 <MX_DriverVbusFS+0x34>)
 80088d6:	f7f9 fccd 	bl	8002274 <HAL_GPIO_WritePin>
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	40020800 	.word	0x40020800

080088e8 <malloc>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	@ (80088f4 <malloc+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f000 b82d 	b.w	800894c <_malloc_r>
 80088f2:	bf00      	nop
 80088f4:	2000002c 	.word	0x2000002c

080088f8 <free>:
 80088f8:	4b02      	ldr	r3, [pc, #8]	@ (8008904 <free+0xc>)
 80088fa:	4601      	mov	r1, r0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f000 b8f5 	b.w	8008aec <_free_r>
 8008902:	bf00      	nop
 8008904:	2000002c 	.word	0x2000002c

08008908 <sbrk_aligned>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4e0f      	ldr	r6, [pc, #60]	@ (8008948 <sbrk_aligned+0x40>)
 800890c:	460c      	mov	r4, r1
 800890e:	6831      	ldr	r1, [r6, #0]
 8008910:	4605      	mov	r5, r0
 8008912:	b911      	cbnz	r1, 800891a <sbrk_aligned+0x12>
 8008914:	f000 f8ae 	bl	8008a74 <_sbrk_r>
 8008918:	6030      	str	r0, [r6, #0]
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f000 f8a9 	bl	8008a74 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d103      	bne.n	800892e <sbrk_aligned+0x26>
 8008926:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800892a:	4620      	mov	r0, r4
 800892c:	bd70      	pop	{r4, r5, r6, pc}
 800892e:	1cc4      	adds	r4, r0, #3
 8008930:	f024 0403 	bic.w	r4, r4, #3
 8008934:	42a0      	cmp	r0, r4
 8008936:	d0f8      	beq.n	800892a <sbrk_aligned+0x22>
 8008938:	1a21      	subs	r1, r4, r0
 800893a:	4628      	mov	r0, r5
 800893c:	f000 f89a 	bl	8008a74 <_sbrk_r>
 8008940:	3001      	adds	r0, #1
 8008942:	d1f2      	bne.n	800892a <sbrk_aligned+0x22>
 8008944:	e7ef      	b.n	8008926 <sbrk_aligned+0x1e>
 8008946:	bf00      	nop
 8008948:	20000910 	.word	0x20000910

0800894c <_malloc_r>:
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008950:	1ccd      	adds	r5, r1, #3
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	2d00      	cmp	r5, #0
 8008960:	4606      	mov	r6, r0
 8008962:	db01      	blt.n	8008968 <_malloc_r+0x1c>
 8008964:	42a9      	cmp	r1, r5
 8008966:	d904      	bls.n	8008972 <_malloc_r+0x26>
 8008968:	230c      	movs	r3, #12
 800896a:	6033      	str	r3, [r6, #0]
 800896c:	2000      	movs	r0, #0
 800896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a48 <_malloc_r+0xfc>
 8008976:	f000 f869 	bl	8008a4c <__malloc_lock>
 800897a:	f8d8 3000 	ldr.w	r3, [r8]
 800897e:	461c      	mov	r4, r3
 8008980:	bb44      	cbnz	r4, 80089d4 <_malloc_r+0x88>
 8008982:	4629      	mov	r1, r5
 8008984:	4630      	mov	r0, r6
 8008986:	f7ff ffbf 	bl	8008908 <sbrk_aligned>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	4604      	mov	r4, r0
 800898e:	d158      	bne.n	8008a42 <_malloc_r+0xf6>
 8008990:	f8d8 4000 	ldr.w	r4, [r8]
 8008994:	4627      	mov	r7, r4
 8008996:	2f00      	cmp	r7, #0
 8008998:	d143      	bne.n	8008a22 <_malloc_r+0xd6>
 800899a:	2c00      	cmp	r4, #0
 800899c:	d04b      	beq.n	8008a36 <_malloc_r+0xea>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4639      	mov	r1, r7
 80089a2:	4630      	mov	r0, r6
 80089a4:	eb04 0903 	add.w	r9, r4, r3
 80089a8:	f000 f864 	bl	8008a74 <_sbrk_r>
 80089ac:	4581      	cmp	r9, r0
 80089ae:	d142      	bne.n	8008a36 <_malloc_r+0xea>
 80089b0:	6821      	ldr	r1, [r4, #0]
 80089b2:	1a6d      	subs	r5, r5, r1
 80089b4:	4629      	mov	r1, r5
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff ffa6 	bl	8008908 <sbrk_aligned>
 80089bc:	3001      	adds	r0, #1
 80089be:	d03a      	beq.n	8008a36 <_malloc_r+0xea>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	442b      	add	r3, r5
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	bb62      	cbnz	r2, 8008a28 <_malloc_r+0xdc>
 80089ce:	f8c8 7000 	str.w	r7, [r8]
 80089d2:	e00f      	b.n	80089f4 <_malloc_r+0xa8>
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	1b52      	subs	r2, r2, r5
 80089d8:	d420      	bmi.n	8008a1c <_malloc_r+0xd0>
 80089da:	2a0b      	cmp	r2, #11
 80089dc:	d917      	bls.n	8008a0e <_malloc_r+0xc2>
 80089de:	1961      	adds	r1, r4, r5
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	6025      	str	r5, [r4, #0]
 80089e4:	bf18      	it	ne
 80089e6:	6059      	strne	r1, [r3, #4]
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	bf08      	it	eq
 80089ec:	f8c8 1000 	streq.w	r1, [r8]
 80089f0:	5162      	str	r2, [r4, r5]
 80089f2:	604b      	str	r3, [r1, #4]
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 f82f 	bl	8008a58 <__malloc_unlock>
 80089fa:	f104 000b 	add.w	r0, r4, #11
 80089fe:	1d23      	adds	r3, r4, #4
 8008a00:	f020 0007 	bic.w	r0, r0, #7
 8008a04:	1ac2      	subs	r2, r0, r3
 8008a06:	bf1c      	itt	ne
 8008a08:	1a1b      	subne	r3, r3, r0
 8008a0a:	50a3      	strne	r3, [r4, r2]
 8008a0c:	e7af      	b.n	800896e <_malloc_r+0x22>
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	bf0c      	ite	eq
 8008a14:	f8c8 2000 	streq.w	r2, [r8]
 8008a18:	605a      	strne	r2, [r3, #4]
 8008a1a:	e7eb      	b.n	80089f4 <_malloc_r+0xa8>
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	6864      	ldr	r4, [r4, #4]
 8008a20:	e7ae      	b.n	8008980 <_malloc_r+0x34>
 8008a22:	463c      	mov	r4, r7
 8008a24:	687f      	ldr	r7, [r7, #4]
 8008a26:	e7b6      	b.n	8008996 <_malloc_r+0x4a>
 8008a28:	461a      	mov	r2, r3
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d1fb      	bne.n	8008a28 <_malloc_r+0xdc>
 8008a30:	2300      	movs	r3, #0
 8008a32:	6053      	str	r3, [r2, #4]
 8008a34:	e7de      	b.n	80089f4 <_malloc_r+0xa8>
 8008a36:	230c      	movs	r3, #12
 8008a38:	6033      	str	r3, [r6, #0]
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f000 f80c 	bl	8008a58 <__malloc_unlock>
 8008a40:	e794      	b.n	800896c <_malloc_r+0x20>
 8008a42:	6005      	str	r5, [r0, #0]
 8008a44:	e7d6      	b.n	80089f4 <_malloc_r+0xa8>
 8008a46:	bf00      	nop
 8008a48:	20000914 	.word	0x20000914

08008a4c <__malloc_lock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	@ (8008a54 <__malloc_lock+0x8>)
 8008a4e:	f000 b84b 	b.w	8008ae8 <__retarget_lock_acquire_recursive>
 8008a52:	bf00      	nop
 8008a54:	20000a54 	.word	0x20000a54

08008a58 <__malloc_unlock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	@ (8008a60 <__malloc_unlock+0x8>)
 8008a5a:	f000 b846 	b.w	8008aea <__retarget_lock_release_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20000a54 	.word	0x20000a54

08008a64 <memset>:
 8008a64:	4402      	add	r2, r0
 8008a66:	4603      	mov	r3, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d100      	bne.n	8008a6e <memset+0xa>
 8008a6c:	4770      	bx	lr
 8008a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a72:	e7f9      	b.n	8008a68 <memset+0x4>

08008a74 <_sbrk_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d06      	ldr	r5, [pc, #24]	@ (8008a90 <_sbrk_r+0x1c>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	f7f8 fa36 	bl	8000ef0 <_sbrk>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_sbrk_r+0x1a>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_sbrk_r+0x1a>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	20000a50 	.word	0x20000a50

08008a94 <__errno>:
 8008a94:	4b01      	ldr	r3, [pc, #4]	@ (8008a9c <__errno+0x8>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	2000002c 	.word	0x2000002c

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ad8 <__libc_init_array+0x38>)
 8008aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8008adc <__libc_init_array+0x3c>)
 8008aa6:	1b64      	subs	r4, r4, r5
 8008aa8:	10a4      	asrs	r4, r4, #2
 8008aaa:	2600      	movs	r6, #0
 8008aac:	42a6      	cmp	r6, r4
 8008aae:	d109      	bne.n	8008ac4 <__libc_init_array+0x24>
 8008ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ae0 <__libc_init_array+0x40>)
 8008ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ae4 <__libc_init_array+0x44>)
 8008ab4:	f000 f864 	bl	8008b80 <_init>
 8008ab8:	1b64      	subs	r4, r4, r5
 8008aba:	10a4      	asrs	r4, r4, #2
 8008abc:	2600      	movs	r6, #0
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	d105      	bne.n	8008ace <__libc_init_array+0x2e>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac8:	4798      	blx	r3
 8008aca:	3601      	adds	r6, #1
 8008acc:	e7ee      	b.n	8008aac <__libc_init_array+0xc>
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	4798      	blx	r3
 8008ad4:	3601      	adds	r6, #1
 8008ad6:	e7f2      	b.n	8008abe <__libc_init_array+0x1e>
 8008ad8:	08008bbc 	.word	0x08008bbc
 8008adc:	08008bbc 	.word	0x08008bbc
 8008ae0:	08008bbc 	.word	0x08008bbc
 8008ae4:	08008bc0 	.word	0x08008bc0

08008ae8 <__retarget_lock_acquire_recursive>:
 8008ae8:	4770      	bx	lr

08008aea <__retarget_lock_release_recursive>:
 8008aea:	4770      	bx	lr

08008aec <_free_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4605      	mov	r5, r0
 8008af0:	2900      	cmp	r1, #0
 8008af2:	d041      	beq.n	8008b78 <_free_r+0x8c>
 8008af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af8:	1f0c      	subs	r4, r1, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfb8      	it	lt
 8008afe:	18e4      	addlt	r4, r4, r3
 8008b00:	f7ff ffa4 	bl	8008a4c <__malloc_lock>
 8008b04:	4a1d      	ldr	r2, [pc, #116]	@ (8008b7c <_free_r+0x90>)
 8008b06:	6813      	ldr	r3, [r2, #0]
 8008b08:	b933      	cbnz	r3, 8008b18 <_free_r+0x2c>
 8008b0a:	6063      	str	r3, [r4, #4]
 8008b0c:	6014      	str	r4, [r2, #0]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b14:	f7ff bfa0 	b.w	8008a58 <__malloc_unlock>
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d908      	bls.n	8008b2e <_free_r+0x42>
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	1821      	adds	r1, r4, r0
 8008b20:	428b      	cmp	r3, r1
 8008b22:	bf01      	itttt	eq
 8008b24:	6819      	ldreq	r1, [r3, #0]
 8008b26:	685b      	ldreq	r3, [r3, #4]
 8008b28:	1809      	addeq	r1, r1, r0
 8008b2a:	6021      	streq	r1, [r4, #0]
 8008b2c:	e7ed      	b.n	8008b0a <_free_r+0x1e>
 8008b2e:	461a      	mov	r2, r3
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	b10b      	cbz	r3, 8008b38 <_free_r+0x4c>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d9fa      	bls.n	8008b2e <_free_r+0x42>
 8008b38:	6811      	ldr	r1, [r2, #0]
 8008b3a:	1850      	adds	r0, r2, r1
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d10b      	bne.n	8008b58 <_free_r+0x6c>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	4401      	add	r1, r0
 8008b44:	1850      	adds	r0, r2, r1
 8008b46:	4283      	cmp	r3, r0
 8008b48:	6011      	str	r1, [r2, #0]
 8008b4a:	d1e0      	bne.n	8008b0e <_free_r+0x22>
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	6053      	str	r3, [r2, #4]
 8008b52:	4408      	add	r0, r1
 8008b54:	6010      	str	r0, [r2, #0]
 8008b56:	e7da      	b.n	8008b0e <_free_r+0x22>
 8008b58:	d902      	bls.n	8008b60 <_free_r+0x74>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	602b      	str	r3, [r5, #0]
 8008b5e:	e7d6      	b.n	8008b0e <_free_r+0x22>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	1821      	adds	r1, r4, r0
 8008b64:	428b      	cmp	r3, r1
 8008b66:	bf04      	itt	eq
 8008b68:	6819      	ldreq	r1, [r3, #0]
 8008b6a:	685b      	ldreq	r3, [r3, #4]
 8008b6c:	6063      	str	r3, [r4, #4]
 8008b6e:	bf04      	itt	eq
 8008b70:	1809      	addeq	r1, r1, r0
 8008b72:	6021      	streq	r1, [r4, #0]
 8008b74:	6054      	str	r4, [r2, #4]
 8008b76:	e7ca      	b.n	8008b0e <_free_r+0x22>
 8008b78:	bd38      	pop	{r3, r4, r5, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000914 	.word	0x20000914

08008b80 <_init>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr

08008b8c <_fini>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr
